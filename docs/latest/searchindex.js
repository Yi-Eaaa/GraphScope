Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_instrument", "development/how_to_submit_pr", "development/how_to_test", "error_codes", "flex/coordinator", "flex/coordinator/dev_guide", "flex/coordinator/development/dev_and_test", "flex/coordinator/development/python/README", "flex/coordinator/development/python/docs/AlertApi", "flex/coordinator/development/python/docs/BaseEdgeType", "flex/coordinator/development/python/docs/BaseEdgeTypeVertexTypePairRelationsInner", "flex/coordinator/development/python/docs/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/coordinator/development/python/docs/BasePropertyMeta", "flex/coordinator/development/python/docs/BaseVertexType", "flex/coordinator/development/python/docs/BaseVertexTypeXCsrParams", "flex/coordinator/development/python/docs/ColumnMapping", "flex/coordinator/development/python/docs/ColumnMappingColumn", "flex/coordinator/development/python/docs/CreateAlertReceiverRequest", "flex/coordinator/development/python/docs/CreateAlertRuleRequest", "flex/coordinator/development/python/docs/CreateDataloadingJobResponse", "flex/coordinator/development/python/docs/CreateEdgeType", "flex/coordinator/development/python/docs/CreateGraphRequest", "flex/coordinator/development/python/docs/CreateGraphResponse", "flex/coordinator/development/python/docs/CreateGraphSchemaRequest", "flex/coordinator/development/python/docs/CreatePropertyMeta", "flex/coordinator/development/python/docs/CreateStoredProcRequest", "flex/coordinator/development/python/docs/CreateStoredProcResponse", "flex/coordinator/development/python/docs/CreateVertexType", "flex/coordinator/development/python/docs/DataSourceApi", "flex/coordinator/development/python/docs/DataloadingJobConfig", "flex/coordinator/development/python/docs/DataloadingJobConfigEdgesInner", "flex/coordinator/development/python/docs/DataloadingJobConfigLoadingConfig", "flex/coordinator/development/python/docs/DataloadingJobConfigLoadingConfigFormat", "flex/coordinator/development/python/docs/DataloadingJobConfigVerticesInner", "flex/coordinator/development/python/docs/DataloadingMRJobConfig", "flex/coordinator/development/python/docs/DateType", "flex/coordinator/development/python/docs/DeploymentApi", "flex/coordinator/development/python/docs/EdgeMapping", "flex/coordinator/development/python/docs/EdgeMappingTypeTriplet", "flex/coordinator/development/python/docs/Error", "flex/coordinator/development/python/docs/GSDataType", "flex/coordinator/development/python/docs/GetAlertMessageResponse", "flex/coordinator/development/python/docs/GetAlertReceiverResponse", "flex/coordinator/development/python/docs/GetAlertRuleResponse", "flex/coordinator/development/python/docs/GetEdgeType", "flex/coordinator/development/python/docs/GetGraphResponse", "flex/coordinator/development/python/docs/GetGraphSchemaResponse", "flex/coordinator/development/python/docs/GetPodLogResponse", "flex/coordinator/development/python/docs/GetPropertyMeta", "flex/coordinator/development/python/docs/GetResourceUsageResponse", "flex/coordinator/development/python/docs/GetStorageUsageResponse", "flex/coordinator/development/python/docs/GetStoredProcResponse", "flex/coordinator/development/python/docs/GetVertexType", "flex/coordinator/development/python/docs/GraphApi", "flex/coordinator/development/python/docs/JobApi", "flex/coordinator/development/python/docs/JobStatus", "flex/coordinator/development/python/docs/LongText", "flex/coordinator/development/python/docs/NodeStatus", "flex/coordinator/development/python/docs/Parameter", "flex/coordinator/development/python/docs/PodStatus", "flex/coordinator/development/python/docs/PrimitiveType", "flex/coordinator/development/python/docs/ResourceUsage", "flex/coordinator/development/python/docs/RunningDeploymentInfo", "flex/coordinator/development/python/docs/RunningDeploymentStatus", "flex/coordinator/development/python/docs/SchemaMapping", "flex/coordinator/development/python/docs/ServiceApi", "flex/coordinator/development/python/docs/ServiceStatus", "flex/coordinator/development/python/docs/ServiceStatusSdkEndpoints", "flex/coordinator/development/python/docs/StartServiceRequest", "flex/coordinator/development/python/docs/StoredProcedureApi", "flex/coordinator/development/python/docs/StoredProcedureMeta", "flex/coordinator/development/python/docs/StringType", "flex/coordinator/development/python/docs/StringTypeString", "flex/coordinator/development/python/docs/TemporalType", "flex/coordinator/development/python/docs/TemporalTypeTemporal", "flex/coordinator/development/python/docs/TimeStampType", "flex/coordinator/development/python/docs/UpdateAlertMessageStatusRequest", "flex/coordinator/development/python/docs/UpdateStoredProcRequest", "flex/coordinator/development/python/docs/UploadFileResponse", "flex/coordinator/development/python/docs/UtilsApi", "flex/coordinator/development/python/docs/VertexMapping", "flex/coordinator/development/python/python_sdk", "flex/coordinator/getting_started", "flex/coordinator/restful_api", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/deployment", "flex/interactive/dev_guide", "flex/interactive/development/dev_and_test", "flex/interactive/development/java/APIResponseWithCode", "flex/interactive/development/java/BaseEdgeType", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/java/BasePropertyMeta", "flex/interactive/development/java/BaseVertexType", "flex/interactive/development/java/BaseVertexTypeXCsrParams", "flex/interactive/development/java/ColumnMapping", "flex/interactive/development/java/CreateEdgeType", "flex/interactive/development/java/CreateGraphRequest", "flex/interactive/development/java/CreateGraphResponse", "flex/interactive/development/java/CreateGraphSchemaRequest", "flex/interactive/development/java/CreateProcedureRequest", "flex/interactive/development/java/CreateProcedureResponse", "flex/interactive/development/java/CreatePropertyMeta", "flex/interactive/development/java/CreateVertexType", "flex/interactive/development/java/DateType", "flex/interactive/development/java/EdgeApi", "flex/interactive/development/java/EdgeData", "flex/interactive/development/java/EdgeMapping", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/java/EdgeMappingTypeTriplet", "flex/interactive/development/java/EdgeRequest", "flex/interactive/development/java/EdgeStatistics", "flex/interactive/development/java/FixedChar", "flex/interactive/development/java/FixedCharChar", "flex/interactive/development/java/GSDataType", "flex/interactive/development/java/GetEdgeType", "flex/interactive/development/java/GetGraphResponse", "flex/interactive/development/java/GetGraphSchemaResponse", "flex/interactive/development/java/GetGraphStatisticsResponse", "flex/interactive/development/java/GetProcedureResponse", "flex/interactive/development/java/GetPropertyMeta", "flex/interactive/development/java/GetVertexType", "flex/interactive/development/java/GraphManagementApi", "flex/interactive/development/java/JobManagementApi", "flex/interactive/development/java/JobResponse", "flex/interactive/development/java/JobStatus", "flex/interactive/development/java/LongText", "flex/interactive/development/java/Parameter", "flex/interactive/development/java/PrimitiveType", "flex/interactive/development/java/ProcedureManagementApi", "flex/interactive/development/java/Property", "flex/interactive/development/java/QueryRequest", "flex/interactive/development/java/QueryServiceApi", "flex/interactive/development/java/SchemaMapping", "flex/interactive/development/java/SchemaMappingLoadingConfig", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/java/ServiceManagementApi", "flex/interactive/development/java/ServiceStatus", "flex/interactive/development/java/StartServiceRequest", "flex/interactive/development/java/StoredProcedureMeta", "flex/interactive/development/java/StringType", "flex/interactive/development/java/StringTypeString", "flex/interactive/development/java/TemporalType", "flex/interactive/development/java/TemporalTypeTemporal", "flex/interactive/development/java/TimeStampType", "flex/interactive/development/java/TypedValue", "flex/interactive/development/java/UpdateProcedureRequest", "flex/interactive/development/java/UploadFileResponse", "flex/interactive/development/java/VarChar", "flex/interactive/development/java/VarCharVarChar", "flex/interactive/development/java/VertexApi", "flex/interactive/development/java/VertexData", "flex/interactive/development/java/VertexEdgeRequest", "flex/interactive/development/java/VertexMapping", "flex/interactive/development/java/VertexRequest", "flex/interactive/development/java/VertexStatistics", "flex/interactive/development/java/VertexTypePairStatistics", "flex/interactive/development/java/java_sdk", "flex/interactive/development/python/APIResponseWithCode", "flex/interactive/development/python/BaseEdgeType", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/python/BasePropertyMeta", "flex/interactive/development/python/BaseVertexType", "flex/interactive/development/python/BaseVertexTypeXCsrParams", "flex/interactive/development/python/ColumnMapping", "flex/interactive/development/python/CreateEdgeType", "flex/interactive/development/python/CreateGraphRequest", "flex/interactive/development/python/CreateGraphResponse", "flex/interactive/development/python/CreateGraphSchemaRequest", "flex/interactive/development/python/CreateProcedureRequest", "flex/interactive/development/python/CreateProcedureResponse", "flex/interactive/development/python/CreatePropertyMeta", "flex/interactive/development/python/CreateVertexType", "flex/interactive/development/python/DateType", "flex/interactive/development/python/EdgeApi", "flex/interactive/development/python/EdgeData", "flex/interactive/development/python/EdgeMapping", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/python/EdgeMappingTypeTriplet", "flex/interactive/development/python/EdgeRequest", "flex/interactive/development/python/EdgeStatistics", "flex/interactive/development/python/FixedChar", "flex/interactive/development/python/FixedCharChar", "flex/interactive/development/python/GSDataType", "flex/interactive/development/python/GetEdgeType", "flex/interactive/development/python/GetGraphResponse", "flex/interactive/development/python/GetGraphSchemaResponse", "flex/interactive/development/python/GetGraphStatisticsResponse", "flex/interactive/development/python/GetProcedureResponse", "flex/interactive/development/python/GetPropertyMeta", "flex/interactive/development/python/GetVertexType", "flex/interactive/development/python/GraphManagementApi", "flex/interactive/development/python/JobManagementApi", "flex/interactive/development/python/JobResponse", "flex/interactive/development/python/JobStatus", "flex/interactive/development/python/LongText", "flex/interactive/development/python/ModelProperty", "flex/interactive/development/python/Parameter", "flex/interactive/development/python/PrimitiveType", "flex/interactive/development/python/ProcedureManagementApi", "flex/interactive/development/python/QueryRequest", "flex/interactive/development/python/QueryServiceApi", "flex/interactive/development/python/SchemaMapping", "flex/interactive/development/python/SchemaMappingLoadingConfig", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/python/ServiceManagementApi", "flex/interactive/development/python/ServiceStatus", "flex/interactive/development/python/StartServiceRequest", "flex/interactive/development/python/StoredProcedureMeta", "flex/interactive/development/python/StringType", "flex/interactive/development/python/StringTypeString", "flex/interactive/development/python/TemporalType", "flex/interactive/development/python/TemporalTypeTemporal", "flex/interactive/development/python/TimeStampType", "flex/interactive/development/python/TypedValue", "flex/interactive/development/python/UpdateProcedureRequest", "flex/interactive/development/python/UploadFileResponse", "flex/interactive/development/python/VarChar", "flex/interactive/development/python/VarCharVarChar", "flex/interactive/development/python/VertexApi", "flex/interactive/development/python/VertexData", "flex/interactive/development/python/VertexEdgeRequest", "flex/interactive/development/python/VertexMapping", "flex/interactive/development/python/VertexRequest", "flex/interactive/development/python/VertexStatistics", "flex/interactive/development/python/VertexTypePairStatistics", "flex/interactive/development/python/python_sdk", "flex/interactive/development/restful_api", "flex/interactive/development/stored_procedure/cpp_procedure", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/stored_procedures", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/gopt", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_k8s", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_instrument.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "error_codes.md", "flex/coordinator.md", "flex/coordinator/dev_guide.md", "flex/coordinator/development/dev_and_test.md", "flex/coordinator/development/python/README.md", "flex/coordinator/development/python/docs/AlertApi.md", "flex/coordinator/development/python/docs/BaseEdgeType.md", "flex/coordinator/development/python/docs/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/coordinator/development/python/docs/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/coordinator/development/python/docs/BasePropertyMeta.md", "flex/coordinator/development/python/docs/BaseVertexType.md", "flex/coordinator/development/python/docs/BaseVertexTypeXCsrParams.md", "flex/coordinator/development/python/docs/ColumnMapping.md", "flex/coordinator/development/python/docs/ColumnMappingColumn.md", "flex/coordinator/development/python/docs/CreateAlertReceiverRequest.md", "flex/coordinator/development/python/docs/CreateAlertRuleRequest.md", "flex/coordinator/development/python/docs/CreateDataloadingJobResponse.md", "flex/coordinator/development/python/docs/CreateEdgeType.md", "flex/coordinator/development/python/docs/CreateGraphRequest.md", "flex/coordinator/development/python/docs/CreateGraphResponse.md", "flex/coordinator/development/python/docs/CreateGraphSchemaRequest.md", "flex/coordinator/development/python/docs/CreatePropertyMeta.md", "flex/coordinator/development/python/docs/CreateStoredProcRequest.md", "flex/coordinator/development/python/docs/CreateStoredProcResponse.md", "flex/coordinator/development/python/docs/CreateVertexType.md", "flex/coordinator/development/python/docs/DataSourceApi.md", "flex/coordinator/development/python/docs/DataloadingJobConfig.md", "flex/coordinator/development/python/docs/DataloadingJobConfigEdgesInner.md", "flex/coordinator/development/python/docs/DataloadingJobConfigLoadingConfig.md", "flex/coordinator/development/python/docs/DataloadingJobConfigLoadingConfigFormat.md", "flex/coordinator/development/python/docs/DataloadingJobConfigVerticesInner.md", "flex/coordinator/development/python/docs/DataloadingMRJobConfig.md", "flex/coordinator/development/python/docs/DateType.md", "flex/coordinator/development/python/docs/DeploymentApi.md", "flex/coordinator/development/python/docs/EdgeMapping.md", "flex/coordinator/development/python/docs/EdgeMappingTypeTriplet.md", "flex/coordinator/development/python/docs/Error.md", "flex/coordinator/development/python/docs/GSDataType.md", "flex/coordinator/development/python/docs/GetAlertMessageResponse.md", "flex/coordinator/development/python/docs/GetAlertReceiverResponse.md", "flex/coordinator/development/python/docs/GetAlertRuleResponse.md", "flex/coordinator/development/python/docs/GetEdgeType.md", "flex/coordinator/development/python/docs/GetGraphResponse.md", "flex/coordinator/development/python/docs/GetGraphSchemaResponse.md", "flex/coordinator/development/python/docs/GetPodLogResponse.md", "flex/coordinator/development/python/docs/GetPropertyMeta.md", "flex/coordinator/development/python/docs/GetResourceUsageResponse.md", "flex/coordinator/development/python/docs/GetStorageUsageResponse.md", "flex/coordinator/development/python/docs/GetStoredProcResponse.md", "flex/coordinator/development/python/docs/GetVertexType.md", "flex/coordinator/development/python/docs/GraphApi.md", "flex/coordinator/development/python/docs/JobApi.md", "flex/coordinator/development/python/docs/JobStatus.md", "flex/coordinator/development/python/docs/LongText.md", "flex/coordinator/development/python/docs/NodeStatus.md", "flex/coordinator/development/python/docs/Parameter.md", "flex/coordinator/development/python/docs/PodStatus.md", "flex/coordinator/development/python/docs/PrimitiveType.md", "flex/coordinator/development/python/docs/ResourceUsage.md", "flex/coordinator/development/python/docs/RunningDeploymentInfo.md", "flex/coordinator/development/python/docs/RunningDeploymentStatus.md", "flex/coordinator/development/python/docs/SchemaMapping.md", "flex/coordinator/development/python/docs/ServiceApi.md", "flex/coordinator/development/python/docs/ServiceStatus.md", "flex/coordinator/development/python/docs/ServiceStatusSdkEndpoints.md", "flex/coordinator/development/python/docs/StartServiceRequest.md", "flex/coordinator/development/python/docs/StoredProcedureApi.md", "flex/coordinator/development/python/docs/StoredProcedureMeta.md", "flex/coordinator/development/python/docs/StringType.md", "flex/coordinator/development/python/docs/StringTypeString.md", "flex/coordinator/development/python/docs/TemporalType.md", "flex/coordinator/development/python/docs/TemporalTypeTemporal.md", "flex/coordinator/development/python/docs/TimeStampType.md", "flex/coordinator/development/python/docs/UpdateAlertMessageStatusRequest.md", "flex/coordinator/development/python/docs/UpdateStoredProcRequest.md", "flex/coordinator/development/python/docs/UploadFileResponse.md", "flex/coordinator/development/python/docs/UtilsApi.md", "flex/coordinator/development/python/docs/VertexMapping.md", "flex/coordinator/development/python/python_sdk.md", "flex/coordinator/getting_started.md", "flex/coordinator/restful_api.rst", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/deployment.md", "flex/interactive/dev_guide.md", "flex/interactive/development/dev_and_test.md", "flex/interactive/development/java/APIResponseWithCode.md", "flex/interactive/development/java/BaseEdgeType.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/java/BasePropertyMeta.md", "flex/interactive/development/java/BaseVertexType.md", "flex/interactive/development/java/BaseVertexTypeXCsrParams.md", "flex/interactive/development/java/ColumnMapping.md", "flex/interactive/development/java/CreateEdgeType.md", "flex/interactive/development/java/CreateGraphRequest.md", "flex/interactive/development/java/CreateGraphResponse.md", "flex/interactive/development/java/CreateGraphSchemaRequest.md", "flex/interactive/development/java/CreateProcedureRequest.md", "flex/interactive/development/java/CreateProcedureResponse.md", "flex/interactive/development/java/CreatePropertyMeta.md", "flex/interactive/development/java/CreateVertexType.md", "flex/interactive/development/java/DateType.md", "flex/interactive/development/java/EdgeApi.md", "flex/interactive/development/java/EdgeData.md", "flex/interactive/development/java/EdgeMapping.md", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/java/EdgeMappingTypeTriplet.md", "flex/interactive/development/java/EdgeRequest.md", "flex/interactive/development/java/EdgeStatistics.md", "flex/interactive/development/java/FixedChar.md", "flex/interactive/development/java/FixedCharChar.md", "flex/interactive/development/java/GSDataType.md", "flex/interactive/development/java/GetEdgeType.md", "flex/interactive/development/java/GetGraphResponse.md", "flex/interactive/development/java/GetGraphSchemaResponse.md", "flex/interactive/development/java/GetGraphStatisticsResponse.md", "flex/interactive/development/java/GetProcedureResponse.md", "flex/interactive/development/java/GetPropertyMeta.md", "flex/interactive/development/java/GetVertexType.md", "flex/interactive/development/java/GraphManagementApi.md", "flex/interactive/development/java/JobManagementApi.md", "flex/interactive/development/java/JobResponse.md", "flex/interactive/development/java/JobStatus.md", "flex/interactive/development/java/LongText.md", "flex/interactive/development/java/Parameter.md", "flex/interactive/development/java/PrimitiveType.md", "flex/interactive/development/java/ProcedureManagementApi.md", "flex/interactive/development/java/Property.md", "flex/interactive/development/java/QueryRequest.md", "flex/interactive/development/java/QueryServiceApi.md", "flex/interactive/development/java/SchemaMapping.md", "flex/interactive/development/java/SchemaMappingLoadingConfig.md", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/java/ServiceManagementApi.md", "flex/interactive/development/java/ServiceStatus.md", "flex/interactive/development/java/StartServiceRequest.md", "flex/interactive/development/java/StoredProcedureMeta.md", "flex/interactive/development/java/StringType.md", "flex/interactive/development/java/StringTypeString.md", "flex/interactive/development/java/TemporalType.md", "flex/interactive/development/java/TemporalTypeTemporal.md", "flex/interactive/development/java/TimeStampType.md", "flex/interactive/development/java/TypedValue.md", "flex/interactive/development/java/UpdateProcedureRequest.md", "flex/interactive/development/java/UploadFileResponse.md", "flex/interactive/development/java/VarChar.md", "flex/interactive/development/java/VarCharVarChar.md", "flex/interactive/development/java/VertexApi.md", "flex/interactive/development/java/VertexData.md", "flex/interactive/development/java/VertexEdgeRequest.md", "flex/interactive/development/java/VertexMapping.md", "flex/interactive/development/java/VertexRequest.md", "flex/interactive/development/java/VertexStatistics.md", "flex/interactive/development/java/VertexTypePairStatistics.md", "flex/interactive/development/java/java_sdk.md", "flex/interactive/development/python/APIResponseWithCode.md", "flex/interactive/development/python/BaseEdgeType.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/python/BasePropertyMeta.md", "flex/interactive/development/python/BaseVertexType.md", "flex/interactive/development/python/BaseVertexTypeXCsrParams.md", "flex/interactive/development/python/ColumnMapping.md", "flex/interactive/development/python/CreateEdgeType.md", "flex/interactive/development/python/CreateGraphRequest.md", "flex/interactive/development/python/CreateGraphResponse.md", "flex/interactive/development/python/CreateGraphSchemaRequest.md", "flex/interactive/development/python/CreateProcedureRequest.md", "flex/interactive/development/python/CreateProcedureResponse.md", "flex/interactive/development/python/CreatePropertyMeta.md", "flex/interactive/development/python/CreateVertexType.md", "flex/interactive/development/python/DateType.md", "flex/interactive/development/python/EdgeApi.md", "flex/interactive/development/python/EdgeData.md", "flex/interactive/development/python/EdgeMapping.md", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/python/EdgeMappingTypeTriplet.md", "flex/interactive/development/python/EdgeRequest.md", "flex/interactive/development/python/EdgeStatistics.md", "flex/interactive/development/python/FixedChar.md", "flex/interactive/development/python/FixedCharChar.md", "flex/interactive/development/python/GSDataType.md", "flex/interactive/development/python/GetEdgeType.md", "flex/interactive/development/python/GetGraphResponse.md", "flex/interactive/development/python/GetGraphSchemaResponse.md", "flex/interactive/development/python/GetGraphStatisticsResponse.md", "flex/interactive/development/python/GetProcedureResponse.md", "flex/interactive/development/python/GetPropertyMeta.md", "flex/interactive/development/python/GetVertexType.md", "flex/interactive/development/python/GraphManagementApi.md", "flex/interactive/development/python/JobManagementApi.md", "flex/interactive/development/python/JobResponse.md", "flex/interactive/development/python/JobStatus.md", "flex/interactive/development/python/LongText.md", "flex/interactive/development/python/ModelProperty.md", "flex/interactive/development/python/Parameter.md", "flex/interactive/development/python/PrimitiveType.md", "flex/interactive/development/python/ProcedureManagementApi.md", "flex/interactive/development/python/QueryRequest.md", "flex/interactive/development/python/QueryServiceApi.md", "flex/interactive/development/python/SchemaMapping.md", "flex/interactive/development/python/SchemaMappingLoadingConfig.md", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/python/ServiceManagementApi.md", "flex/interactive/development/python/ServiceStatus.md", "flex/interactive/development/python/StartServiceRequest.md", "flex/interactive/development/python/StoredProcedureMeta.md", "flex/interactive/development/python/StringType.md", "flex/interactive/development/python/StringTypeString.md", "flex/interactive/development/python/TemporalType.md", "flex/interactive/development/python/TemporalTypeTemporal.md", "flex/interactive/development/python/TimeStampType.md", "flex/interactive/development/python/TypedValue.md", "flex/interactive/development/python/UpdateProcedureRequest.md", "flex/interactive/development/python/UploadFileResponse.md", "flex/interactive/development/python/VarChar.md", "flex/interactive/development/python/VarCharVarChar.md", "flex/interactive/development/python/VertexApi.md", "flex/interactive/development/python/VertexData.md", "flex/interactive/development/python/VertexEdgeRequest.md", "flex/interactive/development/python/VertexMapping.md", "flex/interactive/development/python/VertexRequest.md", "flex/interactive/development/python/VertexStatistics.md", "flex/interactive/development/python/VertexTypePairStatistics.md", "flex/interactive/development/python/python_sdk.md", "flex/interactive/development/restful_api.rst", "flex/interactive/development/stored_procedure/cpp_procedure.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/stored_procedures.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/gopt.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_k8s.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetworkX APIs", "Tutorial: Graph Operations with NetworkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of Analytical Engine", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to instrument", "How to Submit Pull-requests", "How to Test", "Error Codes", "Coordinator", "Development guide", "Dev and Test", "Coordinator Python SDK Reference", "graphscope.flex.rest.AlertApi", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "ColumnMappingColumn", "CreateAlertReceiverRequest", "CreateAlertRuleRequest", "CreateDataloadingJobResponse", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreatePropertyMeta", "CreateStoredProcRequest", "CreateStoredProcResponse", "CreateVertexType", "graphscope.flex.rest.DataSourceApi", "DataloadingJobConfig", "DataloadingJobConfigEdgesInner", "DataloadingJobConfigLoadingConfig", "DataloadingJobConfigLoadingConfigFormat", "DataloadingJobConfigVerticesInner", "DataloadingMRJobConfig", "DateType", "graphscope.flex.rest.DeploymentApi", "EdgeMapping", "EdgeMappingTypeTriplet", "Error", "GSDataType", "GetAlertMessageResponse", "GetAlertReceiverResponse", "GetAlertRuleResponse", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetPodLogResponse", "GetPropertyMeta", "GetResourceUsageResponse", "GetStorageUsageResponse", "GetStoredProcResponse", "GetVertexType", "graphscope.flex.rest.GraphApi", "graphscope.flex.rest.JobApi", "JobStatus", "LongText", "NodeStatus", "Parameter", "PodStatus", "PrimitiveType", "ResourceUsage", "RunningDeploymentInfo", "RunningDeploymentStatus", "SchemaMapping", "graphscope.flex.rest.ServiceApi", "ServiceStatus", "ServiceStatusSdkEndpoints", "StartServiceRequest", "graphscope.flex.rest.StoredProcedureApi", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "UpdateAlertMessageStatusRequest", "UpdateStoredProcRequest", "UploadFileResponse", "graphscope.flex.rest.UtilsApi", "VertexMapping", "FLEX Coordinator Python SDK", "Getting Started", "Coordinator RESTFul API", "Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "Deployment", "Development guide", "Dev and Test", "APIResponseWithCode", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeAPi", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphManagementApi", "JobManagementApi", "JobResponse", "JobStatus", "LongText", "Parameter", "PrimitiveType", "ProcedureManagementApi", "Property", "QueryRequest", "QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "ServiceManagementApi", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "VarChar", "VarCharVarChar", "VertexApi", "VertexData", "VertexEdgeRequest", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Java SDK Reference", "APIResponseWithCode", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeApi", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphManagementApi", "gs_interactive.AdminServiceJobManagementApi", "JobResponse", "JobStatus", "LongText", "ModelProperty", "Parameter", "PrimitiveType", "gs_interactive.AdminServiceProcedureManagementApi", "QueryRequest", "gs_interactive.QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "gs_interactive.AdminServiceServiceManagementApi", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "VarChar", "VarCharVarChar", "VertexApi", "VertexData", "VertexEdgeRequest", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Python SDK Reference", "Interactive RESTFul API", "Create c++ Stored Procedures on GraphScope Interactive", "Getting Started", "Glossary", "Installation", "Overview", "Stored Procedures", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GOpt: A Graph-Native Query Optimization Framework", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 41, 42, 43, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 123, 124, 125, 126, 127, 129, 147, 166, 167, 173, 176, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 279, 280, 282, 284, 285, 287, 293, 295, 296, 297, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 312, 313, 315, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 341, 359, 360, 361, 364, 372, 374, 375, 382, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 409, 410, 414, 415, 416, 419, 420, 422, 424, 425, 430, 433, 438, 439, 440, 441, 442, 443, 446, 449, 452, 455, 457, 458, 459, 461, 462, 464, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 546, 547, 549, 552, 553, 554, 555, 556, 557, 560, 561, 563], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 46, 67, 92, 93, 104, 108, 121, 123, 128, 147, 166, 167, 173, 176, 182, 183, 196, 221, 240, 241, 248, 250, 256, 257, 270, 280, 281, 284, 285, 287, 293, 294, 295, 296, 298, 300, 301, 304, 305, 307, 308, 312, 314, 322, 326, 329, 330, 331, 332, 333, 340, 341, 342, 343, 344, 345, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 374, 381, 383, 389, 395, 398, 399, 403, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 541, 544, 545, 546, 547, 556, 557, 560, 563, 567, 568, 569, 571, 572, 573], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 36, 37, 38, 41, 287, 306, 308, 322, 324, 326, 327, 329, 333, 335, 338, 343, 402, 540, 545, 553, 556, 557, 563], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 38, 41, 43, 45, 101, 123, 128, 281, 283, 287, 290, 293, 294, 295, 299, 302, 303, 306, 310, 314, 315, 319, 321, 322, 323, 324, 325, 327, 331, 335, 343, 359, 383, 388, 396, 402, 403, 404, 540, 546, 547, 549, 553, 554, 555, 556, 566, 567], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 34, 287, 292, 308, 309, 320, 323, 327, 328, 329, 335, 359, 403, 564, 565], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 39, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 123, 124, 125, 126, 127, 128, 129, 147, 166, 167, 173, 176, 182, 196, 203, 277, 280, 281, 282, 283, 284, 286, 287, 289, 293, 295, 297, 298, 299, 303, 304, 305, 306, 308, 309, 311, 314, 315, 316, 317, 318, 319, 321, 322, 324, 328, 329, 331, 332, 335, 402, 403, 404, 405, 540, 542, 543, 544, 545, 546, 547, 548, 552, 553, 554, 555, 556, 557, 560, 563, 564, 566, 567, 568, 571, 573, 574], "offer": [0, 2, 9, 12, 20, 34, 43, 121, 124, 125, 126, 280, 282, 283, 284, 292, 295, 297, 300, 305, 309, 310, 320, 322, 326, 327, 552], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 45, 126, 279, 283, 285, 287, 290, 294, 311, 319, 321, 322, 323, 325, 389, 396, 443, 487, 489, 540, 552, 557], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 41, 45, 124, 125, 126, 129, 203, 277, 279, 282, 283, 284, 287, 290, 293, 294, 295, 296, 297, 298, 299, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 333, 335, 339, 342, 355, 364, 366, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 402, 403, 404, 405, 419, 444, 446, 459, 460, 461, 469, 471, 488, 489, 490, 497, 499, 500, 518, 530, 532, 534, 538, 539, 540, 542, 543, 544, 546, 547, 549, 551, 552, 553, 554, 555, 557, 560], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 56, 57, 81, 82, 123, 128, 163, 185, 237, 259, 282, 283, 284, 287, 305, 306, 310, 315, 316, 320, 321, 322, 324, 325, 326, 327, 328, 330, 399, 405, 540, 547, 552, 553, 556, 557, 561], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 41, 43, 46, 124, 125, 126, 128, 277, 279, 280, 282, 283, 287, 292, 294, 297, 299, 300, 302, 304, 306, 309, 313, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 388, 390, 391, 392, 393, 394, 395, 397, 400, 403, 540, 546, 547, 549, 552, 553, 556, 567, 570, 571], "analyz": [0, 7, 13, 19, 27, 305, 320, 321, 323, 324, 326, 394, 552], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 67, 93, 118, 121, 128, 129, 280, 281, 283, 285, 287, 292, 294, 295, 299, 301, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 338, 340, 346, 347, 352, 357, 358, 362, 370, 371, 388, 390, 391, 392, 393, 394, 398, 402, 412, 418, 434, 435, 450, 467, 483, 502, 532, 540, 542, 543, 546, 547, 549, 552, 554, 555, 557, 563, 564, 566, 567, 572], "least": [0, 6, 37, 124, 306, 405, 439, 461], "effort": [0, 34, 283, 304, 328, 552], "cover": [0, 6, 15, 41, 313], "wide": [0, 11, 12, 24, 296, 308, 309, 313, 320, 321, 323, 324, 325, 327, 392, 551, 557], "rang": [0, 13, 18, 123, 125, 126, 297, 302, 304, 306, 309, 312, 313, 315, 316, 317, 318, 320, 321, 324, 327, 330, 332, 333, 346, 347, 357, 358, 362, 370, 371, 388, 393, 397, 445, 447, 449, 452, 455, 467, 473, 487, 488, 489, 490, 518, 540, 545, 552, 563, 566, 567, 571, 572], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 39, 47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 182, 196, 203, 221, 240, 241, 248, 256, 270, 277, 281, 282, 283, 287, 293, 294, 297, 298, 305, 307, 309, 310, 322, 323, 324, 325, 328, 330, 331, 333, 343, 392, 471, 495, 551, 561], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 309, 320, 321, 322, 323, 326, 330, 331, 335, 390, 398, 491, 532, 537, 541, 551, 560], "detect": [0, 6, 8, 9, 309, 320, 321, 323, 324, 326, 327, 331, 459, 463, 464, 465], "etc": [0, 6, 7, 15, 29, 290, 294, 302, 310, 313, 319, 321, 322, 325, 328, 332, 388, 391, 392, 393, 396, 407, 419, 428, 433, 434, 540, 542, 553], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 46, 47, 67, 75, 92, 93, 104, 108, 118, 123, 124, 125, 126, 127, 129, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 279, 281, 282, 283, 284, 287, 290, 293, 294, 295, 297, 299, 300, 302, 304, 305, 306, 309, 310, 311, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 335, 338, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 405, 414, 415, 416, 429, 430, 435, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 458, 459, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 479, 483, 485, 486, 487, 488, 489, 490, 491, 495, 497, 499, 501, 502, 505, 523, 532, 533, 534, 535, 536, 540, 543, 546, 547, 549, 551, 552, 553, 554, 556, 560, 561, 573], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 45, 126, 129, 173, 203, 248, 277, 279, 280, 290, 294, 297, 298, 300, 301, 302, 304, 307, 309, 310, 313, 317, 318, 319, 320, 324, 327, 330, 331, 335, 388, 390, 392, 393, 394, 396, 399, 400, 402, 403, 405, 481, 482, 486, 487, 489, 491, 492, 493, 534, 535, 543, 563], "pie": [0, 1, 3, 8, 12, 34, 306, 308, 309, 323, 335, 338, 545, 557, 567, 569], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 128, 283, 284, 308, 309, 313, 320, 322, 323, 325, 327, 328, 335, 388, 393, 394, 552, 553, 557], "model": [0, 1, 3, 8, 9, 18, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 147, 166, 173, 176, 182, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 284, 285, 290, 294, 297, 301, 302, 306, 308, 309, 312, 313, 314, 319, 320, 321, 323, 324, 327, 335, 390, 392, 394, 395, 459, 463, 467, 469, 471, 473, 479, 481, 482, 487, 488, 489, 490, 491, 495, 496, 530, 537, 547, 551, 557, 567], "highli": [0, 4, 12, 34, 301, 306, 309, 322, 323, 551], "optim": [0, 9, 12, 14, 34, 50, 53, 123, 125, 126, 129, 133, 136, 207, 210, 283, 284, 292, 294, 305, 306, 307, 309, 310, 312, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 328, 331, 388, 400, 402, 552, 554, 567], "best": [0, 16, 279, 320, 322, 324, 327, 328, 331, 540, 563], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 41, 123, 125, 129, 279, 283, 292, 294, 297, 300, 304, 306, 307, 308, 310, 320, 322, 323, 325, 326, 327, 332, 390, 394, 396, 402, 497, 502, 532, 544, 546, 549, 553, 555, 557], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 46, 121, 123, 124, 125, 126, 127, 128, 129, 173, 176, 203, 248, 250, 277, 279, 280, 281, 282, 283, 284, 287, 290, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 313, 315, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 335, 339, 341, 365, 366, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 405, 414, 415, 418, 422, 443, 446, 459, 460, 461, 468, 469, 471, 487, 488, 489, 490, 497, 501, 502, 509, 511, 513, 518, 521, 526, 527, 532, 534, 540, 543, 544, 546, 547, 549, 551, 552, 553, 554, 555, 557, 560, 561, 563], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 41, 45, 46, 50, 53, 121, 123, 125, 126, 129, 133, 136, 147, 196, 207, 210, 277, 279, 280, 281, 282, 283, 284, 285, 287, 290, 294, 295, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 340, 341, 365, 366, 375, 380, 388, 389, 390, 391, 392, 394, 396, 399, 401, 402, 403, 404, 405, 424, 425, 434, 446, 449, 453, 459, 460, 461, 467, 469, 473, 474, 476, 478, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 497, 501, 505, 518, 523, 532, 534, 537, 538, 540, 542, 543, 545, 547, 551, 552, 555, 556, 557, 560, 561, 563, 567, 573], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 41, 124, 203, 277, 282, 287, 290, 294, 297, 300, 304, 306, 315, 320, 321, 323, 325, 327, 328, 329, 340, 388, 391, 400, 445, 532, 546, 552, 553, 563], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 46, 147, 166, 167, 173, 176, 182, 196, 203, 279, 302, 305, 310, 317, 318, 319, 321, 322, 323, 324, 327, 331, 333, 388, 391, 392, 394, 405, 462, 471, 472, 479, 480, 483, 497, 498, 534, 538, 540, 552, 553, 554, 556, 567, 571], "box": [0, 322, 533], "manner": [0, 2, 17, 18, 32, 36, 283, 321, 323, 324], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 41, 42, 45, 123, 124, 126, 129, 147, 196, 279, 282, 287, 293, 294, 295, 297, 299, 300, 302, 304, 305, 306, 309, 311, 312, 315, 316, 319, 325, 328, 331, 389, 390, 394, 397, 399, 400, 402, 405, 459, 471, 486, 487, 489, 498, 518, 540, 543, 551, 552, 553, 567], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 166, 173, 176, 196, 203, 240, 248, 250, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 330, 331, 332, 333, 334, 335, 336, 339, 341, 365, 375, 377, 381, 382, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 411, 413, 415, 417, 419, 420, 421, 422, 423, 424, 425, 434, 435, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 546, 547, 549, 551, 552, 553, 554, 555, 556, 557, 560, 561, 563, 566, 567, 571, 572, 573], "full": [0, 4, 12, 16, 17, 18, 22, 34, 125, 203, 277, 302, 309, 310, 313, 320, 325, 327, 331, 388, 391, 392, 394, 450, 553, 557, 563, 572], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 131, 135, 138, 139, 141, 145, 147, 148, 149, 154, 155, 159, 160, 161, 162, 163, 165, 166, 167, 173, 175, 177, 185, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 293, 300, 302, 304, 306, 309, 315, 317, 319, 322, 325, 329, 331, 333, 352, 353, 360, 361, 375, 389, 392, 394, 402, 405, 414, 416, 419, 426, 428, 434, 435, 438, 439, 443, 445, 446, 464, 467, 469, 471, 472, 473, 474, 475, 487, 491, 494, 497, 498, 503, 505, 518, 534, 540, 541, 543, 547, 551, 553, 556, 561, 568, 571], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 43, 46, 47, 67, 75, 92, 93, 104, 108, 118, 123, 124, 126, 127, 129, 176, 203, 250, 277, 279, 280, 283, 284, 285, 287, 290, 293, 294, 296, 297, 301, 302, 306, 307, 308, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 331, 332, 335, 341, 388, 389, 390, 392, 393, 394, 396, 397, 399, 402, 403, 405, 540, 543, 546, 547, 549, 551, 553, 554, 556, 557, 560, 566], "bf": [0, 15, 17, 34, 328, 331, 563], "df": [0, 34, 551], "hit": [0, 34, 36, 331, 332, 405, 541, 546, 563], "lpa": [0, 7, 34, 321, 331, 563], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 286, 321, 328, 331, 332, 339, 546, 547, 555, 556, 563], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 46, 47, 75, 92, 93, 104, 121, 123, 124, 125, 126, 127, 129, 166, 167, 176, 182, 203, 240, 241, 248, 250, 256, 277, 279, 280, 282, 283, 284, 287, 290, 293, 294, 295, 296, 297, 299, 300, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 349, 362, 365, 380, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 402, 405, 422, 436, 437, 438, 439, 440, 441, 446, 449, 451, 452, 459, 460, 461, 463, 464, 467, 468, 469, 471, 473, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 499, 501, 518, 520, 523, 528, 532, 534, 535, 537, 538, 539, 540, 542, 544, 546, 547, 548, 549, 551, 552, 553, 557, 560, 561, 563], "find": [0, 4, 8, 9, 17, 22, 31, 32, 36, 37, 41, 45, 46, 124, 282, 287, 290, 292, 295, 297, 302, 304, 306, 315, 319, 321, 323, 324, 328, 330, 339, 387, 405, 410, 429, 430, 459, 547, 552, 553, 560], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 29, 31, 37, 38, 121, 279, 287, 289, 290, 294, 306, 323, 325], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 147, 167, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 290, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 339, 359, 360, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 407, 408, 419, 438, 440, 445, 447, 449, 452, 459, 462, 466, 467, 468, 469, 471, 474, 479, 480, 482, 483, 487, 488, 489, 490, 491, 492, 499, 506, 515, 527, 532, 534, 535, 539, 540, 542, 543, 546, 547, 551, 552, 554, 560, 563, 567, 568, 571, 573], "given": [0, 7, 9, 13, 14, 20, 34, 123, 125, 176, 203, 250, 277, 283, 285, 290, 293, 294, 295, 297, 304, 305, 306, 313, 319, 321, 324, 325, 327, 331, 392, 394, 397, 400, 402, 404, 439, 446, 457, 469, 470, 471, 472, 473, 474, 475, 483, 491, 492, 493, 497, 498, 499, 500, 504, 532, 535, 536, 539, 540, 546, 547, 551, 552, 555, 556], "weight": [0, 7, 19, 20, 33, 45, 124, 125, 147, 166, 203, 221, 240, 248, 277, 286, 304, 306, 313, 321, 323, 328, 331, 360, 388, 390, 391, 392, 393, 394, 397, 400, 402, 405, 407, 408, 409, 413, 424, 425, 467, 479, 483, 487, 490, 530, 538, 539, 540, 542, 547, 572], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 121, 280, 283, 287, 294, 296, 297, 300, 306, 312, 313, 320, 324, 388, 390, 396, 397, 398, 469, 551, 552], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 129, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 279, 283, 284, 290, 294, 295, 296, 297, 299, 304, 305, 306, 309, 313, 320, 321, 323, 324, 325, 330, 331, 332, 340, 346, 347, 356, 362, 364, 366, 367, 370, 371, 388, 391, 392, 394, 396, 397, 399, 402, 403, 405, 469, 471, 474, 493, 540, 551, 553, 555, 563, 567], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 281, 283, 294, 295, 297, 304, 306, 309, 310, 313, 321, 322, 323, 324, 325, 326, 327, 330, 331, 333, 392, 393, 396, 398, 405, 486, 489, 490, 494, 499, 508, 531, 532, 544, 547, 553, 554, 563], "minimum": [0, 6, 287, 295, 297, 300, 304, 306, 331, 459, 547], "distanc": [0, 7, 15, 17, 18, 321, 331, 405, 440, 479, 483, 487, 488, 489, 490, 491, 509, 521, 563], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 45, 47, 75, 92, 93, 104, 123, 124, 129, 167, 176, 182, 203, 240, 241, 250, 256, 277, 279, 293, 294, 296, 302, 304, 305, 306, 319, 320, 321, 323, 324, 327, 329, 330, 332, 341, 348, 392, 403, 404, 405, 416, 420, 435, 459, 464, 466, 469, 471, 487, 489, 491, 540, 543, 546, 552, 560], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 46, 67, 92, 124, 126, 129, 147, 150, 151, 196, 203, 221, 224, 225, 270, 277, 279, 286, 293, 300, 302, 304, 308, 309, 310, 313, 320, 321, 322, 323, 324, 325, 328, 330, 331, 332, 333, 338, 359, 389, 390, 391, 392, 393, 394, 397, 400, 402, 404, 405, 479, 484, 501, 502, 518, 543, 545, 549, 551, 553, 554, 557, 563, 568], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 125, 126, 127, 128, 285, 287, 290, 294, 297, 302, 304, 306, 309, 310, 313, 315, 320, 322, 323, 324, 325, 326, 327, 331, 333, 388, 390, 392, 394, 398, 401, 402, 403, 405, 409, 440, 442, 446, 449, 459, 468, 474, 480, 489, 490, 532, 540, 542, 543, 546, 547, 551, 552, 556], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 45, 68, 124, 125, 126, 166, 240, 279, 283, 286, 293, 294, 296, 297, 300, 302, 304, 310, 313, 320, 321, 323, 324, 325, 330, 331, 332, 333, 361, 389, 390, 391, 392, 393, 394, 397, 400, 402, 463, 474, 484, 486, 501, 502, 513, 515, 526, 527, 533, 546, 547, 549, 551, 552, 553, 554, 563, 567, 568], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 29, 30, 33, 34, 37, 41, 43, 44, 45, 121, 124, 126, 127, 128, 129, 173, 176, 250, 279, 280, 281, 282, 283, 284, 285, 287, 293, 295, 296, 300, 302, 304, 306, 310, 311, 313, 323, 324, 325, 327, 331, 350, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 405, 438, 439, 450, 459, 460, 461, 462, 463, 464, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 539, 540, 553, 557, 571], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 293, 294, 302, 305, 306, 310, 313, 319, 320, 323, 327, 331, 388, 389, 390, 391, 394, 397, 402, 532, 540], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 282, 287, 290, 304, 308, 313, 320, 322, 323, 327, 328, 331, 333, 391, 405, 427, 428, 434, 486, 540, 549, 557], "dissimilar": 0, "measur": [0, 6, 20, 294, 323, 325, 331, 389, 405, 483, 484, 517], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 126, 127, 284, 294, 300, 302, 304, 306, 310, 319, 323, 324, 328, 389, 390, 394, 395, 398, 400, 402, 404, 405, 433, 434, 455, 463, 464, 469, 471, 497, 498, 500, 533, 534, 540, 547, 551, 552, 553, 554, 555], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 45, 124, 125, 126, 147, 166, 196, 203, 221, 240, 248, 270, 277, 285, 286, 295, 297, 299, 307, 321, 323, 324, 325, 330, 331, 332, 333, 350, 364, 378, 379, 380, 391, 394, 402, 403, 487, 502, 532, 537, 540, 543, 546, 547, 549, 553, 554, 561, 567, 568, 571], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 41, 123, 124, 125, 126, 166, 203, 240, 277, 293, 294, 297, 302, 304, 305, 306, 310, 312, 313, 315, 316, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 379, 388, 389, 390, 391, 392, 393, 394, 398, 399, 400, 402, 405, 414, 416, 434, 435, 440, 444, 446, 451, 457, 459, 461, 462, 463, 465, 466, 468, 469, 471, 472, 474, 479, 482, 484, 487, 488, 489, 490, 491, 494, 495, 497, 499, 500, 505, 508, 520, 525, 530, 534, 536, 537, 538, 540, 546, 547, 549, 551, 552, 553, 554, 557, 561], "attribute_assort": [0, 34], "nearest": [0, 331], "neighbor": [0, 6, 9, 13, 14, 17, 18, 286, 304, 306, 310, 313, 317, 323, 324, 325, 331, 333, 388, 389, 391, 392, 394, 396, 397, 398, 400, 401, 405, 410, 411, 430, 482, 483, 497, 500, 533, 540, 549, 552, 563], "return": [0, 6, 9, 15, 18, 20, 90, 109, 163, 185, 203, 237, 259, 277, 279, 280, 284, 286, 294, 296, 297, 298, 299, 300, 304, 305, 306, 313, 315, 317, 318, 321, 324, 331, 332, 333, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 381, 382, 383, 387, 388, 390, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 404, 405, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 546, 547, 549, 552, 563, 572], "success": [0, 13, 22, 47, 67, 92, 93, 108, 118, 124, 166, 167, 169, 173, 182, 203, 240, 241, 248, 256, 277, 335, 390, 474, 505], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 45, 46, 121, 123, 124, 125, 129, 147, 166, 203, 240, 277, 279, 280, 282, 284, 287, 290, 293, 295, 296, 297, 301, 304, 306, 310, 312, 313, 315, 316, 317, 318, 319, 321, 328, 330, 331, 332, 333, 347, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 405, 407, 408, 409, 411, 415, 416, 419, 420, 424, 434, 438, 439, 441, 442, 443, 444, 446, 449, 451, 452, 454, 455, 456, 458, 459, 462, 463, 464, 465, 467, 468, 469, 471, 472, 475, 478, 480, 487, 488, 489, 490, 491, 497, 498, 502, 505, 518, 523, 532, 534, 535, 540, 542, 543, 547, 549, 552, 553, 554, 555, 561, 563, 565, 566, 567, 568, 570, 571, 572, 573], "1": [0, 4, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 45, 46, 121, 123, 125, 126, 129, 147, 166, 173, 176, 182, 196, 203, 221, 240, 250, 270, 277, 279, 280, 282, 284, 285, 290, 293, 294, 295, 296, 297, 301, 302, 304, 306, 310, 312, 313, 315, 316, 317, 318, 319, 321, 324, 325, 328, 331, 332, 388, 391, 393, 394, 395, 397, 402, 403, 404, 405, 407, 408, 409, 411, 415, 416, 419, 424, 425, 428, 433, 434, 438, 440, 441, 442, 443, 444, 446, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 547, 552, 553, 554, 555, 561, 563, 567, 568, 570, 571, 572, 573], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 45, 125, 126, 129, 147, 166, 167, 176, 203, 221, 240, 277, 285, 293, 294, 295, 296, 297, 301, 304, 306, 310, 312, 313, 315, 316, 317, 318, 319, 321, 324, 325, 328, 331, 332, 388, 391, 392, 393, 394, 395, 397, 402, 405, 407, 408, 409, 411, 419, 420, 424, 425, 428, 433, 434, 441, 442, 443, 446, 451, 452, 457, 459, 461, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 507, 509, 511, 512, 513, 517, 518, 520, 522, 523, 525, 532, 533, 534, 535, 540, 542, 543, 547, 551, 552, 554, 555, 563, 564, 565, 567, 568, 571, 572, 573], "average_degree_connect": [0, 331, 563], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 45, 46, 90, 109, 123, 163, 181, 185, 203, 237, 255, 259, 277, 279, 281, 283, 284, 287, 294, 297, 300, 304, 305, 306, 313, 318, 321, 325, 330, 331, 332, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 353, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 380, 387, 389, 390, 392, 394, 397, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 420, 422, 423, 424, 425, 429, 430, 434, 435, 438, 440, 442, 443, 445, 446, 447, 449, 450, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 547, 551, 552, 553, 560], "str": [0, 20, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 119, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 261, 263, 264, 266, 267, 270, 271, 273, 274, 275, 276, 277, 315, 316, 317, 319, 331, 332, 333, 339, 340, 346, 347, 348, 350, 357, 358, 359, 362, 364, 365, 366, 367, 370, 371, 400, 402, 403, 418, 420, 534, 540, 542, 546, 547, 553, 568, 573], "target": [0, 6, 17, 22, 24, 80, 203, 295, 304, 310, 311, 320, 321, 325, 327, 331, 333, 394, 396, 402, 405, 476, 478, 497, 500, 532, 553, 563], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 46, 123, 125, 126, 128, 129, 279, 283, 290, 293, 294, 295, 297, 299, 302, 304, 306, 309, 313, 320, 321, 322, 323, 324, 325, 328, 330, 331, 332, 354, 360, 388, 390, 392, 394, 395, 396, 405, 476, 515, 530, 540, 552, 553, 557, 563, 572], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 45, 203, 221, 270, 286, 290, 296, 300, 302, 305, 306, 313, 321, 324, 325, 330, 331, 332, 333, 388, 391, 392, 393, 394, 397, 400, 402, 403, 404, 405, 411, 434, 459, 462, 467, 469, 473, 479, 482, 487, 490, 497, 500, 502, 534, 540, 546, 547, 551, 552, 553, 563, 567, 571, 572], "sum": [0, 20, 300, 302, 317, 323, 331, 333, 405, 459, 464, 467, 469, 470, 471, 480, 487, 490, 491, 498, 499, 538, 540, 571], "fraction": [0, 331, 405, 459], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 123, 283, 294, 296, 297, 299, 304, 306, 313, 319, 324, 325, 331, 333, 338, 394, 398, 400, 449, 487, 489, 532, 540, 544, 553, 563, 568, 573], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 43, 121, 124, 280, 282, 292, 293, 294, 296, 297, 298, 299, 301, 304, 305, 306, 307, 310, 313, 319, 321, 323, 324, 325, 327, 332, 335, 389, 390, 392, 393, 394, 399, 400, 402, 405, 435, 449, 466, 505, 540, 551, 552, 553], "betweenness_centr": [0, 34, 405], "normal": [0, 6, 27, 287, 306, 331, 394, 402, 405, 462, 552], "endpoint": [0, 9, 10, 27, 28, 29, 44, 45, 47, 75, 92, 93, 104, 121, 129, 167, 182, 196, 203, 240, 241, 256, 270, 277, 280, 282, 283, 293, 295, 297, 298, 301, 304, 305, 315, 319, 321, 330, 394, 403, 405, 547, 549, 553, 560, 563, 571, 573], "bool": [0, 6, 14, 15, 20, 48, 51, 56, 57, 59, 63, 75, 81, 82, 83, 87, 90, 93, 158, 172, 207, 237, 255, 257, 259, 279, 286, 300, 319, 330, 331, 333, 377, 385, 402, 405, 412, 422, 424, 425, 434, 463, 473, 479, 483, 499, 540, 542, 547, 552, 573], "whether": [0, 37, 125, 129, 293, 294, 304, 306, 319, 320, 324, 330, 331, 389, 390, 394, 402, 462, 464, 467, 487, 498, 499, 540, 551, 552, 553, 554], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 123, 125, 129, 279, 293, 294, 296, 299, 302, 304, 306, 319, 320, 321, 325, 330, 331, 339, 342, 355, 364, 398, 399, 402, 404, 405, 435, 459, 487, 488, 489, 490, 540, 542, 547, 549, 552, 553, 554, 555], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 43, 45, 125, 126, 129, 166, 167, 240, 241, 279, 283, 290, 292, 294, 295, 297, 300, 301, 306, 309, 310, 311, 312, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 390, 391, 394, 396, 402, 405, 420, 459, 467, 473, 483, 532, 539, 540, 551, 552, 553, 560, 561], "count": [0, 6, 33, 173, 201, 202, 203, 248, 275, 276, 277, 279, 294, 296, 297, 300, 302, 305, 306, 313, 321, 323, 330, 331, 392, 393, 397, 398, 401, 405, 415, 473, 540, 553, 567, 571], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 176, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 283, 285, 287, 290, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 335, 339, 342, 343, 344, 345, 346, 347, 349, 350, 352, 355, 357, 358, 359, 360, 361, 362, 365, 366, 367, 370, 371, 372, 374, 375, 383, 388, 389, 390, 392, 393, 394, 396, 397, 399, 400, 402, 404, 405, 416, 417, 422, 427, 428, 434, 435, 437, 438, 439, 441, 444, 445, 446, 447, 449, 450, 452, 454, 455, 458, 460, 461, 469, 471, 472, 473, 475, 476, 479, 480, 481, 482, 486, 487, 488, 489, 490, 491, 496, 497, 498, 499, 500, 501, 505, 507, 513, 518, 522, 525, 526, 530, 532, 533, 534, 535, 537, 538, 540, 543, 544, 546, 547, 549, 551, 552, 553, 554, 555, 556, 557, 560], "travers": [0, 6, 13, 15, 17, 283, 293, 294, 300, 302, 305, 310, 320, 321, 322, 323, 388, 391, 394, 396, 400, 403, 534, 540, 549, 552, 553, 554, 563, 571], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 36, 37, 41, 43, 125, 126, 283, 284, 287, 290, 293, 294, 296, 297, 299, 300, 302, 304, 305, 306, 309, 310, 316, 319, 321, 322, 323, 324, 325, 326, 327, 330, 331, 335, 381, 388, 389, 390, 394, 396, 398, 402, 403, 405, 409, 464, 468, 492, 493, 497, 500, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 521, 524, 526, 527, 532, 540, 547, 551, 552, 553, 554, 560, 561], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 39, 43, 44, 45, 104, 126, 127, 128, 176, 182, 256, 282, 283, 285, 292, 293, 298, 299, 300, 304, 305, 313, 315, 317, 318, 319, 324, 326, 329, 330, 332, 388, 392, 394, 403, 404, 405, 440, 465, 469, 471, 472, 475, 491, 505, 534, 542, 547, 552, 553, 557, 570], "root": [0, 4, 27, 32, 36, 46, 287, 319, 322, 440, 442, 533, 534, 551], "explor": [0, 17, 43, 125, 282, 285, 290, 295, 297, 304, 306, 320, 321, 324, 552], "present": [0, 2, 20, 27, 125, 304, 306, 313, 314, 315, 316, 317, 318, 320, 321, 323, 335, 405, 416, 459, 540, 551, 552], "prior": [0, 12, 34, 297, 304, 306, 309, 320], "move": [0, 4, 6, 283, 299, 322, 394, 497, 500], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 305, 306, 310, 313, 314, 319, 320, 325, 388, 389, 392, 394, 396, 398, 399, 400, 466, 534, 546, 549, 552, 553, 555], "level": [0, 6, 12, 38, 123, 176, 250, 290, 294, 297, 320, 322, 325, 331, 396, 450, 497, 498, 537, 552, 553], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 47, 53, 55, 57, 78, 82, 83, 87, 91, 98, 123, 204, 210, 226, 229, 231, 233, 234, 236, 237, 238, 239, 243, 255, 257, 269, 275, 276, 279, 286, 302, 315, 317, 319, 330, 331, 332, 333, 365, 389, 390, 391, 392, 393, 394, 397, 400, 401, 402, 404, 405, 433, 438, 440, 442, 445, 447, 449, 450, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 475, 476, 477, 478, 479, 481, 482, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 501, 502, 503, 504, 535, 540, 542, 547, 549, 553, 563, 571, 573], "evalu": [0, 6, 14, 15, 16, 18, 37, 297, 309, 321, 322, 325, 328, 330, 331, 332, 343, 366, 375, 377, 381, 383, 402, 547, 557, 571], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 45, 124, 126, 128, 129, 203, 277, 279, 281, 282, 283, 284, 287, 290, 293, 294, 297, 299, 302, 304, 306, 309, 312, 314, 315, 320, 321, 322, 323, 325, 327, 328, 330, 331, 333, 335, 388, 389, 390, 392, 395, 396, 397, 400, 402, 403, 405, 440, 459, 484, 486, 487, 491, 510, 515, 520, 532, 534, 538, 540, 543, 546, 547, 549, 551, 552, 553, 556, 557, 563], "known": [0, 6, 8, 9, 24, 32, 293, 296, 299, 300, 306, 323, 324, 331, 422, 440, 443, 492, 493, 510, 534, 555], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 42, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 121, 125, 129, 147, 167, 196, 280, 282, 283, 284, 287, 293, 296, 299, 302, 305, 306, 309, 319, 326, 331, 332, 335, 381, 383, 389, 390, 392, 397, 400, 402, 438, 448, 453, 459, 462, 463, 464, 465, 467, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 490, 491, 494, 495, 496, 497, 500, 505, 532, 535, 537, 540, 542, 546, 547, 551, 552, 553, 556], "max_round": [0, 331, 551, 563], "10": [0, 13, 15, 16, 17, 20, 27, 31, 123, 126, 129, 280, 287, 289, 290, 294, 298, 302, 304, 306, 312, 313, 315, 316, 317, 318, 321, 328, 331, 389, 390, 391, 393, 394, 400, 402, 405, 407, 408, 409, 443, 449, 459, 462, 464, 473, 474, 475, 476, 478, 482, 487, 491, 495, 511, 517, 522, 535, 540, 547, 551, 553, 561, 563, 567, 571], "maximum": [0, 123, 126, 293, 300, 304, 306, 323, 331, 391, 405, 459, 475, 490, 491, 492, 493, 498, 539, 553], "round": [0, 9, 14, 17, 24, 331, 333, 457, 467], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 41, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 123, 125, 126, 127, 129, 147, 196, 203, 277, 279, 280, 282, 283, 284, 287, 290, 293, 295, 296, 297, 302, 304, 306, 312, 315, 317, 319, 328, 330, 331, 332, 333, 350, 359, 381, 382, 385, 389, 390, 394, 401, 402, 404, 405, 407, 408, 409, 412, 434, 436, 437, 440, 442, 443, 445, 447, 449, 450, 452, 454, 455, 458, 459, 462, 463, 464, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 532, 533, 535, 537, 538, 540, 542, 543, 547, 549, 551, 553, 560, 561, 573], "origin": [0, 4, 6, 9, 12, 13, 22, 124, 294, 297, 302, 304, 310, 315, 316, 325, 330, 332, 359, 388, 390, 402, 403, 459, 481, 487, 526, 534, 538, 540, 546, 547, 553, 554], "reciproc": [0, 405], "n": [0, 19, 20, 30, 33, 38, 46, 47, 67, 75, 92, 93, 104, 108, 118, 123, 125, 166, 203, 248, 277, 280, 294, 296, 298, 300, 304, 306, 309, 313, 321, 325, 328, 331, 332, 392, 394, 397, 399, 405, 415, 419, 420, 422, 426, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 462, 463, 468, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 502, 505, 518, 533, 534, 535, 537, 540], "reachabl": [0, 405], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 98, 102, 126, 287, 290, 297, 300, 301, 304, 312, 313, 314, 320, 321, 323, 325, 327, 329, 331, 332, 333, 353, 356, 361, 364, 365, 383, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 426, 428, 430, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 552, 554, 563, 566, 567, 572], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 309, 320, 322, 323, 325, 327, 392, 398, 549, 552], "improv": [0, 6, 9, 17, 19, 23, 283, 302, 322, 325, 326, 327, 556], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 41, 45, 46, 121, 126, 127, 203, 279, 280, 282, 283, 284, 285, 287, 290, 294, 295, 296, 297, 299, 302, 304, 306, 309, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 335, 388, 389, 392, 393, 394, 398, 399, 402, 405, 438, 479, 486, 487, 501, 502, 534, 540, 542, 547, 551, 552, 553, 556, 557, 560], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 125, 283, 287, 293, 294, 297, 300, 304, 306, 308, 313, 319, 320, 323, 324, 326, 327, 331, 390, 392, 394, 401, 405, 415, 449, 457, 459, 461, 466, 468, 479, 481, 490, 547, 552, 553, 556, 557], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 41, 124, 126, 176, 203, 250, 277, 279, 283, 287, 290, 292, 293, 294, 297, 300, 302, 304, 306, 310, 313, 319, 321, 324, 325, 327, 330, 331, 333, 339, 340, 380, 388, 389, 390, 391, 392, 394, 398, 402, 405, 414, 438, 439, 442, 443, 446, 455, 456, 459, 468, 469, 474, 476, 477, 478, 479, 480, 482, 497, 500, 508, 511, 515, 518, 524, 525, 526, 532, 534, 536, 540, 546, 547, 549, 551, 552, 553, 556, 567, 571], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 41, 75, 126, 129, 287, 296, 297, 320, 322, 323, 324, 330, 331, 405, 473, 487, 546, 552, 553], "ratio": [0, 13, 306, 532], "actor": [0, 129, 306, 320, 517], "group": [0, 2, 283, 287, 294, 317, 319, 321, 323, 324, 330, 396, 402, 463, 464, 465, 467, 484, 512, 530, 551, 553, 571, 573], "who": [0, 11, 29, 283, 297, 306, 320, 324, 395, 400, 553], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 44, 45, 121, 125, 126, 127, 129, 147, 167, 196, 279, 280, 283, 284, 287, 289, 290, 292, 293, 295, 297, 299, 303, 304, 305, 306, 307, 308, 314, 315, 316, 317, 318, 320, 321, 323, 324, 325, 327, 329, 332, 335, 343, 389, 390, 394, 396, 547, 548, 551, 552, 553, 554, 556, 557, 567], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 123, 124, 125, 203, 277, 283, 290, 297, 299, 302, 304, 306, 310, 312, 313, 316, 319, 320, 321, 323, 324, 325, 331, 332, 333, 380, 388, 390, 394, 398, 400, 402, 405, 447, 450, 457, 459, 479, 484, 497, 500, 508, 527, 537, 547, 552, 553, 555], "being": [0, 126, 129, 297, 302, 313, 324, 402, 439, 469, 549, 552, 553, 554], "cliqu": [0, 6, 297, 306, 320, 323, 460, 461, 465, 466, 468, 482], "complet": [0, 14, 31, 33, 34, 127, 277, 294, 297, 299, 302, 306, 319, 322, 388, 390, 394, 415, 440, 441, 443, 445, 446, 452, 457, 466, 497, 500, 524, 540, 553], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 45, 121, 124, 126, 127, 129, 203, 277, 279, 280, 282, 284, 287, 290, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 306, 308, 309, 311, 313, 319, 320, 321, 323, 324, 325, 327, 331, 332, 335, 339, 388, 389, 390, 391, 392, 394, 395, 397, 398, 400, 402, 405, 415, 419, 422, 434, 440, 445, 450, 459, 469, 470, 471, 473, 479, 482, 497, 498, 500, 516, 520, 534, 540, 546, 547, 551, 552, 553, 555, 557, 560, 561, 567], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 45, 46, 67, 68, 77, 92, 124, 126, 147, 153, 166, 203, 221, 227, 240, 277, 283, 286, 293, 294, 297, 299, 300, 302, 304, 310, 312, 313, 315, 316, 317, 318, 320, 321, 323, 324, 325, 327, 330, 331, 332, 333, 344, 345, 348, 353, 360, 364, 365, 383, 388, 389, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 403, 404, 405, 407, 408, 409, 412, 415, 416, 418, 419, 420, 422, 424, 425, 428, 429, 431, 433, 434, 435, 439, 441, 442, 443, 444, 445, 446, 449, 451, 452, 453, 456, 457, 459, 461, 464, 465, 467, 469, 470, 471, 473, 475, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 530, 534, 537, 538, 539, 540, 541, 543, 546, 547, 549, 551, 553, 554, 555, 563, 567, 568, 572], "u": [0, 6, 14, 16, 18, 20, 37, 279, 286, 287, 302, 306, 319, 321, 331, 394, 398, 400, 402, 405, 411, 434, 446, 459, 473, 479, 482, 487, 490, 502, 540, 552, 560, 563, 573], "equal": [0, 10, 147, 196, 287, 300, 304, 306, 312, 316, 319, 321, 405, 457, 459, 490, 495, 533, 567], "degree_assortativity_coeffici": [0, 331, 563], "hold": [0, 10, 20, 304, 330, 331, 332, 333, 359, 367, 390, 402, 405, 540, 546], "numer": [0, 20, 45, 129, 297, 300, 304, 320, 322, 323, 331, 332, 405, 540, 546, 552], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 123, 125, 126, 132, 133, 142, 147, 158, 160, 163, 169, 172, 174, 176, 178, 179, 185, 191, 196, 197, 221, 245, 250, 265, 270, 271, 284, 286, 287, 293, 294, 296, 297, 300, 310, 315, 317, 319, 323, 325, 330, 331, 332, 333, 366, 375, 387, 388, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 404, 405, 414, 434, 449, 459, 487, 488, 489, 490, 497, 499, 500, 532, 533, 534, 540, 542, 543, 546, 547, 549, 551, 552, 553, 554, 563, 571, 572, 573], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 46, 121, 125, 126, 129, 176, 203, 250, 277, 279, 280, 282, 284, 287, 293, 295, 296, 297, 299, 304, 306, 312, 319, 321, 327, 331, 332, 335, 387, 389, 390, 394, 395, 398, 399, 401, 402, 403, 404, 405, 410, 411, 413, 420, 424, 425, 434, 435, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 454, 455, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 500, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 532, 535, 536, 538, 540, 542, 543, 546, 547, 549, 552, 553, 554, 560, 561], "fals": [0, 13, 15, 17, 18, 19, 20, 125, 129, 279, 293, 299, 304, 317, 318, 319, 330, 331, 333, 381, 388, 389, 390, 394, 400, 402, 404, 405, 418, 422, 424, 425, 434, 436, 437, 462, 463, 464, 467, 473, 483, 498, 540, 543, 547, 551, 553, 563, 572], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 41, 126, 203, 277, 279, 283, 284, 287, 290, 294, 295, 296, 297, 299, 300, 302, 303, 306, 310, 313, 314, 315, 319, 320, 321, 322, 324, 325, 326, 327, 330, 331, 332, 333, 335, 380, 388, 389, 390, 391, 392, 394, 397, 398, 399, 400, 402, 403, 405, 422, 424, 425, 428, 433, 434, 440, 455, 457, 459, 470, 474, 479, 487, 488, 489, 490, 491, 497, 500, 506, 507, 511, 512, 516, 522, 524, 527, 530, 532, 534, 538, 540, 544, 546, 547, 553, 555, 557, 567, 568, 571], "adjac": [0, 10, 16, 20, 24, 304, 306, 325, 331, 391, 396, 405, 428, 461, 485, 503, 518, 532, 533, 540, 541, 552], "direct": [0, 9, 10, 15, 48, 59, 83, 124, 126, 293, 297, 306, 310, 313, 316, 319, 321, 322, 325, 330, 331, 351, 381, 388, 390, 394, 397, 400, 402, 405, 410, 415, 421, 436, 447, 460, 461, 462, 463, 464, 467, 471, 472, 474, 483, 484, 485, 486, 497, 498, 507, 534, 538, 540, 541, 543, 547, 551, 552, 554, 568, 572, 573], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 41, 124, 126, 297, 306, 319, 320, 322, 327, 328, 335, 389, 392, 393, 394, 397, 398, 399, 400, 405, 434, 439, 446, 522, 527, 536, 540, 553, 557], "separ": [0, 6, 17, 30, 36, 47, 293, 295, 306, 320, 327, 389, 390, 487, 542, 552, 553], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 42, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 124, 125, 126, 128, 129, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 283, 285, 287, 293, 297, 299, 300, 302, 304, 306, 309, 312, 315, 319, 320, 321, 322, 324, 330, 331, 335, 350, 388, 389, 392, 394, 397, 399, 400, 405, 442, 464, 466, 489, 546, 547, 551, 552, 553, 567], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 284, 287, 293, 294, 295, 297, 299, 300, 302, 304, 306, 317, 318, 319, 320, 322, 324, 330, 331, 332, 333, 339, 375, 389, 391, 394, 396, 398, 400, 402, 403, 405, 424, 425, 439, 506, 513, 518, 530, 536, 540, 542, 543, 546, 547, 551, 552, 553, 561, 563, 564, 566, 571, 573], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 125, 126, 127, 129, 173, 203, 277, 280, 293, 296, 297, 302, 310, 316, 319, 320, 321, 322, 323, 324, 325, 331, 333, 388, 389, 390, 402, 403, 404, 419, 428, 433, 434, 439, 459, 483, 486, 491, 497, 500, 547, 549, 551, 552, 553, 555, 556, 570, 571], "degree_centr": [0, 34, 290, 331, 405, 541, 563], "centrality_typ": [0, 331], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 284, 293, 294, 304, 308, 310, 320, 321, 323, 327, 482, 489, 505, 532, 549, 552, 553, 555, 557], "far": [0, 124, 320, 389], "possibl": [0, 4, 6, 15, 125, 283, 285, 287, 294, 310, 324, 325, 331, 390, 396, 397, 405, 473, 481, 482, 497, 498, 499, 500, 532, 536, 552], "along": [0, 6, 10, 20, 24, 31, 302, 304, 310, 333, 390, 394, 400, 534, 540, 553, 554], "branch": [0, 4, 129, 300, 306, 394, 440, 450, 571], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 121, 123, 124, 126, 129, 277, 279, 280, 284, 297, 299, 304, 306, 313, 315, 330, 331, 335, 388, 394, 401, 440, 442, 443, 445, 447, 450, 452, 454, 455, 458, 469, 471, 472, 474, 476, 477, 478, 484, 485, 486, 492, 493, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 535, 542, 547, 549, 552, 553, 555], "backtrack": 0, "influenc": [0, 27, 297, 405], "relationship": [0, 126, 129, 283, 287, 294, 297, 300, 301, 306, 310, 313, 320, 323, 324, 325, 389, 390, 400, 552, 553], "high": [0, 6, 9, 283, 285, 290, 294, 297, 306, 319, 322, 323, 325, 326, 327, 328, 396, 474, 505, 547, 549], "score": [0, 306, 325], "contribut": [0, 4, 292, 552], "low": [0, 6, 7, 13, 32, 294, 297, 312, 320, 321, 325, 326, 327, 532, 553], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 47, 123, 125, 126, 129, 248, 279, 281, 285, 290, 295, 298, 300, 305, 306, 310, 312, 319, 320, 322, 323, 324, 325, 328, 330, 331, 332, 333, 340, 341, 343, 344, 345, 348, 351, 353, 360, 361, 365, 366, 375, 392, 393, 394, 397, 399, 402, 403, 404, 405, 407, 408, 409, 411, 412, 414, 416, 418, 419, 420, 422, 423, 424, 425, 428, 433, 434, 435, 438, 439, 440, 442, 443, 445, 449, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 475, 479, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 506, 508, 517, 528, 532, 533, 534, 535, 537, 538, 540, 542, 547, 551, 552, 553, 554, 555], "mean": [0, 2, 20, 29, 30, 36, 37, 45, 123, 124, 125, 126, 127, 176, 203, 250, 277, 283, 293, 294, 302, 315, 330, 332, 338, 377, 390, 393, 394, 404, 405, 445, 462, 469, 479, 488, 489, 490, 540, 543, 546, 547, 549, 551, 552, 553, 555, 560], "themselv": [0, 294, 306, 310, 534], "eigenvector_centr": [0, 34, 331, 405, 541, 563], "toler": [0, 297, 331, 405, 459], "doubl": [0, 9, 14, 16, 18, 33, 125, 147, 158, 172, 286, 300, 302, 304, 319, 328, 333, 389, 399, 510, 534, 551, 555, 563, 571, 573], "error": [0, 2, 32, 36, 37, 38, 46, 47, 67, 75, 81, 92, 93, 104, 108, 118, 123, 128, 147, 166, 173, 176, 182, 196, 221, 240, 248, 250, 256, 270, 287, 292, 294, 296, 297, 330, 331, 394, 398, 405, 439, 540, 553], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 43, 124, 125, 279, 285, 287, 293, 294, 297, 299, 304, 306, 313, 315, 323, 324, 331, 398, 402, 405, 498, 499, 540, 547, 552, 553, 561, 566, 567], "converg": [0, 6, 9, 14, 17, 24, 325, 328, 331, 405], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 45, 121, 123, 125, 126, 166, 240, 279, 280, 290, 293, 295, 296, 303, 304, 306, 310, 314, 315, 317, 321, 323, 325, 328, 330, 331, 333, 390, 391, 392, 393, 394, 397, 401, 405, 415, 420, 422, 431, 432, 433, 438, 439, 441, 443, 446, 450, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 513, 518, 523, 530, 532, 533, 535, 537, 538, 539, 540, 547, 549, 552, 553, 554, 561, 567, 571], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 304, 305, 310, 312, 313, 315, 316, 319, 320, 321, 322, 323, 325, 326, 331, 333, 388, 391, 400, 404, 405, 407, 408, 409, 410, 411, 416, 427, 428, 429, 430, 434, 435, 445, 446, 447, 449, 452, 454, 455, 458, 459, 487, 488, 489, 490, 491, 497, 500, 502, 534, 540, 563, 567, 572], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 128, 129, 147, 166, 167, 173, 176, 182, 196, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 284, 285, 290, 292, 294, 296, 298, 299, 304, 305, 306, 308, 310, 312, 313, 315, 316, 318, 319, 321, 323, 325, 331, 332, 381, 383, 388, 389, 390, 392, 395, 397, 399, 400, 401, 402, 405, 459, 487, 488, 489, 490, 540, 547, 551, 555, 557, 561, 563, 564, 565, 567, 568, 571, 572, 573], "rate": [0, 124, 283, 285, 320, 326, 331, 487, 489, 490], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 126, 129, 279, 283, 287, 290, 293, 294, 297, 299, 300, 302, 304, 306, 310, 311, 319, 321, 323, 324, 325, 327, 328, 388, 389, 390, 391, 392, 394, 396, 398, 400, 402, 405, 411, 434, 441, 442, 444, 446, 447, 451, 468, 479, 480, 487, 488, 489, 490, 491, 495, 497, 500, 501, 506, 507, 515, 533, 534, 539, 540, 551, 552, 553, 560, 567], "hub": [0, 29, 331, 332, 405, 458, 546], "author": [0, 27, 44, 128, 316, 321, 331, 405, 459, 547, 567], "estim": [0, 294, 297, 306, 323, 324, 400, 405], "within": [0, 13, 30, 36, 123, 125, 126, 129, 283, 284, 285, 297, 299, 300, 302, 304, 305, 306, 311, 320, 321, 322, 323, 324, 325, 394, 403, 405, 459, 462, 463, 483, 489, 490, 547, 552, 561, 567, 571], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 41, 45, 121, 123, 124, 125, 126, 129, 147, 176, 196, 203, 250, 277, 279, 280, 282, 283, 284, 287, 290, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 332, 335, 339, 341, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 443, 457, 459, 469, 471, 497, 518, 540, 543, 546, 547, 551, 552, 553, 555, 557, 567, 573], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 41, 45, 46, 47, 75, 92, 93, 104, 123, 124, 125, 126, 129, 167, 182, 203, 240, 241, 256, 277, 279, 287, 290, 293, 294, 299, 306, 309, 310, 311, 312, 315, 319, 320, 321, 322, 324, 325, 327, 330, 331, 335, 388, 389, 390, 392, 394, 397, 398, 399, 401, 402, 474, 487, 492, 498, 518, 534, 540, 543, 549, 552, 553, 555, 556, 557, 563], "rel": [0, 27, 46, 47, 67, 75, 92, 93, 104, 108, 118, 125, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 294, 295, 310, 319, 325, 390, 394, 405, 553], "immedi": [0, 6, 283, 294, 326, 331, 333, 394, 405, 543, 547, 553], "under": [0, 9, 10, 14, 17, 24, 38, 45, 121, 126, 283, 297, 306, 312, 319, 320, 331, 335, 394, 396, 397, 405, 552], "consider": [0, 302, 319, 405, 462], "katz_centr": [0, 34, 331, 405, 541, 563], "alpha": [0, 306, 331, 405, 479, 480, 491, 532], "beta": [0, 331, 405, 480, 491], "attenu": [0, 405], "factor": [0, 13, 295, 297, 306, 331, 405, 440, 450, 472, 474, 552], "neighborhood": [0, 6, 320, 322, 325, 331, 394, 398, 405, 483], "maxim": [0, 6, 405, 493, 539], "subgraph": [0, 6, 9, 17, 33, 306, 307, 309, 321, 322, 323, 331, 353, 359, 388, 394, 396, 402, 403, 405, 416, 419, 441, 452, 483, 540, 551, 567, 571], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 121, 124, 125, 128, 282, 284, 287, 290, 293, 294, 297, 300, 303, 304, 306, 310, 313, 314, 317, 319, 320, 321, 323, 325, 327, 328, 330, 333, 335, 388, 389, 392, 394, 397, 398, 399, 400, 402, 405, 407, 408, 409, 416, 419, 420, 435, 445, 446, 447, 449, 452, 467, 492, 493, 497, 498, 540, 543, 544, 547, 551, 552, 553, 561, 565, 571], "found": [0, 4, 9, 16, 17, 18, 36, 129, 147, 166, 173, 196, 221, 240, 248, 270, 279, 287, 293, 305, 306, 310, 311, 322, 328, 381, 401, 459, 501, 502, 538, 540, 547, 551, 552, 553, 557], "recurs": [0, 6, 394, 442], "prune": [0, 297], "less": [0, 2, 6, 13, 17, 27, 293, 299, 300, 304, 319, 331, 394, 401, 405, 457, 468, 479, 481, 553], "kkore": [0, 34], "order": [0, 6, 34, 125, 279, 283, 294, 297, 300, 309, 322, 324, 325, 331, 332, 389, 394, 400, 405, 407, 408, 414, 438, 439, 442, 447, 454, 467, 468, 471, 503, 504, 507, 532, 533, 540, 546, 549, 553, 571], "That": [0, 27, 331, 399, 457, 500, 543, 555], "kshell": [0, 34], "fast": [0, 9, 20, 294, 297, 331, 398], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 41, 123, 126, 129, 279, 282, 284, 287, 297, 299, 300, 302, 309, 310, 319, 320, 321, 324, 325, 327, 331, 375, 389, 390, 392, 394, 398, 405, 415, 422, 440, 469, 473, 475, 484, 487, 488, 489, 490, 518, 540, 547, 552, 553, 560, 567, 571], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 129, 284, 293, 302, 311, 319, 321, 323, 325, 330, 331, 333, 405, 459, 467, 469, 471, 473, 487, 490, 495, 540, 543, 546, 549, 552, 553, 573], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 123, 129, 287, 296, 297, 304, 306, 322, 323, 325, 330, 389, 394, 459, 547, 549, 553, 554, 555, 556], "aim": [0, 22, 283, 306, 316, 322, 323, 324, 325, 327], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 121, 124, 125, 127, 128, 203, 277, 282, 287, 292, 293, 298, 305, 306, 314, 319, 320, 321, 325, 330, 331, 335, 365, 389, 390, 398, 399, 400, 402, 551, 554, 560, 570, 571], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 43, 45, 46, 121, 123, 124, 125, 126, 127, 129, 203, 277, 279, 280, 282, 284, 285, 287, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 312, 313, 314, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 335, 339, 388, 389, 390, 391, 392, 394, 397, 398, 400, 402, 404, 439, 459, 469, 473, 479, 482, 492, 493, 499, 502, 523, 536, 540, 547, 549, 551, 552, 553, 554, 556, 557, 560, 561], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 41, 43, 45, 46, 121, 123, 127, 129, 181, 255, 287, 290, 293, 294, 296, 297, 300, 302, 304, 306, 309, 316, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 392, 393, 394, 397, 400, 402, 459, 487, 491, 540, 546, 549, 551, 552, 553, 560], "ldbc": [0, 4, 34, 283, 293, 295, 297, 302, 303, 309, 319, 323, 327, 328, 551, 568, 573], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 45, 126, 283, 284, 287, 290, 293, 294, 302, 305, 309, 322, 324, 325, 392, 394, 396, 398, 405, 459, 525, 532, 534, 540, 547, 551, 552, 554], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 34, 37, 123, 147, 196, 221, 270, 279, 290, 292, 300, 304, 310, 319, 320, 322, 323, 324, 325, 327, 331, 333, 339, 341, 385, 387, 389, 392, 394, 398, 399, 402, 405, 424, 425, 429, 471, 480, 494, 538, 540, 547, 549, 551], "variant": [0, 31, 325, 328], "networkx": [0, 3, 7, 8, 12, 34, 290, 309, 326, 329, 330, 331, 365, 405, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 420, 422, 423, 424, 425, 429, 430, 434, 435, 439, 440, 442, 443, 445, 446, 447, 450, 452, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 480, 483, 484, 485, 486, 491, 492, 493, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 533, 535, 540, 542, 543, 545, 569, 574], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 36, 39, 41, 43, 45, 121, 123, 125, 126, 129, 203, 280, 282, 283, 284, 287, 290, 293, 294, 295, 296, 297, 300, 301, 304, 306, 309, 312, 313, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 333, 381, 387, 388, 389, 390, 392, 394, 397, 400, 401, 402, 403, 404, 405, 419, 443, 459, 473, 474, 479, 483, 491, 494, 495, 496, 501, 502, 520, 535, 538, 540, 543, 547, 551, 552, 553, 554, 557, 560, 565, 566, 570], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 126, 304, 306, 310, 312, 325, 380, 532, 553, 555], "rank": [0, 6, 33, 317, 320, 330, 331, 332, 532, 546], "vote": [0, 333], "scheme": [0, 6, 9, 125, 179, 253, 277, 293, 319], "With": [0, 4, 12, 19, 24, 34, 41, 203, 277, 279, 295, 302, 304, 306, 309, 314, 315, 320, 321, 322, 478, 551, 560], "top": [0, 9, 12, 22, 34, 47, 67, 75, 92, 93, 104, 108, 118, 221, 240, 241, 248, 250, 256, 270, 297, 302, 304, 306, 327, 392, 514, 553, 571], "highest": [0, 306, 474], "elect": 0, "num_of_nod": [0, 331], "select": [0, 9, 15, 36, 126, 294, 297, 299, 302, 310, 313, 319, 320, 323, 325, 332, 340, 346, 347, 357, 358, 362, 370, 371, 388, 394, 402, 459, 468, 491, 503, 537, 540, 546, 547, 551, 552, 571], "influenti": 0, "extract": [0, 298, 300, 304, 319, 320, 321, 322, 331, 339, 403, 547, 549, 553], "weakli": [0, 331, 405, 479], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 45, 121, 123, 124, 125, 126, 203, 277, 279, 281, 282, 283, 287, 290, 292, 293, 294, 295, 296, 297, 299, 300, 302, 304, 305, 306, 308, 309, 310, 313, 315, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 405, 462, 491, 494, 497, 498, 500, 540, 543, 546, 549, 552, 553, 555, 557, 560], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 37, 124, 129, 282, 290, 294, 295, 296, 297, 300, 302, 304, 306, 308, 309, 310, 313, 319, 322, 328, 350, 366, 389, 390, 391, 392, 402, 534, 540, 553, 557], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 41, 121, 129, 280, 283, 287, 295, 296, 297, 299, 300, 306, 320, 321, 325, 326, 328, 329, 388, 402, 476, 477, 478, 549, 551, 557], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 43, 44, 45, 121, 123, 124, 125, 126, 128, 129, 176, 203, 250, 270, 277, 279, 280, 283, 284, 287, 290, 292, 293, 294, 297, 299, 300, 302, 304, 305, 306, 308, 309, 310, 311, 313, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 349, 388, 390, 394, 395, 396, 400, 405, 436, 437, 459, 487, 488, 489, 490, 537, 540, 542, 547, 549, 551, 552, 553, 554, 557, 560, 563], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 44, 46, 121, 127, 128, 129, 169, 176, 182, 203, 221, 250, 256, 277, 284, 287, 293, 295, 297, 298, 299, 305, 308, 311, 314, 315, 319, 320, 321, 322, 325, 327, 329, 330, 331, 332, 366, 377, 394, 398, 399, 400, 402, 403, 492, 493, 543, 544, 547, 552, 553, 554, 555, 556, 557, 560, 561, 563, 565], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 41, 45, 121, 124, 129, 203, 277, 279, 280, 282, 283, 284, 285, 287, 295, 296, 297, 298, 299, 305, 310, 311, 312, 314, 315, 321, 327, 329, 331, 335, 390, 395, 399, 400, 449, 469, 540, 547, 549, 552, 563, 571], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 129, 203, 280, 285, 297, 299, 302, 308, 309, 323, 329, 335, 380, 392, 395, 400, 459, 469, 547, 552, 553, 557], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 123, 125, 126, 277, 279, 283, 285, 290, 292, 296, 302, 306, 312, 313, 314, 315, 322, 324, 325, 326, 327, 330, 388, 390, 396, 405, 540, 553], "extens": [1, 4, 6, 27, 36, 125, 294, 296, 297, 300, 313, 320, 389], "henc": [1, 2, 10, 32, 319, 414, 537, 540, 553], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 45, 46, 121, 123, 124, 125, 127, 129, 166, 176, 203, 250, 277, 279, 280, 282, 283, 284, 287, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 311, 312, 314, 315, 319, 321, 324, 326, 327, 329, 331, 335, 387, 389, 390, 393, 394, 395, 398, 399, 402, 405, 418, 449, 459, 469, 471, 483, 488, 489, 490, 540, 547, 549, 551, 552, 553, 555, 560, 561, 563, 573], "flash": [1, 3, 8, 12, 320], "java": [1, 4, 8, 12, 14, 34, 127, 128, 173, 277, 285, 292, 295, 304, 307, 309, 322, 323, 327, 331, 335, 339, 552, 563], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 128, 129, 173, 203, 277, 280, 281, 283, 284, 285, 297, 304, 306, 309, 310, 317, 320, 322, 323, 330, 331, 332, 335, 338, 350, 362, 390, 394, 398, 400, 405, 438, 439, 449, 469, 480, 493, 494, 497, 498, 532, 534, 536, 537, 540, 552, 555, 561, 563, 565, 571], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 43, 44, 45, 127, 128, 280, 282, 284, 285, 287, 290, 292, 293, 296, 299, 301, 306, 307, 310, 312, 315, 319, 320, 321, 323, 324, 326, 327, 330, 331, 338, 388, 391, 395, 398, 400, 403, 404, 540, 542, 543, 551, 552, 560, 561, 563, 564, 566, 567, 569, 570, 571, 573], "These": [1, 4, 9, 15, 20, 24, 125, 126, 127, 283, 293, 300, 310, 319, 320, 321, 323, 324, 325, 326, 394, 400, 552, 560], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 284, 290, 293, 294, 295, 297, 299, 301, 302, 304, 306, 310, 313, 315, 316, 317, 318, 320, 321, 323, 324, 325, 328, 330, 331, 332, 338, 339, 341, 342, 346, 347, 350, 351, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 367, 370, 371, 375, 381, 383, 388, 390, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 404, 405, 410, 411, 414, 416, 419, 420, 422, 424, 425, 428, 429, 430, 433, 434, 435, 438, 439, 440, 442, 443, 445, 446, 447, 449, 450, 452, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 541, 542, 544, 545, 547, 549, 552, 553, 555, 564, 567, 572], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 64, 90, 109, 123, 124, 128, 142, 147, 163, 173, 176, 182, 185, 196, 216, 221, 237, 248, 250, 256, 259, 270, 281, 285, 287, 290, 292, 293, 295, 296, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 340, 346, 347, 359, 362, 366, 370, 371, 375, 388, 390, 392, 394, 396, 400, 402, 404, 424, 425, 545, 546, 547, 552, 555, 557, 561, 567], "upon": [1, 2, 9, 14, 127, 277, 283, 300, 327, 402, 553, 554], "pregel": [1, 4, 8, 12, 17, 22, 34, 309, 320, 323, 545, 557, 567, 569], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 41, 121, 147, 196, 221, 270, 280, 290, 295, 297, 306, 313, 319, 321, 388, 538, 540, 573], "deploi": [2, 15, 33, 37, 45, 121, 203, 277, 280, 284, 285, 287, 292, 294, 295, 296, 298, 305, 309, 312, 320, 322, 327, 390, 547, 549, 554, 560], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 45, 125, 127, 129, 282, 283, 287, 293, 295, 296, 297, 298, 305, 311, 312, 314, 315, 320, 321, 322, 323, 324, 325, 331, 388, 400, 547, 552], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 41, 45, 126, 127, 279, 284, 287, 294, 297, 299, 306, 309, 310, 319, 321, 322, 325, 335, 352, 389, 392, 393, 394, 398, 400, 402, 405, 468, 489, 520, 538, 540, 544, 546, 552, 553, 554, 555], "advantag": [2, 294, 297, 309, 319, 326, 327, 556], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 41, 46, 123, 126, 127, 147, 203, 221, 277, 282, 285, 287, 290, 293, 294, 295, 296, 297, 301, 302, 304, 305, 306, 310, 313, 317, 318, 321, 325, 328, 331, 332, 391, 392, 393, 394, 397, 402, 403, 405, 407, 408, 409, 411, 416, 420, 424, 425, 441, 443, 446, 449, 455, 459, 460, 461, 463, 464, 465, 467, 471, 474, 475, 479, 480, 484, 486, 497, 498, 500, 502, 505, 508, 513, 517, 518, 521, 524, 527, 529, 532, 533, 534, 535, 540, 542, 543, 552, 555, 564, 567, 570, 571], "gie": [2, 32, 33, 292, 300, 306, 309, 319, 320, 324, 327, 328, 329, 359, 547, 564, 565, 574], "gle": [2, 32, 292, 309, 312, 313, 314, 320, 325, 327, 329, 564, 565, 572], "address": [2, 9, 14, 17, 23, 31, 282, 287, 297, 302, 317, 320, 325, 553, 571], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 41, 125, 129, 277, 282, 284, 290, 293, 294, 297, 299, 304, 306, 307, 309, 310, 313, 319, 320, 321, 322, 323, 324, 325, 327, 328, 331, 350, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 459, 463, 464, 465, 487, 490, 497, 517, 532, 540, 545, 547, 549, 551, 552, 553, 554, 555, 556, 557, 560], "complex": [2, 4, 6, 12, 22, 34, 37, 43, 203, 277, 283, 284, 290, 294, 295, 297, 302, 303, 304, 309, 310, 319, 320, 322, 323, 324, 325, 326, 327, 331, 391, 405, 469, 473, 488, 489, 490, 552], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 45, 49, 124, 126, 129, 132, 166, 203, 206, 240, 248, 277, 281, 283, 287, 292, 294, 299, 301, 305, 310, 313, 316, 320, 321, 322, 324, 325, 330, 390, 394, 400, 496, 532, 537, 551, 552, 553], "show": [2, 14, 19, 20, 27, 29, 30, 38, 121, 280, 284, 287, 294, 295, 306, 309, 314, 315, 321, 323, 324, 325, 391, 392, 400, 543, 547, 549, 552], "kubernet": [2, 29, 75, 287, 290, 292, 293, 295, 309, 314, 317, 319, 321, 326, 547, 553, 564, 566, 567, 569, 573, 574], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 75, 287, 290, 292, 295, 298, 305, 306, 309, 312, 314, 319, 320, 321, 322, 323, 324, 325, 326, 331, 390, 400, 405, 462, 541, 547, 553, 554, 561, 563, 570], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 123, 126, 277, 280, 283, 287, 290, 293, 294, 296, 297, 299, 300, 302, 304, 306, 310, 319, 320, 325, 327, 389, 390, 391, 396, 405, 469, 540, 552, 553], "scenario": [2, 4, 6, 8, 12, 13, 41, 126, 283, 294, 297, 304, 305, 306, 310, 313, 319, 320, 324, 325, 327, 389, 390, 392], "quit": [2, 30, 277, 299, 459], "common": [2, 6, 12, 15, 30, 147, 166, 167, 173, 182, 196, 279, 294, 299, 306, 310, 313, 319, 320, 322, 323, 324, 325, 327, 388, 389, 396, 397, 411, 532, 534, 540, 551, 552, 561], "intend": [2, 13, 36, 277, 300, 532, 546], "analysi": [2, 7, 8, 11, 13, 294, 297, 305, 306, 309, 319, 325, 326, 328, 329, 331, 493], "offlin": [2, 292, 309, 310, 322, 325, 326, 549], "everi": [2, 6, 23, 123, 126, 304, 306, 313, 325, 330, 394, 405, 407, 408, 409, 424, 425, 443, 457, 520, 527, 540, 546, 552], "dai": [2, 20, 126, 306, 540, 543, 551], "export": [2, 4, 23, 29, 31, 33, 39, 45, 129, 203, 277, 279, 282, 284, 287, 295, 311, 551, 553, 566], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 293, 297, 302, 304, 320, 322, 327, 335, 348, 389, 391, 392, 393, 394, 415, 452, 466, 473, 479, 480, 487, 488, 489, 490, 491, 540, 543, 547, 552, 553, 555, 571], "real": [2, 6, 9, 12, 13, 34, 279, 290, 293, 297, 302, 304, 309, 320, 321, 323, 325, 532, 551, 553], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 123, 126, 127, 176, 203, 250, 277, 284, 287, 294, 295, 296, 297, 300, 302, 304, 306, 309, 313, 317, 318, 319, 321, 324, 325, 328, 331, 389, 390, 394, 405, 438, 439, 475, 476, 477, 478, 488, 489, 490, 492, 493, 502, 505, 540, 552, 553, 555, 567, 571], "sampl": [2, 29, 30, 31, 33, 124, 279, 285, 292, 293, 309, 310, 317, 320, 321, 327, 335, 389, 390, 391, 393, 396, 398, 401, 404, 479, 499, 532, 553, 572], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 41, 45, 129, 287, 290, 293, 294, 297, 300, 302, 304, 306, 313, 319, 324, 328, 333, 389, 390, 394, 396, 398, 401, 405, 459, 467, 473, 497, 508, 524, 546, 547, 551, 552, 553, 557, 560], "unnecessari": [2, 6, 9, 306, 552], "capabl": [2, 6, 11, 16, 20, 129, 283, 297, 300, 301, 304, 307, 320, 322, 324, 327, 540], "independ": [2, 6, 30, 320, 327, 389, 403, 416, 419, 467, 494, 540], "document": [2, 10, 27, 29, 33, 35, 36, 38, 43, 44, 45, 127, 128, 129, 279, 280, 284, 285, 287, 295, 297, 299, 300, 301, 304, 305, 307, 309, 311, 325, 331, 388, 389, 395, 547, 548, 553], "walk": [2, 4, 32, 121, 124, 280, 293, 306, 320, 321, 324, 394, 441, 452], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 121, 123, 124, 127, 280, 281, 283, 285, 290, 292, 293, 295, 296, 297, 301, 305, 306, 308, 309, 310, 312, 313, 314, 315, 320, 322, 323, 324, 325, 326, 330, 341, 389, 390, 392, 394, 398, 400, 469, 471, 474, 502, 508, 540, 547, 549, 551, 552, 555, 557], "standalon": [2, 23, 27, 32, 287, 292, 295, 296, 297, 306, 319, 320, 554, 560, 573], "self": [2, 293, 306, 319, 375, 388, 391, 394, 405, 415, 428, 467, 469, 471, 473, 479, 487, 488, 489, 490, 491, 540, 541, 543, 547, 553, 568, 572, 573], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 121, 127, 128, 129, 203, 277, 280, 281, 282, 284, 287, 290, 293, 301, 306, 309, 313, 314, 315, 320, 322, 323, 324, 325, 326, 327, 328, 330, 547, 553, 554, 560, 563], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 41, 127, 282, 287, 290, 292, 293, 298, 305, 309, 312, 314, 319, 327, 329, 547, 553, 563, 564, 565, 567, 570, 573], "7": [2, 10, 20, 23, 27, 30, 31, 32, 46, 203, 277, 287, 296, 304, 306, 328, 389, 395, 400, 407, 408, 420, 443, 505, 511, 513, 517, 518, 521, 523, 535, 540, 555, 566, 570, 571], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 45, 123, 124, 125, 127, 129, 203, 277, 279, 280, 282, 283, 284, 287, 290, 293, 294, 297, 306, 308, 309, 310, 311, 313, 315, 316, 319, 320, 321, 325, 327, 328, 331, 335, 388, 389, 390, 392, 394, 395, 396, 398, 400, 405, 418, 469, 471, 476, 478, 487, 490, 530, 534, 540, 542, 546, 547, 549, 552, 553, 556, 557, 560, 561], "get": [2, 4, 6, 12, 16, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 41, 43, 44, 45, 47, 67, 75, 92, 93, 104, 108, 127, 128, 147, 166, 167, 173, 182, 196, 221, 240, 241, 248, 256, 270, 283, 285, 287, 292, 293, 294, 295, 300, 306, 310, 313, 319, 324, 326, 329, 331, 332, 333, 351, 388, 391, 392, 393, 394, 397, 402, 403, 404, 405, 438, 459, 530, 540, 546, 547, 549, 552, 553, 557, 560, 561, 563, 566, 567], "instal": [2, 4, 15, 16, 17, 19, 23, 33, 35, 41, 44, 121, 127, 128, 279, 285, 287, 293, 295, 298, 305, 321, 331, 335, 398, 540, 543, 547, 564, 565, 566, 567, 570], "client": [2, 17, 22, 23, 29, 33, 38, 41, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 182, 196, 203, 221, 240, 241, 248, 270, 277, 279, 280, 284, 286, 294, 305, 307, 309, 315, 318, 330, 331, 400, 547, 549, 551, 552, 553, 554, 563, 565, 570], "prepar": [2, 4, 33, 36, 43, 124, 285, 293, 296, 297, 299, 310, 311, 312, 313, 315, 316, 321, 325, 329, 552, 567], "continu": [2, 6, 15, 16, 20, 27, 293, 294, 297, 305, 306, 309, 310, 320, 321, 325, 328, 388, 459, 497, 500, 552, 553, 554], "incas": [2, 293], "doesn": [2, 13, 29, 32, 37, 38, 41, 279, 293, 304, 306, 335, 394, 469, 471, 473, 540, 546, 555], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 41, 277, 279, 282, 286, 287, 293, 302, 304, 306, 317, 318, 319, 322, 328, 330, 331, 333, 335, 341, 388, 393, 394, 400, 404, 405, 418, 434, 469, 471, 473, 493, 497, 498, 532, 534, 537, 540, 546, 553, 555, 572], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 41, 121, 126, 129, 173, 176, 203, 250, 277, 279, 280, 282, 293, 295, 296, 304, 309, 311, 319, 329, 331, 383, 390, 392, 393, 402, 468, 551, 552, 553, 554], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 125, 127, 128, 129, 147, 166, 173, 176, 196, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 283, 285, 287, 293, 295, 296, 299, 304, 305, 306, 317, 319, 320, 321, 324, 325, 330, 331, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 365, 368, 369, 375, 381, 382, 383, 392, 394, 397, 399, 402, 403, 418, 440, 442, 443, 445, 446, 447, 449, 450, 452, 454, 455, 457, 458, 459, 461, 462, 464, 467, 469, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 488, 489, 490, 492, 493, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 534, 535, 540, 542, 543, 544, 547, 553, 554, 555, 556, 561, 563, 566], "distinct": [2, 297, 300, 304, 320, 321, 324, 445, 507, 533, 552], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 46, 47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 279, 297, 304, 306, 313, 315, 319, 323, 325, 330, 331, 333, 354, 365, 380, 388, 392, 396, 397, 403, 405, 468, 476, 478, 487, 489, 540, 543, 545, 547, 552, 553, 557, 563], "entir": [2, 9, 34, 283, 294, 306, 321, 325, 394, 405, 540], "discret": [2, 310, 325, 388, 459, 472, 474, 480, 484, 495], "util": [2, 4, 6, 9, 15, 32, 36, 41, 43, 45, 126, 129, 173, 279, 283, 297, 300, 301, 306, 309, 311, 316, 319, 320, 322, 323, 326, 330, 331, 333, 404, 505, 551, 552, 553, 556], "either": [2, 13, 30, 34, 125, 279, 280, 284, 287, 293, 297, 302, 305, 306, 313, 331, 390, 394, 402, 403, 443, 446, 459, 486, 497, 530, 540, 554], "aforement": [2, 277, 319, 323, 325, 389, 394, 553], "per": [2, 125, 283, 293, 552, 553], "prefer": [2, 13, 27, 36, 283, 297, 552], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 45, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 270, 277, 279, 284, 287, 290, 296, 299, 303, 305, 306, 309, 312, 314, 317, 319, 321, 329, 331, 332, 350, 381, 382, 383, 385, 387, 402, 403, 540, 544, 545, 551, 553, 555, 560, 561, 563, 564, 565, 567, 568, 571, 573], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 46, 47, 67, 75, 92, 93, 104, 108, 118, 129, 147, 166, 167, 173, 176, 182, 196, 203, 277, 279, 300, 306, 313, 316, 319, 321, 325, 330, 331, 332, 333, 338, 388, 389, 402, 403, 404, 405, 449, 518, 540, 544, 547, 552, 553, 554, 563, 572], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 75, 76, 83, 84, 87, 90, 91, 92, 93, 94, 98, 102, 104, 105, 106, 107, 108, 109, 118, 119, 123, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 168, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 192, 193, 196, 197, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 239, 242, 243, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 267, 270, 271, 273, 275, 284, 285, 293, 295, 297, 298, 299, 300, 302, 304, 305, 306, 309, 311, 317, 319, 322, 324, 327, 331, 332, 335, 338, 359, 365, 366, 367, 377, 387, 389, 392, 394, 402, 403, 405, 407, 408, 409, 424, 425, 434, 440, 442, 443, 445, 447, 449, 450, 452, 454, 455, 458, 462, 463, 464, 467, 469, 471, 472, 474, 475, 476, 477, 478, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 532, 535, 538, 540, 542, 543, 546, 547, 553, 554], "control": [2, 6, 27, 38, 45, 319, 320, 322, 330, 405, 540, 552, 553], "subset": [2, 6, 20, 129, 283, 297, 302, 304, 316, 321, 446, 457, 546, 547], "launch": [2, 8, 9, 17, 22, 29, 36, 41, 123, 127, 279, 287, 290, 293, 303, 312, 314, 315, 321, 329, 381, 399, 544, 547, 553, 554, 560, 563, 567], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 41, 44, 45, 121, 123, 124, 126, 127, 128, 129, 176, 203, 250, 279, 280, 282, 283, 284, 287, 290, 293, 294, 297, 300, 302, 304, 306, 309, 310, 313, 315, 319, 320, 321, 323, 324, 325, 331, 333, 339, 388, 389, 390, 391, 394, 396, 398, 400, 402, 405, 417, 438, 441, 443, 446, 469, 471, 473, 474, 479, 482, 483, 487, 488, 489, 490, 491, 502, 505, 534, 540, 544, 546, 547, 553, 555, 556, 561], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 41, 123, 124, 126, 129, 203, 277, 279, 284, 290, 292, 293, 296, 297, 299, 300, 302, 305, 306, 307, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 331, 332, 338, 339, 381, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 403, 405, 407, 408, 409, 411, 416, 418, 419, 424, 425, 428, 433, 434, 439, 441, 443, 445, 446, 449, 452, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 475, 476, 478, 480, 483, 487, 488, 489, 490, 491, 497, 500, 505, 530, 532, 533, 534, 535, 538, 540, 542, 543, 544, 546, 547, 551, 552, 553, 554, 555, 560, 561, 563, 567, 572], "set_opt": [2, 7, 15, 17, 19, 29, 38, 287, 296, 299, 312, 315, 316, 317, 318, 321, 561, 566], "show_log": [2, 7, 15, 17, 19, 29, 38, 287, 296, 312, 315, 316, 317, 318, 321, 387, 561, 566], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 45, 75, 93, 123, 124, 125, 129, 203, 277, 279, 287, 293, 296, 297, 304, 305, 306, 312, 313, 315, 316, 317, 318, 319, 321, 330, 331, 333, 335, 377, 381, 385, 388, 389, 390, 394, 397, 400, 402, 405, 412, 421, 422, 423, 424, 425, 434, 436, 437, 443, 445, 463, 467, 469, 473, 479, 483, 486, 498, 538, 540, 542, 543, 547, 553, 554, 561, 563, 566, 571, 572, 573], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 203, 221, 240, 241, 248, 250, 256, 270, 277, 279, 290, 299, 315, 316, 317, 319, 331, 332, 377, 381, 402, 403, 547, 551, 555, 561, 563, 564, 565, 567, 568, 571, 573], "enabled_engin": [2, 387, 547], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 37, 41, 45, 47, 124, 126, 129, 203, 279, 290, 295, 296, 299, 300, 302, 304, 305, 306, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 339, 383, 388, 390, 391, 392, 393, 394, 395, 397, 398, 400, 402, 403, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 439, 440, 442, 443, 445, 446, 449, 450, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 497, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 537, 538, 540, 542, 543, 546, 547, 549, 551, 552, 553, 554, 556, 557, 561, 563, 566, 567, 568, 570, 571, 572, 573], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 45, 121, 125, 126, 203, 277, 279, 280, 282, 283, 284, 285, 294, 300, 309, 313, 319, 320, 323, 325, 326, 388, 389, 392, 394, 396, 397, 398, 487, 489, 490, 537, 557], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 41, 45, 121, 123, 124, 127, 129, 277, 282, 287, 292, 295, 297, 311, 312, 317, 330, 389, 553, 554, 561], "line": [2, 4, 6, 7, 17, 36, 37, 38, 41, 45, 121, 127, 129, 282, 292, 294, 311, 312, 322, 327, 388, 389, 540, 542, 553, 554, 561, 572], "releas": [2, 27, 31, 32, 35, 124, 280, 287, 302, 315, 328, 497, 500, 546, 547, 553, 566, 570], "replac": [2, 17, 19, 22, 23, 29, 30, 124, 129, 166, 203, 277, 279, 282, 284, 294, 295, 299, 304, 322, 328, 391, 392, 393, 402, 540], "my": [2, 18, 29, 540, 543, 547, 553], "illustr": [2, 4, 29, 124, 125, 126, 129, 284, 306, 310, 316, 317, 318, 323, 325, 391, 517], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 46, 129, 203, 277, 284, 290, 293, 294, 298, 305, 306, 313, 315, 319, 320, 321, 388, 394, 534, 549, 555], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 41, 43, 45, 126, 128, 147, 166, 167, 173, 176, 182, 196, 279, 282, 283, 284, 285, 287, 293, 294, 301, 304, 306, 307, 309, 313, 315, 319, 320, 321, 322, 323, 325, 331, 332, 333, 389, 390, 392, 394, 397, 403, 405, 409, 426, 441, 443, 445, 447, 451, 452, 454, 455, 457, 458, 459, 461, 462, 463, 464, 466, 468, 473, 474, 479, 480, 482, 487, 489, 490, 491, 492, 493, 494, 496, 505, 515, 516, 518, 520, 522, 539, 540, 547, 554, 555, 563, 571], "servic": [2, 27, 28, 29, 38, 39, 43, 45, 46, 104, 125, 127, 128, 166, 176, 182, 240, 250, 256, 279, 284, 285, 298, 305, 309, 315, 320, 321, 323, 325, 330, 547, 554], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 39, 45, 46, 94, 121, 123, 124, 125, 126, 127, 129, 169, 203, 243, 277, 279, 280, 283, 287, 289, 293, 300, 304, 306, 309, 312, 313, 319, 323, 325, 327, 330, 331, 332, 381, 383, 387, 389, 390, 392, 393, 396, 397, 398, 400, 497, 540, 547, 551, 553, 556, 557], "addr": [2, 29, 333, 547], "ip": [2, 29, 282, 293, 295, 305, 547, 553, 571], "port": [2, 23, 29, 38, 45, 121, 129, 203, 277, 280, 282, 283, 284, 287, 293, 295, 299, 305, 317, 319, 330, 547, 553, 571, 573], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 45, 46, 127, 129, 203, 277, 279, 283, 284, 287, 290, 293, 294, 296, 297, 299, 302, 304, 306, 310, 312, 315, 319, 320, 321, 324, 325, 326, 327, 341, 389, 394, 396, 397, 398, 399, 402, 439, 462, 469, 471, 479, 540, 543, 546, 547, 552, 553, 555, 557, 560], "would": [2, 4, 20, 29, 31, 36, 37, 41, 45, 126, 287, 295, 299, 306, 320, 330, 331, 394, 400, 543, 546, 547, 553], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 41, 203, 306, 321, 331, 340, 388, 392, 394, 478, 553], "wcc_result": 2, "wcc": [2, 13, 328, 331, 563, 568], "print": [2, 7, 16, 20, 29, 30, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 282, 284, 287, 290, 293, 296, 297, 298, 299, 305, 306, 312, 313, 315, 316, 317, 318, 319, 321, 331, 332, 391, 393, 394, 397, 400, 402, 403, 405, 418, 467, 535, 540, 543, 551, 553, 560, 561, 568, 571, 573], "to_datafram": [2, 7, 15, 290, 321, 332, 402, 546, 551, 563], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 45, 47, 67, 80, 81, 82, 84, 90, 92, 93, 94, 104, 108, 109, 124, 125, 126, 147, 160, 163, 166, 167, 169, 173, 176, 185, 196, 203, 234, 237, 240, 241, 243, 248, 250, 259, 270, 277, 279, 284, 286, 287, 290, 293, 294, 295, 297, 299, 300, 307, 310, 313, 319, 321, 324, 325, 328, 330, 331, 332, 333, 359, 365, 367, 388, 389, 390, 391, 392, 393, 394, 397, 398, 400, 401, 402, 404, 497, 498, 537, 540, 543, 546, 547, 551, 553, 554, 561, 563, 564, 566, 567, 571, 572, 573], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 279, 290, 293, 300, 321, 322, 325, 331, 332, 440, 450, 457, 463, 467, 479, 487, 496, 528, 533, 546, 547, 551, 553, 563, 567, 568], "tip": [2, 13, 525], "encount": [2, 32, 37, 121, 129, 277, 279, 283, 287, 323, 341], "fail": [2, 37, 147, 166, 167, 169, 173, 176, 182, 196, 203, 250, 277, 279, 287, 294, 297, 304, 325, 405, 540, 553], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 46, 203, 280, 283, 294, 297, 298, 300, 321, 322, 324, 330, 331, 332, 364, 395, 402, 547, 551, 553, 563, 567, 568, 571], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 124, 125, 173, 203, 277, 287, 292, 294, 296, 297, 302, 304, 306, 312, 319, 320, 321, 324, 331, 332, 364, 388, 390, 403, 405, 469, 471, 474, 475, 497, 498, 499, 500, 502, 514, 532, 540, 546, 553, 563, 566, 567, 571], "empti": [2, 19, 29, 41, 176, 250, 279, 286, 297, 304, 306, 319, 331, 333, 422, 446, 449, 479, 480, 518, 534, 540, 543, 553], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 45, 93, 129, 166, 167, 203, 240, 277, 280, 281, 285, 287, 290, 292, 293, 294, 295, 296, 297, 298, 301, 305, 312, 321, 322, 323, 325, 328, 329, 330, 331, 339, 341, 343, 372, 388, 390, 399, 400, 402, 547, 552], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 124, 287, 290, 296, 297, 301, 306, 312, 315, 316, 317, 318, 321, 325, 328, 331, 332, 388, 394, 400, 547, 551, 563, 565, 567, 571, 573], "load_modern_graph": [2, 7, 30, 33, 296, 321, 331, 403], "modern": [2, 6, 7, 33, 124, 129, 280, 285, 293, 295, 296, 306, 309, 321, 322, 323, 549, 553, 554], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 45, 104, 121, 123, 124, 125, 126, 129, 176, 182, 203, 250, 256, 277, 280, 283, 287, 290, 293, 294, 300, 302, 304, 306, 309, 313, 315, 317, 319, 321, 323, 324, 326, 331, 333, 382, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 402, 403, 532, 535, 540, 547, 552, 553, 560, 563, 570], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 46, 47, 67, 75, 92, 93, 104, 108, 118, 124, 126, 173, 203, 248, 279, 286, 290, 295, 297, 300, 302, 306, 308, 309, 312, 313, 315, 319, 320, 321, 322, 323, 324, 325, 327, 328, 331, 332, 341, 390, 391, 392, 393, 394, 397, 400, 402, 403, 404, 405, 441, 459, 469, 471, 473, 474, 476, 477, 478, 481, 486, 487, 494, 495, 496, 497, 500, 502, 518, 523, 529, 531, 540, 542, 543, 546, 547, 549, 551, 552, 554, 556, 557, 563, 567, 570, 571, 573], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 39, 45, 123, 124, 125, 129, 203, 240, 277, 279, 293, 294, 295, 299, 300, 307, 309, 310, 313, 317, 319, 321, 323, 324, 327, 331, 339, 389, 390, 392, 394, 399, 400, 402, 405, 408, 441, 447, 451, 452, 454, 471, 534, 540, 542, 544, 546, 547, 551, 553, 555, 563, 564, 567, 568, 571], "store": [2, 10, 12, 13, 16, 17, 30, 34, 108, 123, 126, 127, 128, 129, 173, 176, 250, 280, 283, 285, 287, 292, 293, 300, 301, 302, 304, 306, 309, 319, 320, 322, 323, 324, 326, 327, 332, 333, 346, 347, 362, 370, 371, 390, 396, 402, 403, 459, 464, 487, 488, 489, 490, 491, 540, 542, 547, 549, 551, 552, 554, 561, 563, 566], "pod": [2, 27, 28, 29, 30, 38, 41, 75, 102, 287, 290, 293, 315, 319, 547, 553, 561, 564, 566, 567, 573], "elimin": [2, 6, 14, 390], "extran": 2, "resourc": [2, 27, 29, 33, 38, 46, 75, 283, 287, 290, 297, 305, 315, 320, 327, 331, 339, 459, 492, 547, 553, 556, 560, 566], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 44, 47, 67, 75, 92, 93, 104, 108, 118, 123, 125, 126, 128, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270, 282, 284, 287, 290, 294, 296, 297, 299, 302, 304, 306, 310, 313, 315, 319, 320, 321, 325, 327, 331, 335, 349, 388, 389, 390, 392, 393, 397, 398, 399, 400, 401, 438, 486, 487, 491, 540, 547, 552, 553, 556, 570], "equival": [2, 20, 287, 300, 302, 304, 306, 394, 459, 496, 540], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 36, 43, 121, 126, 129, 279, 282, 283, 287, 297, 299, 300, 302, 304, 305, 306, 310, 319, 320, 322, 325, 327, 330, 394, 398, 405, 438, 439, 446, 449, 469, 471, 476, 487, 488, 489, 490, 491, 499, 535, 538, 539, 540, 541, 542, 545, 551, 552, 557, 560, 563], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 46, 47, 67, 75, 92, 93, 104, 108, 118, 123, 125, 126, 129, 203, 277, 282, 283, 284, 287, 290, 293, 294, 299, 300, 304, 305, 306, 310, 313, 315, 320, 322, 323, 325, 327, 328, 331, 332, 333, 341, 375, 381, 389, 390, 391, 392, 393, 394, 397, 398, 399, 401, 402, 404, 405, 449, 459, 479, 487, 488, 489, 490, 496, 540, 542, 543, 547, 549, 551, 552, 553, 555, 560, 561], "close": [2, 6, 27, 29, 30, 33, 43, 285, 305, 313, 315, 320, 331, 390, 400, 403, 542, 547, 553, 567], "free": [2, 9, 37, 279, 287, 313, 327, 480, 487, 497, 500, 502, 533, 539, 547], "delet": [2, 9, 27, 29, 30, 33, 46, 47, 67, 92, 93, 108, 128, 147, 166, 167, 173, 196, 240, 241, 248, 279, 285, 287, 360, 399, 547, 549, 553, 566], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 126, 283, 285, 293, 294, 297, 302, 305, 306, 309, 320, 322, 323, 324, 325, 332, 362, 389, 401, 404, 540, 542, 552, 553], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 41, 123, 127, 129, 283, 294, 297, 302, 306, 309, 310, 320, 321, 322, 323, 325, 326, 352, 402, 505, 552, 557], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 287, 290, 294, 297, 308, 310, 313, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 335, 390, 393, 394, 396, 402, 450, 459, 462, 463, 471, 472, 473, 474, 475, 479, 480, 481, 482, 487, 492, 493, 496, 497, 499, 500, 523, 532, 537, 540, 541, 543, 545, 546, 556], "deriv": [3, 12, 34, 321, 324, 330, 332, 402, 405, 549], "grape": [3, 4, 15, 16, 22, 23, 34, 292, 308, 320, 326, 330, 339, 549, 552, 554, 555, 556, 557, 563, 569], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 43, 127, 129, 147, 166, 167, 173, 176, 182, 196, 203, 279, 280, 281, 282, 283, 287, 290, 293, 294, 296, 297, 300, 301, 302, 306, 307, 308, 309, 312, 320, 322, 323, 324, 325, 326, 328, 389, 390, 395, 398, 537, 539, 549, 551, 552, 553, 555, 557, 563, 571], "sigmod": [3, 12, 14, 24, 34, 320, 563, 569], "2017": [3, 12, 14, 34, 320, 497, 498, 563], "further": [3, 6, 10, 14, 20, 27, 30, 34, 283, 290, 295, 300, 302, 304, 306, 321, 322, 332, 390, 402, 403, 418, 549, 552], "enhanc": [3, 4, 9, 283, 297, 304, 321], "introduc": [3, 6, 10, 19, 20, 24, 125, 203, 277, 292, 294, 300, 302, 304, 306, 308, 310, 320, 322, 324, 327, 388, 391, 392, 394, 396, 405, 517, 539, 552, 557], "lot": [3, 13, 37, 290, 306, 308, 557], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 47, 92, 108, 128, 129, 147, 166, 173, 176, 182, 196, 240, 248, 279, 283, 285, 294, 296, 306, 311, 320, 321, 322, 330, 333, 340, 341, 382, 399, 402, 403, 405, 412, 418, 459, 471, 480, 482, 502, 531, 538, 540, 547, 549, 551, 552, 553, 555, 567], "featur": [3, 6, 9, 12, 23, 32, 34, 203, 277, 285, 300, 308, 310, 312, 315, 316, 320, 321, 324, 325, 326, 327, 330, 335, 388, 389, 396, 400, 402, 540, 547, 552, 557, 567, 572], "storag": [3, 9, 30, 43, 46, 50, 53, 75, 101, 129, 133, 136, 176, 203, 207, 210, 250, 277, 279, 283, 287, 294, 295, 297, 300, 302, 306, 319, 322, 325, 327, 367, 390, 551, 553, 554], "languag": [3, 12, 16, 35, 43, 46, 129, 281, 285, 290, 294, 296, 297, 302, 304, 305, 306, 307, 309, 310, 313, 320, 321, 322, 323, 324, 327, 335, 403, 552, 553, 557], "pattern": [3, 6, 12, 23, 30, 123, 283, 294, 295, 299, 302, 304, 309, 313, 320, 323, 327, 331, 393, 398, 553], "better": [3, 8, 12, 20, 24, 29, 34, 293, 294, 297, 306, 308, 325, 327, 547, 553, 557], "integr": [3, 4, 9, 12, 13, 22, 23, 34, 125, 203, 277, 280, 294, 296, 299, 307, 308, 320, 322, 324, 326, 327, 533, 552, 553, 555, 557], "big": [3, 6, 12, 37, 308, 322, 557], "overview": [3, 23, 34, 280, 285, 297, 306, 321, 549], "architectur": [3, 9, 45, 121, 129, 282, 283, 320, 325, 331], "kei": [3, 4, 13, 20, 27, 124, 125, 126, 147, 150, 151, 196, 203, 221, 224, 225, 270, 277, 285, 293, 296, 297, 300, 301, 304, 306, 319, 322, 324, 325, 326, 331, 332, 333, 364, 365, 366, 375, 391, 394, 400, 402, 405, 434, 483, 487, 488, 489, 490, 538, 540, 542, 543, 546, 547, 552, 553, 563, 573], "concept": [3, 129, 322, 325, 388, 389], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 22, 34, 308, 309, 320, 322, 323, 557], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 305, 310, 322, 330, 557], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 129, 282, 287, 290, 293, 296, 297, 300, 307, 309, 310, 312, 313, 314, 315, 316, 321, 325, 326, 329, 331, 396, 403, 546, 547, 549, 551, 567], "tune": [3, 290, 297, 319, 320], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 41, 43, 45, 121, 124, 125, 203, 277, 280, 282, 283, 284, 285, 292, 293, 296, 297, 299, 301, 304, 305, 307, 312, 315, 316, 321, 335, 567], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 44, 45, 47, 67, 75, 78, 92, 93, 104, 108, 118, 121, 128, 130, 147, 166, 167, 173, 176, 182, 196, 203, 204, 221, 240, 241, 248, 250, 256, 270, 277, 279, 281, 282, 283, 284, 285, 292, 294, 295, 297, 299, 300, 306, 311, 320, 321, 322, 327, 328, 330, 331, 333, 338, 388, 389, 390, 391, 394, 395, 400, 459, 501, 544, 552, 553, 555, 560], "organ": [4, 44, 45, 129, 299, 304, 306, 309, 310, 325, 329, 388, 390, 392, 396, 397, 476, 478, 517], "identifi": [4, 9, 13, 24, 126, 166, 176, 203, 240, 250, 277, 284, 300, 302, 304, 306, 320, 321, 323, 331, 380, 467, 534, 537, 540, 547, 553, 560, 573], "simplic": [4, 9], "suggest": [4, 13, 294, 299, 306, 319, 322, 459], "prebuilt": [4, 41, 295], "docker": [4, 27, 32, 33, 36, 38, 41, 45, 121, 128, 282, 285, 287, 295, 309, 553, 560, 564, 567, 569, 570], "imag": [4, 29, 36, 38, 45, 98, 127, 129, 287, 295, 297, 309, 311, 317, 328, 391, 547, 560], "necessari": [4, 6, 23, 27, 37, 41, 284, 295, 296, 297, 305, 319, 342, 350, 355, 389, 390, 392, 394, 402, 552, 553, 561], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 41, 45, 128, 203, 282, 287, 295, 297, 298, 299, 305, 306, 311, 312, 322, 325, 331, 394, 462, 467, 553, 560, 563], "shm": [4, 32, 41, 295, 311, 317, 565], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 41, 125, 286, 287, 293, 295, 297, 305, 310, 311, 313, 317, 319, 325, 328, 333, 389, 391, 392, 394, 399, 401, 402, 445, 446, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 482, 491, 495, 497, 540, 551, 552, 553, 554, 565], "4096m": [4, 32, 41, 295, 311], "registri": [4, 27, 32, 41, 45, 129, 285, 295, 297, 311, 317, 395, 547, 553, 565], "cn": [4, 23, 27, 29, 31, 32, 41, 45, 124, 129, 295, 297, 311, 317, 319, 395, 553, 564, 565, 573], "hongkong": [4, 27, 32, 41, 45, 129, 295, 297, 311, 317, 553, 565], "aliyunc": [4, 23, 27, 29, 31, 32, 41, 45, 124, 129, 295, 297, 311, 317, 319, 395, 553, 564, 565, 573], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 36, 41, 45, 46, 124, 127, 129, 147, 166, 167, 173, 176, 182, 196, 203, 270, 277, 279, 295, 296, 297, 299, 311, 312, 317, 319, 322, 323, 328, 331, 335, 395, 398, 405, 492, 501, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 520, 525, 547, 552, 553, 563, 564, 565, 566, 573], "latest": [4, 14, 17, 32, 37, 38, 39, 41, 42, 45, 127, 129, 280, 295, 297, 299, 311, 312, 552, 553, 565, 570], "altern": [4, 126, 297, 300, 468, 487, 491, 540, 552, 553], "manual": [4, 9, 27, 30, 33, 128, 203, 287, 320, 327, 402, 553], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 121, 123, 125, 126, 129, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 280, 282, 283, 284, 287, 293, 294, 296, 297, 300, 302, 304, 305, 306, 311, 313, 315, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 333, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 405, 409, 410, 412, 413, 417, 419, 434, 435, 439, 440, 443, 445, 446, 450, 459, 468, 477, 483, 497, 498, 500, 502, 526, 534, 535, 538, 540, 547, 551, 552, 553, 556, 561], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 41, 45, 46, 121, 123, 124, 129, 173, 176, 203, 250, 277, 279, 280, 282, 283, 284, 287, 295, 297, 299, 302, 313, 315, 319, 321, 388, 389, 390, 392, 393, 394, 395, 398, 400, 551, 553, 557, 560, 567], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 39, 44, 128, 203, 277, 279, 282, 284, 287, 290, 292, 296, 297, 301, 309, 315, 321, 322, 329, 331, 335, 395, 399, 405, 547, 552, 553, 554, 560, 561, 566], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 45, 121, 124, 203, 277, 279, 280, 290, 297, 299, 302, 304, 310, 322, 323, 325, 331, 332, 333, 343, 388, 389, 390, 391, 398, 399, 400, 405, 502, 513, 532, 540, 544, 546, 547, 549, 552, 553, 554, 561, 563], "clone": [4, 17, 22, 29, 30, 31, 32, 36, 37, 127, 129, 203, 295, 299, 335, 395, 553, 565], "repositori": [4, 29, 36, 37, 46, 127, 129, 203, 293, 299, 335, 547, 553], "enter": [4, 46, 47, 67, 75, 92, 93, 104, 108, 118, 294, 305], "analytical_engin": [4, 15, 17, 31, 36, 335, 563], "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 45, 123, 124, 129, 287, 297, 299, 305, 309, 330, 334, 336, 388, 399, 402, 547, 551, 560, 561, 564, 566, 567], "git": [4, 17, 22, 29, 30, 31, 32, 35, 36, 37, 46, 127, 129, 203, 295, 299, 335, 398, 552, 565], "http": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 36, 45, 46, 121, 124, 127, 129, 203, 277, 280, 282, 284, 287, 295, 296, 298, 299, 301, 305, 312, 315, 316, 321, 322, 323, 331, 335, 395, 398, 405, 459, 463, 464, 465, 479, 482, 489, 490, 492, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 524, 525, 526, 527, 532, 547, 552, 553, 563, 564, 565, 566, 567, 570, 571, 573], "github": [4, 22, 29, 30, 31, 32, 35, 36, 45, 46, 124, 127, 129, 203, 277, 295, 299, 322, 323, 331, 335, 395, 398, 490, 547, 552, 563, 565, 573], "alibaba": [4, 17, 22, 23, 29, 31, 32, 36, 46, 124, 127, 129, 147, 166, 167, 173, 176, 182, 196, 203, 277, 279, 295, 297, 309, 320, 322, 325, 326, 335, 395, 398, 563, 565, 573], "cd": [4, 17, 22, 29, 31, 32, 35, 36, 45, 127, 129, 203, 280, 295, 297, 298, 305, 335, 395, 398, 400, 553, 560, 561, 563, 565, 571], "sinc": [4, 6, 23, 24, 29, 30, 37, 123, 125, 126, 203, 277, 279, 294, 299, 304, 306, 311, 315, 319, 320, 328, 341, 390, 394, 402, 438, 439, 469, 471, 518, 535, 542, 546, 551, 552, 553], "inherit": [4, 6, 9, 16, 279, 294, 322, 330, 388, 398], "libgrap": [4, 16, 31, 34, 322, 335], "lite": [4, 16, 31, 34, 322, 335], "note": [4, 13, 14, 20, 27, 29, 37, 38, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 284, 294, 297, 299, 300, 304, 306, 310, 315, 316, 319, 321, 322, 323, 331, 332, 333, 341, 380, 382, 390, 394, 402, 405, 414, 415, 418, 422, 435, 436, 437, 438, 439, 440, 446, 447, 452, 455, 457, 459, 460, 461, 462, 464, 466, 468, 469, 471, 472, 473, 474, 475, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 517, 532, 533, 534, 535, 537, 540, 542, 543, 546, 547, 551, 553, 560, 567, 573], "core": [4, 6, 12, 34, 37, 45, 287, 294, 296, 320, 321, 322, 331, 335, 400, 405, 547, 567], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 45, 123, 125, 126, 128, 129, 283, 290, 294, 297, 305, 306, 316, 321, 322, 323, 324, 325, 331, 389, 390, 391, 402, 450, 469, 517, 532, 534, 540, 541, 551, 552, 553, 556], "partition": [4, 286, 398], "worker": [4, 9, 13, 14, 23, 28, 34, 123, 129, 295, 313, 315, 317, 390, 393, 400, 547, 551], "between": [4, 6, 9, 10, 12, 13, 18, 19, 45, 126, 129, 277, 287, 292, 294, 297, 306, 307, 310, 323, 325, 330, 331, 389, 390, 392, 394, 400, 405, 462, 463, 464, 467, 473, 479, 480, 482, 486, 487, 488, 489, 491, 494, 496, 497, 498, 500, 505, 535, 537, 540, 552, 553, 560], "heavili": 4, "reus": [4, 30, 203, 277, 284, 310, 313, 322, 331, 400, 402, 547, 549], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 45, 121, 166, 203, 277, 279, 280, 282, 302, 306, 312, 319, 326, 335, 341, 387, 398, 402, 449, 483, 540, 546, 547, 549, 551, 553, 560], "fulli": [4, 125, 310, 313, 324, 331, 341, 482, 552, 563], "recommend": [4, 27, 30, 36, 37, 45, 279, 287, 293, 296, 299, 306, 310, 319, 320, 321, 325, 394], "locat": [4, 23, 27, 36, 38, 125, 126, 179, 253, 282, 293, 295, 300, 306, 311, 319, 324, 334, 336, 390, 391, 402, 553, 554, 560], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 29, 32, 36, 37, 41, 45, 121, 123, 124, 126, 129, 279, 284, 287, 290, 293, 294, 296, 299, 306, 307, 309, 311, 319, 320, 321, 325, 326, 327, 329, 330, 331, 389, 394, 398, 400, 402, 459, 469, 471, 479, 540, 546, 547, 549, 551, 552, 553, 554, 573], "therebi": [4, 283, 302], "fledg": [4, 12, 320], "coordin": [4, 15, 27, 29, 35, 37, 38, 41, 44, 123, 127, 280, 282, 292, 296, 315, 330, 402, 452, 547, 553, 560, 561, 564, 565, 567], "while": [4, 6, 12, 19, 20, 29, 34, 121, 125, 126, 127, 203, 277, 283, 290, 293, 297, 298, 300, 302, 304, 305, 306, 310, 320, 322, 323, 324, 326, 327, 389, 394, 400, 436, 437, 497, 500, 502, 534, 540, 549, 552, 553, 561], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 41, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 123, 124, 125, 126, 129, 147, 173, 182, 196, 203, 221, 248, 270, 277, 279, 280, 283, 284, 287, 293, 295, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 313, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 328, 331, 341, 357, 358, 375, 388, 390, 392, 394, 397, 399, 401, 402, 405, 441, 452, 459, 462, 464, 467, 471, 474, 476, 477, 478, 494, 502, 503, 504, 527, 530, 532, 540, 546, 547, 549, 551, 552, 553, 554, 571, 572], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 123, 124, 125, 126, 129, 176, 203, 250, 277, 279, 283, 290, 293, 294, 300, 302, 304, 306, 309, 310, 312, 313, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 335, 339, 388, 389, 390, 392, 393, 394, 395, 402, 403, 405, 424, 425, 434, 460, 461, 486, 487, 491, 499, 512, 533, 534, 540, 546, 547, 551, 552, 553, 554, 557], "ship": 4, "6": [4, 10, 17, 18, 22, 31, 147, 221, 290, 296, 297, 304, 305, 306, 321, 328, 331, 389, 394, 400, 405, 424, 443, 472, 473, 474, 491, 505, 507, 513, 514, 517, 520, 524, 525, 533, 535, 540, 553, 555, 563, 566, 567, 571], "graphalyt": [4, 327], "benchmark": [4, 34, 283, 302, 306, 309, 323, 325, 327, 459], "flatten": [4, 13, 317], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 45, 121, 287, 290, 306, 315, 325, 331, 393, 435, 443, 540, 552], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 41, 46, 124, 126, 129, 203, 277, 280, 281, 282, 283, 284, 290, 293, 294, 295, 296, 297, 301, 304, 306, 309, 321, 322, 324, 325, 330, 331, 332, 359, 394, 398, 402, 403, 405, 500, 544, 547, 549, 553, 555, 561, 563, 567, 571], "written": [4, 12, 20, 126, 129, 306, 320, 322, 324, 518, 549, 552, 555, 563], "giraph": [4, 7, 8, 12, 17, 23, 24, 308, 327, 557], "graphx": [4, 7, 8, 12, 17, 24, 308, 327, 557], "app": [4, 15, 16, 17, 18, 33, 127, 279, 332, 333, 335, 340, 343, 366, 372, 375, 389, 402, 545, 546, 552, 563], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 90, 109, 163, 185, 203, 237, 259, 283, 294, 295, 320, 330, 331, 335, 553], "serv": [4, 27, 43, 129, 203, 256, 277, 284, 287, 297, 299, 309, 321, 322, 325, 390, 553, 560], "layer": [4, 6, 45, 293, 294, 297, 310, 313, 322, 325, 327, 388, 389, 392, 396, 400, 572], "cuda": [4, 328], "suit": [4, 36, 290, 295, 310, 325], "gpu": [4, 322, 395], "acceler": [4, 27, 297, 552], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 286, 294, 323, 325, 333, 365, 402, 403, 549, 554, 557, 563], "extend": [4, 9, 17, 23, 283, 297, 302, 304, 305, 306, 327, 332, 389, 397, 398, 486, 552, 563], "loader": [4, 22, 295, 318, 330, 341, 352, 545, 554, 568, 569], "mutabl": [4, 129, 322], "io": [4, 27, 30, 33, 41, 279, 322, 323, 331, 399, 402, 490, 547, 553, 556, 570], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 125, 181, 255, 290, 309, 317, 320, 322, 324, 330, 333, 390, 469, 471, 508, 540, 543, 553, 563], "sub": [4, 12, 14, 18, 306, 309, 319, 332, 392, 394, 552, 557], "helper": [4, 560], "thread": [4, 6, 31, 123, 125, 203, 293, 295, 310, 328, 401], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 46, 47, 78, 80, 81, 124, 130, 204, 282, 287, 294, 306, 313, 325, 330, 333, 401, 552, 563], "buffer": [4, 399], "sync": [4, 333, 399, 552], "serial": [4, 279, 304, 305, 330, 402, 547, 552, 571], "vertex_map": [4, 13, 45, 103, 119, 124, 125, 166, 203, 240, 251, 273, 277, 381, 402, 547], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 45, 124, 127, 129, 284, 293, 294, 296, 297, 300, 302, 304, 305, 310, 319, 320, 323, 325, 331, 388, 389, 390, 396, 398, 400, 401, 402, 403, 450, 459, 469, 471, 474, 493, 534, 539, 540, 551, 552, 553, 554, 560], "map": [4, 6, 13, 45, 121, 124, 129, 150, 151, 169, 180, 193, 203, 224, 225, 277, 282, 285, 300, 302, 304, 306, 323, 330, 389, 398, 402, 532, 547, 553, 554, 568, 571], "intern": [4, 13, 147, 166, 173, 176, 182, 196, 221, 240, 248, 250, 256, 270, 279, 302, 323, 402, 440, 563, 565], "frame": [4, 325], "wrap": [4, 319, 322, 330, 335], "becaus": [4, 37, 294, 299, 302, 306, 325, 388, 391, 405, 535, 552, 553], "reli": [4, 9, 19, 282, 299, 301, 395, 552], "templat": [4, 9, 15, 28, 284, 286, 317, 330, 552], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 39, 287, 290, 294, 299, 304, 306, 310, 313, 314, 315, 325, 394, 398, 401, 468, 491, 534, 540, 552, 554, 555], "multipl": [4, 6, 12, 14, 17, 29, 30, 41, 43, 125, 126, 129, 176, 203, 250, 277, 283, 293, 294, 300, 304, 309, 310, 320, 321, 322, 323, 324, 325, 326, 327, 331, 332, 333, 389, 390, 394, 405, 502, 540, 546, 551, 552, 555, 561], "label": [4, 6, 7, 13, 15, 20, 33, 77, 98, 124, 147, 153, 166, 196, 197, 200, 221, 227, 240, 270, 271, 274, 279, 286, 293, 299, 300, 302, 312, 316, 317, 318, 320, 321, 323, 325, 330, 331, 332, 333, 341, 388, 391, 394, 400, 402, 405, 440, 444, 451, 455, 456, 458, 468, 469, 471, 472, 473, 474, 475, 517, 518, 540, 542, 543, 546, 547, 551, 553, 554, 567, 568, 571, 572], "cannot": [4, 27, 30, 129, 287, 304, 306, 310, 325, 327, 330, 331, 335, 390, 402, 459, 498, 499, 546, 547, 553, 555, 566], "determin": [4, 37, 123, 129, 294, 297, 304, 306, 310, 313, 319, 323, 324, 330, 331, 390, 394, 485, 488, 489, 490, 547], "reason": [4, 287, 302, 304, 310, 389, 390, 520], "jit": 4, "technologi": [4, 292, 294, 326], "compil": [4, 15, 31, 32, 34, 123, 128, 283, 284, 285, 287, 293, 294, 295, 297, 300, 305, 320, 331, 343, 552, 553, 555, 561], "associ": [4, 6, 9, 29, 124, 126, 297, 300, 304, 325, 474, 486, 532, 534, 540, 547, 552, 553], "runtim": [4, 6, 17, 23, 31, 127, 128, 129, 282, 284, 294, 320, 322, 323, 324, 330, 331, 335, 552, 565, 566], "wrapper": [4, 298, 305, 307, 309, 324, 330, 343, 349, 402, 403, 552], "facilit": [4, 20, 295, 297, 304, 309, 310, 313, 325, 389, 552, 553], "task": [4, 6, 7, 14, 34, 37, 41, 93, 294, 296, 306, 309, 310, 312, 314, 315, 316, 317, 318, 320, 322, 323, 325, 389, 400, 552], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 128, 129, 176, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 285, 290, 292, 297, 301, 309, 320, 326, 329, 335, 341, 388, 390, 392, 393, 394, 398, 404, 540, 547, 551, 552, 553, 554, 563, 574], "jar": [4, 8, 22, 23, 35, 39, 203, 297, 331, 553, 563], "read": [4, 8, 20, 24, 37, 125, 279, 283, 290, 298, 300, 303, 314, 319, 320, 321, 322, 388, 389, 394, 399, 400, 402, 438, 439, 538, 540, 541, 545, 547, 549, 553, 571], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 46, 147, 167, 196, 279, 282, 293, 295, 296, 306, 311, 312, 320, 325, 326, 330, 331, 394, 398, 399, 546, 547, 551, 556, 563], "cmake": [4, 31, 32, 36, 128, 287, 395], "script": [4, 32, 37, 129, 297, 327, 328, 359, 388, 389, 400, 403, 564], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 39, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 124, 126, 129, 176, 203, 277, 280, 282, 283, 285, 287, 295, 304, 305, 306, 315, 319, 320, 330, 331, 342, 343, 349, 350, 355, 380, 399, 400, 402, 459, 469, 471, 547, 549, 554, 560], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 294, 299, 306, 310, 313, 321, 323, 324, 325, 390, 392, 523, 549], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 124, 203, 279, 290, 293, 296, 302, 304, 306, 308, 312, 319, 323, 324, 388, 389, 390, 394, 398, 443, 459, 479, 502, 536, 546, 553, 555, 557, 561], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 126, 282, 294, 297, 299, 302, 309, 310, 319, 321, 322, 323, 324, 325, 329, 394, 402, 410, 443, 491, 540, 549, 553, 556, 557, 561], "thei": [4, 6, 20, 24, 27, 30, 31, 125, 290, 294, 299, 304, 306, 309, 315, 320, 323, 325, 327, 388, 389, 397, 402, 446, 454, 459, 487, 489, 490, 533, 534, 540, 546, 547, 549, 552, 553], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 41, 45, 126, 290, 293, 294, 296, 304, 309, 313, 319, 320, 321, 322, 323, 324, 325, 330, 332, 392, 394, 402, 539, 540, 546, 555], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 293, 294, 302, 313, 320, 323, 325, 331, 393, 398, 457, 462, 463, 464, 467, 498, 557], "object": [4, 15, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 147, 148, 154, 169, 174, 180, 191, 193, 196, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 295, 296, 298, 300, 304, 305, 306, 310, 313, 319, 320, 321, 323, 325, 328, 330, 342, 355, 367, 381, 389, 391, 392, 393, 394, 397, 400, 403, 404, 418, 438, 439, 497, 537, 540, 542, 543, 545, 546, 553, 563, 573], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 126, 302, 304, 305, 306, 313, 325, 328, 333, 392, 393, 394, 397, 398, 543, 556, 571], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 46, 129, 287, 294, 299, 320, 330, 398, 401, 547, 549], "state": [4, 6, 9, 10, 12, 24, 27, 34, 294, 309, 323, 324, 326, 328, 399, 402, 459, 462, 463, 464, 465, 467, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 490, 491, 494, 495, 496, 500, 532, 535, 537], "synchron": [4, 6, 10, 12, 14, 15, 320, 552], "explicitli": [4, 13, 297, 330, 390, 459, 547, 553], "implicitli": [4, 341], "main": [4, 6, 30, 34, 37, 124, 129, 147, 166, 167, 173, 176, 182, 196, 203, 277, 279, 283, 294, 297, 302, 305, 306, 327, 388, 397, 400, 405, 547, 553, 572, 573], "logic": [4, 6, 9, 14, 16, 17, 203, 277, 294, 297, 304, 306, 309, 322, 324, 328, 391, 551, 552, 553, 561, 563], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 127, 279, 281, 283, 285, 287, 293, 295, 299, 304, 305, 306, 310, 313, 319, 320, 322, 323, 324, 325, 389, 390, 391, 392, 393, 394, 399, 400, 402, 540, 543, 547, 549, 551, 552, 553, 554, 561, 573], "send": [4, 6, 10, 18, 24, 295, 323, 333, 552, 563], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 46, 47, 319, 320, 323, 325, 333, 394, 398, 549, 552, 563], "messagemanag": [4, 17, 563], "call": [4, 6, 12, 13, 16, 17, 19, 24, 46, 47, 67, 75, 92, 93, 104, 108, 118, 127, 128, 176, 203, 250, 277, 282, 283, 287, 297, 300, 302, 304, 306, 313, 330, 333, 388, 390, 394, 397, 398, 403, 435, 449, 450, 480, 491, 520, 532, 540, 543, 547, 552, 553], "encourag": [4, 6, 15, 24, 37], "fork": [4, 127, 129], "repo": [4, 29, 37, 124, 129, 277, 295, 322, 553, 564, 565], "much": [4, 6, 13, 19, 22, 287, 294, 304, 306, 390, 394, 552], "easier": [4, 32, 36, 37, 43, 304, 322, 323, 324, 394, 547], "begin": [4, 15, 16, 30, 129, 203, 277, 286, 290, 299, 300, 303, 306, 321, 332, 333, 479, 546, 552], "small": [4, 9, 11, 13, 20, 283, 290, 297, 306, 323, 324, 327, 405, 460, 461, 487, 530, 541, 547, 553], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 45, 121, 129, 279, 280, 306, 320, 324, 325, 327, 328, 331, 348, 380, 389, 402, 405, 418, 540, 547, 553], "revis": [4, 14, 17, 328], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 297, 300, 309, 310, 325, 327, 328, 339, 340, 390, 402, 407, 408, 418, 476, 477, 478, 480, 534, 540, 549, 571, 573], "gradual": 4, "avoid": [4, 13, 302, 305, 552, 553], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 126, 283, 287, 290, 293, 294, 296, 297, 301, 305, 306, 307, 309, 310, 313, 314, 315, 320, 321, 322, 326, 327, 331, 375, 389, 390, 392, 394, 396, 400, 401, 414, 438, 439, 459, 494, 552, 563], "singl": [4, 6, 7, 11, 14, 15, 17, 20, 24, 27, 36, 37, 41, 126, 129, 176, 250, 282, 284, 287, 293, 297, 300, 302, 304, 306, 311, 312, 314, 315, 320, 321, 323, 324, 331, 332, 388, 402, 413, 420, 442, 446, 451, 461, 466, 483, 489, 534, 536, 540, 547, 551, 555], "commit": [4, 279, 328, 549], "cmakelist": 4, "txt": [4, 31, 35, 563], "artifact": [4, 17, 23, 29, 36, 295, 297, 311], "grape_engin": [4, 38, 365, 561], "togeth": [4, 9, 10, 20, 41, 294, 306, 315, 320, 328, 394, 398, 441], "share": [4, 6, 30, 31, 37, 126, 306, 311, 320, 322, 323, 552, 554, 565], "bunch": [4, 41, 327, 330], "binari": [4, 15, 27, 31, 129, 325], "choos": [4, 6, 12, 22, 34, 41, 126, 293, 294, 297, 304, 306, 309, 310, 320, 325, 388, 389, 479, 480, 518], "install_prefix": [4, 36, 311, 565], "usr": [4, 553], "look": [4, 15, 18, 20, 27, 123, 203, 282, 293, 306, 319, 335, 401, 546, 549, 553, 554], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 39, 45, 46, 118, 123, 124, 126, 129, 179, 203, 277, 279, 280, 283, 284, 285, 287, 292, 293, 295, 297, 299, 319, 330, 331, 339, 362, 388, 389, 395, 400, 402, 438, 439, 490, 540, 542, 547, 549, 553, 554, 560, 561, 563, 573], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 123, 125, 127, 129, 277, 282, 283, 284, 294, 297, 300, 302, 321, 327, 547], "correct": [4, 6, 14, 37, 38, 294, 299, 394, 402, 405, 552], "unit": [4, 294, 306, 324, 398, 488, 489, 490, 553], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 127, 279, 287, 293, 296, 306, 309, 320, 321, 322, 324, 325, 327, 394, 396, 552], "graphscope_hom": [4, 23, 565], "pwd": [4, 30, 400], "b": [4, 17, 18, 22, 37, 129, 297, 300, 304, 306, 394, 449, 467, 480, 486, 487, 491, 496, 497, 498, 500, 528, 536, 540, 563, 571], "master": [4, 6, 19, 22, 23, 24, 31, 129, 283, 317, 563], "depth": [4, 121, 129, 280, 295, 300, 321, 388, 400, 405, 572], "7br": 4, "gstest": [4, 19, 22, 23, 30, 129, 563, 565], "gs_test_dir": [4, 22, 33, 129], "app_test": 4, "sh": [4, 31, 35, 129, 297, 305, 395, 553, 571], "test_dir": 4, "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 39, 124, 203, 277, 296, 297, 298, 301, 305, 311, 312, 319, 328, 395, 400, 565], "against": [4, 14, 37, 295, 331, 522], "compar": [4, 19, 294, 297, 300, 302, 304, 306, 323, 328, 330, 331, 391, 459, 546], "ground": [4, 325], "truth": [4, 325], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 129, 283, 287, 292, 293, 294, 296, 301, 302, 304, 307, 309, 310, 313, 314, 315, 317, 318, 320, 322, 323, 325, 326, 327, 331, 335, 388, 391, 393, 397, 399, 400, 404, 459, 462, 469, 471, 480, 487, 488, 489, 490, 491, 499, 553, 554], "broad": [6, 322], "spectrum": [6, 322, 405, 532], "central": [6, 15, 43, 290, 309, 310, 321, 322, 325, 326, 331, 394, 405, 517, 552], "match": [6, 15, 123, 125, 173, 203, 248, 277, 280, 283, 284, 294, 295, 296, 298, 299, 300, 320, 321, 322, 331, 439, 459, 467, 469, 471, 498, 534, 571], "mine": [6, 15, 320, 322, 323], "philosophi": [6, 24, 322], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 280, 285, 293, 294, 295, 296, 298, 302, 305, 307, 309, 310, 317, 318, 319, 320, 321, 322, 324, 333, 388, 389, 390, 392, 394, 397, 400, 459, 467, 479, 532, 553, 561, 573], "stronger": [6, 322], "flexibl": [6, 12, 13, 23, 123, 126, 297, 301, 306, 309, 320, 321, 322, 547, 551], "flow": [6, 322, 323, 388, 530], "oper": [6, 9, 12, 15, 30, 31, 36, 47, 108, 118, 121, 123, 129, 166, 167, 173, 182, 203, 240, 241, 248, 256, 277, 279, 282, 283, 284, 287, 290, 292, 293, 294, 296, 297, 301, 302, 304, 309, 310, 313, 319, 320, 322, 323, 324, 325, 326, 331, 333, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 360, 361, 362, 364, 365, 368, 369, 370, 371, 389, 390, 391, 392, 393, 394, 396, 397, 399, 401, 402, 422, 501, 502, 540, 543, 545, 547, 549, 552, 553, 560], "arbitrari": [6, 304, 306, 322, 392, 467, 471, 487, 488, 489, 490, 540, 543, 553, 571], "beyond": [6, 24, 322, 326, 500], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 41, 43, 45, 121, 124, 129, 279, 280, 282, 283, 284, 292, 293, 294, 295, 297, 298, 299, 300, 304, 305, 306, 309, 311, 319, 322, 323, 324, 325, 328, 394, 395, 398, 400, 402, 418, 470, 534, 540, 547, 551, 552, 553, 560, 564, 565], "divers": [6, 10, 12, 34, 126, 292, 294, 322, 323, 389, 549], "easi": [6, 7, 12, 36, 121, 283, 290, 293, 294, 296, 297, 298, 305, 306, 307, 309, 312, 313, 319, 320, 321, 322, 326, 389, 394, 398, 560], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 279, 283, 287, 290, 297, 300, 302, 304, 306, 309, 319, 320, 321, 322, 323, 324, 329, 333, 335, 388, 394, 398, 402, 403, 542, 543, 549, 552, 557, 563, 567], "few": [6, 29, 283, 287, 293, 297, 322, 552], "satisfactori": [6, 322, 325], "major": [6, 12, 13, 14, 300, 323, 330], "recent": [6, 392, 553], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 287, 292, 294, 307, 310, 313, 319, 320, 322, 323, 324, 325, 326, 327, 331, 332, 381, 392, 394, 396, 398, 402, 403, 544, 547, 549, 551, 563, 568, 573], "focu": [6, 41, 297, 320, 324, 327, 398], "hand": [6, 30, 33, 294, 302, 304, 520], "point": [6, 13, 14, 22, 37, 43, 45, 129, 294, 297, 304, 313, 323, 388, 443, 468, 497, 500, 540, 551, 553, 554, 555, 560], "breadth": [6, 331, 405], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 45, 121, 124, 125, 129, 166, 176, 203, 277, 279, 280, 284, 287, 290, 294, 295, 296, 297, 298, 300, 304, 305, 306, 310, 314, 315, 319, 321, 322, 324, 325, 331, 332, 388, 389, 394, 396, 398, 402, 405, 409, 439, 455, 458, 467, 480, 483, 494, 495, 496, 497, 498, 501, 534, 539, 540, 543, 546, 547, 549, 552, 553, 554, 555], "search": [6, 37, 284, 292, 297, 299, 310, 320, 323, 325, 327, 331, 405, 569], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 290, 320, 323, 326, 328, 331, 332, 405, 543, 546, 551, 563], "shortest": [6, 7, 19, 24, 294, 321, 323, 331, 405, 555], "leav": [6, 306, 402, 440, 450], "varieti": [6, 12, 34, 290, 320, 327], "suffer": [6, 290], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 126, 279, 283, 284, 287, 290, 292, 297, 299, 302, 305, 306, 309, 310, 313, 319, 320, 321, 322, 323, 324, 325, 326, 327, 335, 392, 394, 396, 473, 494, 551, 552, 554, 556], "limit": [6, 9, 13, 22, 47, 126, 280, 285, 287, 293, 297, 298, 299, 300, 302, 307, 310, 323, 324, 325, 327, 328, 547, 566, 571], "phase": [6, 16, 23, 24, 297, 389, 394], "propag": [6, 7, 9, 14, 36, 320, 321, 323, 325, 331, 394, 412, 502], "short": [6, 322, 327, 328, 420, 552, 553], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 203, 277, 304, 306, 325, 399, 459, 482, 553, 571], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 129, 147, 173, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 297, 304, 309, 310, 320, 323, 325, 327, 395, 398, 540, 549, 553, 563, 564], "Such": [6, 13, 281, 324, 327, 362, 367, 499, 508], "abstract": [6, 43, 290, 309, 313, 316, 320, 321, 322, 388, 389, 396, 398, 399, 554], "bring": [6, 41, 297], "product": [6, 12, 32, 121, 129, 287, 313, 320, 324, 327, 333, 389, 390, 394, 560, 571], "sacrific": 6, "almost": [6, 22, 306, 475, 552], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 124, 126, 279, 287, 306, 317, 319, 321, 322, 327, 330, 332, 392, 394, 398, 399, 537, 546, 551, 553, 555, 556, 564, 566, 570], "At": [6, 12, 14, 15, 20, 34, 37, 45, 203, 294, 305, 306, 389, 399, 553, 555], "advanc": [6, 7, 15, 45, 294, 297, 312, 313, 322, 486], "pose": 6, "challeng": [6, 9, 277, 289, 320, 552], "repres": [6, 9, 12, 15, 123, 125, 126, 277, 290, 294, 299, 302, 306, 310, 312, 313, 316, 319, 320, 321, 322, 323, 325, 328, 330, 331, 332, 339, 366, 389, 390, 391, 392, 394, 398, 400, 402, 446, 479, 487, 488, 489, 490, 491, 499, 506, 509, 513, 521, 530, 532, 534, 535, 540, 544, 547, 552, 553], "non": [6, 9, 27, 129, 304, 327, 330, 333, 391, 429, 430, 450, 469, 471, 474, 498, 502, 509, 527, 540, 541], "ones": [6, 9, 326, 331, 396], "distil": 6, "critic": [6, 13, 310, 331], "context": [6, 15, 17, 18, 20, 27, 31, 46, 47, 67, 75, 92, 93, 104, 108, 118, 121, 124, 126, 280, 284, 302, 322, 324, 331, 333, 338, 339, 340, 346, 347, 362, 367, 370, 371, 373, 382, 385, 398, 402, 405, 530, 545, 547, 552, 560, 563], "fall": 6, "meet": [6, 15, 18, 29, 37, 279, 290, 294, 296, 313, 320, 325, 392, 393, 459, 488, 489, 490, 555, 557], "therefor": [6, 12, 15, 290, 294, 296, 299, 300, 302, 304, 306, 310, 321, 388, 389, 394, 486, 552, 561], "fulfil": [6, 15, 18, 283, 322], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 45, 123, 125, 127, 280, 287, 290, 297, 302, 304, 306, 307, 312, 319, 323, 325, 326, 389, 390, 405, 540, 549, 552, 560, 561], "must": [6, 13, 24, 27, 30, 37, 54, 124, 125, 126, 137, 211, 287, 293, 304, 306, 320, 330, 332, 341, 389, 390, 392, 393, 394, 402, 404, 405, 418, 457, 459, 467, 470, 480, 482, 484, 487, 489, 491, 499, 502, 538, 540, 542, 546, 552, 553], "race": 6, "schedul": [6, 23, 36, 68, 320, 322, 547], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 41, 46, 166, 240, 287, 293, 294, 295, 297, 299, 300, 302, 306, 319, 330, 331, 332, 349, 365, 390, 402, 459, 471, 483, 487, 497, 500, 518, 534, 540, 543, 546, 547, 551, 552, 553, 557, 560], "so": [6, 12, 13, 30, 37, 41, 124, 126, 203, 277, 282, 284, 287, 293, 294, 296, 301, 305, 306, 310, 313, 315, 319, 320, 322, 331, 335, 388, 394, 396, 415, 450, 455, 468, 469, 470, 473, 488, 489, 490, 501, 534, 540, 552, 553, 567], "middlewar": 6, "flashwar": 6, "hide": [6, 290], "automat": [6, 9, 12, 14, 34, 46, 123, 125, 283, 293, 294, 297, 298, 302, 305, 309, 319, 320, 323, 324, 325, 327, 332, 400, 402, 540, 553, 555, 556, 573], "adapt": [6, 22, 123, 279, 283, 294, 297, 325, 327, 328, 555, 556], "70": [6, 15, 571], "40": [6, 15, 328, 390, 391, 393, 467, 533], "commonli": [6, 297, 300, 304, 309, 313, 319], "now": [6, 7, 20, 23, 27, 45, 121, 124, 203, 277, 280, 283, 293, 295, 297, 299, 300, 305, 306, 312, 331, 398, 471, 553, 555, 568], "succinct": [6, 302], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 43, 45, 128, 129, 203, 277, 287, 290, 292, 294, 297, 306, 307, 308, 310, 313, 320, 323, 324, 325, 326, 327, 330, 335, 390, 391, 392, 394, 395, 396, 397, 540, 547, 557], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 45, 121, 280, 284, 299, 304, 306, 317, 319, 323, 324, 398, 402, 552, 554, 560, 564], "demonstr": [6, 16, 124, 279, 293, 294, 297, 309, 314, 316, 320, 321, 323, 325, 327, 332, 388, 400, 402, 547, 552], "up": [6, 13, 20, 23, 37, 121, 129, 280, 299, 304, 306, 309, 311, 313, 326, 333, 398, 401, 439, 443, 467, 534, 552, 553, 570], "92": [6, 405], "bulk": [6, 15, 45, 124, 125, 166, 167, 203, 240, 277], "bsp": [6, 15], "paradigm": [6, 15, 309, 313, 320, 388, 394], "primari": [6, 15, 124, 125, 126, 147, 150, 151, 196, 203, 221, 224, 225, 270, 277, 283, 285, 302, 320, 327, 553], "constitut": [6, 316, 319], "superstep": [6, 16, 17, 24, 333], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 125, 126, 129, 283, 293, 306, 319, 322, 323, 324, 328, 339, 389, 391, 394, 402, 446, 449, 459, 462, 463, 464, 465, 467, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 491, 494, 495, 496, 500, 530, 532, 535, 537, 542, 552], "maintain": [6, 10, 14, 35, 36, 125, 284, 302, 304, 320, 323, 324, 553], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 126, 294, 295, 310, 331, 333, 390, 391, 394, 400, 402, 403, 405, 435, 540, 547, 553, 560], "describ": [6, 27, 36, 37, 38, 44, 45, 126, 127, 129, 279, 287, 293, 295, 306, 310, 311, 320, 324, 325, 332, 389, 392, 394, 399, 400, 439, 443, 459, 460, 461, 464, 469, 471, 472, 497, 498, 511, 518, 520, 534, 536, 537, 548, 551, 552, 553, 561, 566], "vsize": [6, 15], "size_t": [6, 13, 286, 330, 333, 399, 549, 552], "vertexmap": [6, 13, 15, 46, 103, 177, 203, 251, 277, 286], "condit": [6, 9, 14, 24, 27, 38, 123, 294, 297, 306, 313, 322, 324, 328, 459, 488, 489, 490, 498, 499, 552], "f": [6, 20, 33, 45, 124, 279, 284, 293, 295, 312, 317, 318, 321, 394, 405, 492, 493, 539, 553, 561, 567], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 121, 128, 176, 250, 280, 290, 293, 295, 299, 302, 304, 306, 310, 312, 313, 316, 320, 321, 325, 328, 330, 359, 367, 375, 388, 394, 396, 400, 402, 403, 487, 489, 491, 532, 544, 546, 553, 563, 564, 567, 572], "form": [6, 20, 118, 294, 301, 302, 304, 306, 310, 313, 324, 325, 331, 388, 390, 391, 394, 441, 461, 491, 506, 508, 511, 514, 518, 540, 546], "special": [6, 20, 283, 285, 297, 306, 320, 389, 508, 524, 534, 557], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 45, 123, 129, 293, 294, 295, 296, 306, 312, 321, 331, 332, 405, 415, 446, 450, 452, 463, 469, 471, 473, 475, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 519, 528, 532, 533, 537, 540, 553, 563], "omit": [6, 284, 319, 332, 413, 554, 573], "filter": [6, 15, 23, 123, 294, 297, 307, 319, 324, 331, 332, 532, 546, 552, 571], "semant": [6, 294, 313, 393, 552], "unchang": 6, "edgemap": [6, 15, 46, 103, 177, 203, 251, 277], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 44, 45, 67, 77, 120, 122, 126, 129, 151, 153, 203, 225, 227, 277, 278, 279, 282, 283, 285, 286, 287, 293, 295, 296, 299, 300, 306, 310, 311, 313, 319, 321, 323, 324, 325, 327, 330, 331, 332, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 385, 387, 390, 391, 392, 393, 394, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 544, 546, 547, 549, 551, 552, 553, 555, 560, 563, 564, 565, 571, 573], "satisfi": [6, 9, 24, 32, 283, 296, 306, 324, 327, 331, 335, 399, 405, 457, 487, 491, 498, 499, 557], "h": [6, 9, 15, 16, 20, 36, 41, 279, 310, 311, 328, 339, 405, 416, 419, 440, 467, 471, 487, 532, 539, 540, 552, 564, 569], "conduct": [6, 15, 306, 328, 394], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 43, 123, 124, 126, 203, 277, 280, 282, 283, 284, 290, 293, 294, 297, 299, 300, 302, 304, 306, 307, 308, 309, 313, 319, 320, 321, 323, 324, 325, 326, 327, 389, 394, 464, 469, 471, 474, 479, 482, 487, 532, 540, 549, 552, 557, 560], "dynam": [6, 12, 34, 281, 283, 294, 309, 320, 322, 323, 325, 331, 342, 355, 460, 461, 543, 549, 553], "even": [6, 8, 20, 294, 299, 306, 322, 323, 396, 402, 405, 469, 479, 497, 499, 500, 540, 552], "virtual": [6, 9, 23, 126, 277, 296, 299, 321, 330, 398, 399], "gener": [6, 9, 13, 14, 17, 27, 34, 41, 45, 46, 80, 81, 120, 122, 126, 129, 203, 278, 279, 284, 290, 294, 297, 301, 302, 304, 306, 310, 313, 319, 320, 321, 322, 323, 325, 331, 340, 388, 389, 390, 394, 400, 402, 404, 405, 540, 541, 545, 547, 549, 551, 552, 553, 554, 555, 561], "index": [6, 12, 13, 31, 45, 55, 124, 125, 152, 166, 203, 226, 240, 277, 279, 286, 292, 310, 313, 319, 325, 330, 331, 332, 390, 391, 399, 402, 404, 405, 414, 438, 439, 469, 471, 472, 473, 475, 552, 569, 573], "pre": [6, 29, 32, 287, 294, 297, 306, 312, 316, 321, 324, 547, 566], "conveni": [6, 29, 277, 287, 293, 299, 306, 310, 322, 394, 538, 540], "revers": [6, 20, 300, 306, 348, 351, 404, 405, 483, 491, 540], "exchang": [6, 14], "chosen": [6, 469, 476, 477, 478, 479, 480, 491, 495, 535], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 320, 438, 439, 475, 552, 557, 563], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 45, 287, 293, 323, 395, 398, 547, 553, 565], "mode": [6, 15, 27, 32, 36, 45, 121, 127, 282, 287, 297, 305, 314, 317, 319, 330, 331, 332, 381, 388, 392, 398, 400, 402, 542, 547, 553, 557, 561, 573], "push": [6, 12, 34, 37, 123, 285, 294, 323, 398], "anoth": [6, 9, 10, 20, 36, 126, 282, 294, 304, 306, 319, 320, 321, 325, 333, 469, 502, 540, 552, 555, 556], "final": [6, 9, 13, 14, 17, 19, 24, 166, 203, 277, 294, 299, 306, 310, 315, 320, 324, 330, 388, 394, 396, 482, 502, 540, 554], "reduc": [6, 9, 13, 14, 15, 17, 283, 294, 297, 299, 305, 313, 389, 392, 488, 489, 490, 540, 553], "commut": 6, "alwai": [6, 45, 306, 315, 332, 436, 437, 476, 478, 497, 500, 534, 552, 560], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 47, 75, 92, 93, 104, 129, 167, 182, 240, 241, 256, 282, 283, 297, 304, 313, 319, 322, 324, 327, 391, 394, 399, 405, 424, 425, 467, 469, 471, 486, 497, 540, 542, 547, 552], "sometim": [6, 27, 306, 319, 450, 510], "similarli": [6, 19, 20, 126, 282, 295, 306, 323, 405, 443, 469, 471, 487, 490, 497, 540, 561], "suppli": [6, 287, 302, 489], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 129, 293, 297, 306, 331, 392, 394, 397, 400, 405, 415, 460, 461, 469, 471, 472, 474, 475, 476, 478, 483, 487, 488, 489, 490, 491, 494, 531, 540, 542, 547], "auxiliari": [6, 15, 16, 306], "union": [6, 402, 468, 568], "minu": [6, 304, 443], "intersect": [6, 297, 324, 541], "add": [6, 15, 19, 20, 23, 29, 33, 37, 147, 196, 203, 221, 270, 277, 280, 287, 300, 304, 306, 319, 321, 330, 333, 340, 341, 350, 389, 400, 402, 407, 408, 409, 459, 466, 479, 497, 500, 502, 518, 540, 543, 547, 552, 553, 564, 567, 568, 573], "getv": [6, 294], "besid": [6, 10, 38, 297, 399, 400], "combin": [6, 14, 18, 34, 126, 292, 294, 297, 306, 309, 320, 321, 324, 388, 389, 390, 394, 540, 547, 556, 563], "primit": [6, 322], "natur": [6, 12, 13, 24, 126, 290, 302, 306], "multi": [6, 31, 127, 292, 302, 306, 309, 310, 313, 320, 322, 324, 325, 326, 327, 331, 392, 394, 396, 549, 553], "tradit": [6, 294, 297, 299, 301, 302, 325, 517], "awkward": 6, "supplement": 6, "perspect": [6, 24, 322], "whole": [6, 9, 12, 24, 34, 283, 293, 294, 306, 310, 320, 322, 324, 325, 396, 551, 553, 556], "pick": [6, 306, 328, 482, 497, 500], "transfer": [6, 290, 292, 309, 324, 326, 571], "intuit": [6, 283, 294, 302, 309, 324, 547], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 47, 57, 80, 82, 283, 292, 294, 300, 306, 309, 310, 313, 319, 320, 323, 325, 326, 328, 332, 388, 394, 396, 398, 399, 405, 446, 540, 546, 547, 552, 553], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 125, 129, 294, 296, 306, 312, 313, 323, 325, 328, 389, 390, 391, 394, 400], "input": [6, 9, 12, 13, 15, 17, 22, 24, 45, 76, 119, 124, 125, 128, 147, 149, 166, 196, 199, 203, 221, 223, 240, 270, 273, 277, 290, 297, 310, 312, 313, 316, 319, 320, 321, 324, 325, 331, 350, 354, 375, 388, 389, 390, 391, 392, 394, 397, 400, 403, 405, 473, 487, 489, 491, 497, 498, 532, 540, 543, 544, 547, 552, 553, 567, 572], "second": [6, 13, 27, 125, 283, 290, 300, 306, 310, 319, 324, 327, 328, 332, 396, 485, 486, 494, 495, 496, 497, 501, 539, 540, 547, 553, 554], "fundament": [6, 9, 126, 294, 322], "modul": [6, 8, 9, 15, 19, 20, 23, 129, 292, 294, 299, 304, 309, 317, 320, 321, 322, 324, 325, 401, 539, 569], "produc": [6, 38, 41, 124, 294, 328, 331, 340, 388, 400, 402, 403, 405, 459, 473, 475, 483, 544, 553], "abil": [6, 12, 34, 299, 302, 306, 313, 320, 553], "activ": [6, 9, 23, 24, 30, 284, 296, 297, 315, 321, 325, 400, 547], "dens": [6, 310, 323, 325, 391, 400], "spars": [6, 13, 310, 325, 388, 391, 467, 540, 543], "dispatch": [6, 34, 320, 330], "kernel": [6, 476], "auto": [6, 14, 16, 34, 279, 286, 306, 333, 549, 552, 554], "switch": [6, 12, 23, 34, 121, 124, 129, 203, 277, 279, 280, 297, 305, 323, 497, 500, 552, 560], "prove": [6, 24, 532], "world": [6, 9, 13, 290, 297, 304, 306, 320, 321, 323, 330, 405, 460, 461, 487], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 126, 203, 299, 304, 306, 319, 322, 390, 391, 392, 398, 399, 402, 466, 473, 478, 486, 487, 491, 497, 540, 546, 549, 552], "co": [6, 23, 290, 321, 389, 567], "lead": [6, 17, 24, 287, 297, 306, 325, 469, 471], "broadcast": [6, 330, 552], "mirror": [6, 7, 10, 24, 27, 32, 296, 311, 312], "On": [6, 27, 30, 37, 283, 294, 302, 304, 331, 474, 537, 552], "contrari": 6, "total": [6, 8, 12, 34, 279, 290, 294, 295, 296, 305, 306, 317, 333, 415, 459, 482, 499, 505, 540, 553, 554, 567], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 123, 129, 147, 221, 279, 280, 285, 287, 294, 295, 297, 298, 301, 302, 304, 305, 306, 317, 318, 321, 328, 339, 388, 390, 391, 393, 394, 395, 405, 411, 416, 418, 419, 424, 425, 443, 445, 446, 455, 463, 466, 468, 475, 484, 486, 491, 500, 507, 510, 511, 517, 518, 524, 526, 533, 534, 535, 540, 542, 543, 547, 552, 553, 554, 555, 556, 563, 566, 567, 571], "redund": 6, "programm": [6, 17, 320, 335], "scope": [6, 23, 37, 297, 322, 402], "disabl": [6, 31, 129, 295, 299, 328, 547], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 43, 203, 277, 283, 285, 290, 294, 295, 297, 301, 302, 306, 307, 308, 309, 310, 311, 320, 323, 324, 325, 327, 335, 392, 394, 395, 396, 398, 459, 552, 560], "katz": [6, 331, 405], "eigenvector": [6, 331, 405, 532], "harmon": 6, "coeffici": [6, 19, 331, 405], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 46, 101, 123, 126, 127, 203, 287, 296, 297, 299, 302, 304, 305, 312, 320, 322, 327, 328, 331, 395, 402, 460, 461, 476, 478, 491, 497, 518, 540, 549, 551, 552, 553, 560, 563, 566], "color": [6, 19, 20, 306, 540], "biconnect": 6, "bridg": [6, 292, 322], "seven": [6, 400, 439], "strongli": [6, 36, 45, 296, 299, 306, 394, 479], "cut": [6, 12, 24, 525], "k": [6, 20, 37, 221, 270, 286, 295, 306, 310, 320, 321, 322, 324, 331, 332, 392, 405, 442, 450, 460, 461, 462, 463, 465, 467, 468, 469, 476, 479, 488, 489, 490, 492, 495, 496, 497, 498, 499, 500, 505, 540, 546, 552, 567, 571], "decomposit": [6, 297, 321, 405], "degeneraci": 6, "onion": 6, "minim": [6, 11, 45, 297, 323, 400, 491, 492, 513, 539], "domin": [6, 405, 552], "cycl": [6, 322, 324, 327, 330, 407, 443, 444, 447, 458, 480, 484, 505, 507, 523, 527], "triangl": [6, 33, 297, 306, 321, 324, 331, 405, 502, 506, 510, 514, 526, 541, 563, 567], "acycl": [6, 322, 534], "cyclic": [6, 297, 320, 322, 324, 447], "diamond": [6, 510], "rectangl": 6, "tail": [6, 279, 293, 299, 304, 306, 322, 561], "approxim": [6, 297, 459, 532], "densest": 6, "articlerank": 6, "hyperlink": [6, 331, 405], "induc": [6, 302, 304, 331, 353, 416, 419, 435, 483, 540], "topic": [6, 7, 296, 312, 321, 331, 553], "person": [6, 7, 30, 33, 45, 124, 125, 126, 147, 166, 173, 196, 203, 221, 240, 248, 270, 277, 279, 284, 293, 296, 297, 299, 302, 304, 306, 319, 321, 402, 520, 529, 540, 543, 546, 551, 552, 553, 554, 568, 573], "standard": [6, 35, 43, 280, 282, 292, 294, 297, 306, 307, 319, 322, 403, 473, 488, 489, 490, 552], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 306, 455, 458, 483], "four": [6, 9, 12, 20, 316, 321, 322, 330, 388, 391, 400, 487, 491, 552], "random": [6, 28, 31, 313, 315, 320, 328, 392, 393, 394, 397, 400, 441, 452, 459, 462, 463, 464, 465, 467, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 500, 532, 535, 537, 539, 547], "give": [7, 12, 13, 31, 34, 125, 173, 296, 306, 312, 319, 328, 394, 402, 467, 487, 507, 539, 540], "quick": [7, 296, 312, 553, 570], "ll": [7, 13, 20, 29, 124, 125, 312], "python3": [7, 23, 27, 28, 30, 31, 32, 35, 36, 41, 45, 127, 129, 277, 287, 295, 296, 312, 317, 321, 563, 564, 565, 566], "pip": [7, 27, 30, 31, 32, 127, 128, 282, 287, 293, 296, 312, 321, 398, 553, 566, 570], "upgrad": [7, 23, 32, 296, 312, 570], "occur": [7, 9, 14, 32, 287, 304, 312, 553], "veri": [7, 13, 32, 124, 290, 294, 296, 306, 309, 312, 319, 321, 325, 390, 392, 563], "speed": [7, 32, 283, 285, 306, 311, 312, 322, 401, 467, 540], "try": [7, 17, 23, 29, 32, 36, 41, 46, 47, 67, 75, 92, 93, 104, 108, 118, 176, 203, 279, 285, 287, 290, 296, 297, 305, 311, 312, 315, 316, 321, 329, 331, 418, 459, 543, 547, 567], "site": [7, 32, 296, 312], "aliyun": [7, 27, 32, 296, 311, 312, 328, 547, 564], "pypi": [7, 27, 32, 287, 296, 298, 312, 566], "trust": [7, 27, 32, 296, 312], "host": [7, 15, 17, 22, 23, 27, 28, 32, 45, 46, 47, 67, 75, 92, 93, 100, 104, 108, 118, 121, 125, 196, 270, 282, 290, 295, 296, 299, 305, 312, 319, 328, 330, 331, 332, 543, 547, 551, 563, 571, 573], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 45, 46, 121, 127, 129, 203, 277, 282, 287, 293, 296, 297, 312, 321, 398, 487, 489, 540, 543, 553, 560, 565], "everyth": [7, 312, 321, 552], "job": [7, 13, 23, 45, 46, 93, 166, 167, 203, 240, 241, 277, 290, 294, 312, 320, 321, 322, 326, 330, 365, 389, 547, 553], "modern_graph": [7, 30, 33, 45, 124, 125, 129, 166, 203, 277, 293, 296, 321, 554, 560], "gremlin": [7, 29, 33, 106, 129, 203, 287, 290, 293, 294, 295, 296, 297, 303, 307, 310, 313, 320, 321, 322, 326, 327, 329, 359, 394, 403, 547, 553, 561, 566, 567, 569, 574], "apach": [7, 17, 22, 23, 31, 292, 297, 302, 305, 308, 309, 320, 321, 324, 551, 553, 557, 563, 565, 569], "tinkerpop": [7, 280, 290, 292, 293, 295, 296, 305, 309, 321, 322, 403, 553, 569], "org": [7, 17, 23, 46, 203, 279, 280, 287, 298, 305, 312, 315, 316, 317, 321, 323, 331, 405, 463, 464, 465, 479, 482, 489, 502, 506, 507, 508, 509, 511, 512, 513, 519, 520, 521, 522, 524, 525, 526, 527, 532, 553, 563, 566, 567, 571], "doc": [7, 16, 17, 30, 37, 45, 46, 121, 122, 278, 321, 322, 330, 334, 336, 402, 489, 570], "tutori": [7, 8, 12, 14, 24, 29, 293, 295, 296, 303, 309, 314, 319, 321, 323, 325, 400, 489, 557], "trigger": [7, 14, 15, 18, 37, 313, 321, 341, 555], "ret": [7, 18, 305, 321, 563, 568], "selector": [7, 15, 33, 38, 321, 330, 332, 340, 346, 347, 357, 358, 362, 370, 371, 402, 545, 547, 551, 563, 568], "homogen": [7, 310, 319, 321, 325, 390], "pg": [7, 321, 331, 547, 551, 552], "none": [7, 9, 20, 27, 31, 118, 123, 166, 300, 315, 317, 318, 319, 321, 331, 332, 339, 346, 347, 350, 353, 357, 358, 359, 360, 362, 365, 367, 370, 371, 375, 381, 383, 387, 388, 389, 394, 402, 403, 404, 405, 413, 417, 419, 420, 424, 425, 434, 435, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 532, 534, 535, 537, 540, 542, 543, 544, 547, 551, 552, 553, 568, 572, 573], "know": [7, 8, 30, 33, 38, 45, 124, 125, 126, 147, 166, 203, 221, 240, 248, 277, 293, 303, 304, 306, 314, 319, 321, 324, 389, 390, 398, 402, 551, 553, 554, 568, 571, 573], "src": [7, 13, 15, 16, 17, 18, 30, 34, 147, 203, 221, 277, 286, 290, 297, 302, 305, 312, 313, 316, 319, 321, 331, 332, 339, 388, 390, 402, 546, 549, 552, 553, 555, 563, 567, 572, 573], "our": [7, 12, 13, 17, 32, 34, 36, 37, 41, 45, 124, 125, 126, 129, 280, 290, 294, 297, 300, 302, 311, 321, 323, 324, 325, 327, 328, 329, 395, 396, 405, 553, 555, 563], "learn": [7, 27, 32, 36, 37, 38, 41, 45, 290, 294, 296, 309, 313, 314, 315, 317, 322, 323, 326, 329, 383, 389, 392, 393, 394, 395, 398, 400, 545, 547, 567, 569], "technic": [7, 312, 396, 534, 540], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 46, 75, 123, 282, 285, 287, 290, 295, 306, 320, 326, 390, 400, 547, 553], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 283, 290, 293, 295, 297, 301, 305, 306, 307, 309, 310, 320, 321, 322, 323, 325, 326, 327, 390, 392, 394, 396, 401, 469, 480, 487, 539, 552], "usag": [7, 17, 29, 31, 32, 36, 37, 44, 75, 100, 127, 128, 282, 304, 306, 307, 311, 312, 313, 332, 391, 392, 393, 397, 402, 459, 540, 547, 553, 554], "section": [8, 13, 27, 29, 123, 125, 126, 127, 297, 303, 306, 310, 314, 320, 394, 395, 402, 439, 552, 553], "assum": [8, 23, 27, 30, 277, 279, 293, 303, 306, 314, 321, 389, 402, 438, 499, 538, 540, 547, 551, 552, 567], "getting_start": [8, 282, 303, 314], "most": [8, 9, 13, 15, 22, 33, 38, 45, 126, 129, 283, 287, 294, 297, 299, 300, 304, 306, 310, 319, 321, 323, 325, 327, 328, 332, 388, 390, 394, 396, 398, 402, 460, 461, 485, 488, 489, 490, 551, 553], "suffici": [8, 17, 287, 320, 389], "louvain": [8, 323, 331, 563], "social": [8, 126, 290, 295, 306, 320, 323, 325, 328, 467, 517, 532, 541], "scientist": [8, 309, 327], "familiar": [8, 14, 16, 29, 294], "manipul": [8, 11, 19, 20, 283, 306, 309, 324, 327, 329, 330, 540], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 277, 283, 284, 300, 319, 330, 392, 393, 397, 547, 563], "pydata": [8, 326], "eco": 8, "still": [8, 24, 27, 34, 38, 256, 290, 297, 306, 323, 418, 547, 552, 553], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 46, 176, 250, 282, 283, 290, 297, 299, 300, 302, 304, 306, 308, 310, 313, 319, 325, 330, 389, 392, 394, 395, 396, 397, 532, 540, 543, 547, 553, 557], "migrat": [8, 294, 312, 315, 316, 321, 322, 327, 549, 567], "transpar": [8, 320], "don": [8, 17, 23, 30, 33, 36, 37, 287, 293, 306, 341, 434, 540, 553], "autom": [9, 29, 322], "abl": [9, 24, 27, 203, 277, 293, 322, 393, 497, 552, 553], "batch": [9, 12, 19, 47, 67, 125, 295, 305, 310, 313, 317, 318, 322, 325, 388, 391, 393, 394, 396, 398, 400, 404, 553, 572], "counterpart": [9, 309, 322], "redesign": [9, 322], "underli": [9, 43, 290, 294, 297, 306, 322, 396, 552], "equip": [9, 297, 308, 309, 322, 328, 557], "polici": [9, 282, 287, 322, 330, 547], "memori": [9, 12, 23, 24, 27, 34, 75, 125, 126, 283, 287, 290, 292, 302, 305, 309, 311, 314, 315, 317, 320, 322, 323, 325, 326, 327, 328, 388, 389, 390, 396, 400, 402, 540, 547, 553, 556, 565, 566], "todai": 9, "static": [9, 16, 31, 147, 166, 167, 173, 176, 182, 196, 203, 240, 279, 297, 305, 330, 553, 555], "recomput": 9, "costli": 9, "consum": [9, 287, 297, 325, 396, 399], "especi": [9, 319], "trillion": 9, "commerc": [9, 320, 323], "constantli": 9, "issu": [9, 17, 32, 37, 129, 279, 287, 290, 293, 296, 297, 305, 322, 323, 327, 463, 464, 465, 529, 566], "involv": [9, 13, 37, 41, 283, 290, 294, 297, 306, 310, 313, 320, 323, 324, 325, 326, 327], "adjust": [9, 12, 123, 287], "old": [9, 12, 14, 32, 34, 299, 547], "typic": [9, 24, 45, 121, 123, 283, 290, 302, 304, 306, 320, 323, 324, 327, 389, 394, 469, 540, 546, 552], "often": [9, 37, 126, 283, 290, 293, 305, 320, 323, 324, 325, 327, 390, 391, 394, 540, 553, 561], "overlap": [9, 547], "intervent": 9, "burden": [9, 15, 390], "expert": 9, "light": 9, "overal": [9, 325], "verifi": [9, 27, 38, 290, 293, 295, 297, 300, 328, 394], "characterist": [9, 297, 302, 313, 320, 325, 388, 393], "deduc": [9, 402, 573], "appropri": [9, 27, 41, 125, 126, 294, 297, 310, 320, 325, 388], "record": [9, 13, 277, 283, 284, 293, 296, 298, 299, 306, 321, 399, 549, 553], "part": [9, 13, 37, 129, 290, 294, 304, 310, 313, 322, 394, 395, 398, 400, 523, 540, 551, 552, 553], "intermedi": [9, 12, 17, 294, 306, 309, 320, 322], "deliv": [9, 571], "There": [9, 10, 12, 34, 37, 38, 124, 287, 293, 294, 306, 321, 323, 324, 325, 331, 390, 393, 394, 396, 540, 546, 547, 552, 553], "reshap": [9, 400], "eas": [9, 12, 34, 296, 325, 327, 328], "achiev": [9, 12, 20, 24, 27, 34, 283, 306, 320, 323, 328, 549], "decid": [9, 390, 487], "due": [9, 129, 287, 297, 320, 327, 394], "among": [9, 126, 129, 294, 306, 320, 327, 330, 399, 405, 534, 553], "fetch": [9, 15, 17, 547, 553, 563], "suffic": 9, "replai": [9, 313, 322, 549, 553], "affect": [9, 13, 30, 36, 37, 540], "area": [9, 15, 283, 299, 491, 537], "readili": 9, "obtain": [9, 14, 17, 29, 30, 124, 294, 295, 297, 298, 305, 309, 310, 313, 316, 321, 325, 389, 393, 394, 396, 515, 518, 534, 540, 547, 553], "simpli": [9, 17, 20, 123, 203, 284, 293, 299, 306, 319, 321, 394, 462, 466, 540], "coincid": 9, "idea": [9, 37, 310, 325, 335, 396], "invalid": [9, 147, 196, 221, 270, 402, 547], "miss": [9, 37, 392, 402, 450, 547], "comparison": [9, 19, 300, 304, 306, 309, 327, 328], "those": [9, 29, 126, 283, 293, 295, 299, 300, 302, 306, 319, 329, 392, 402, 405, 416, 445, 447, 449, 540, 542, 546], "although": [9, 12, 14, 22, 34, 129, 176, 203, 250, 277, 290, 321, 335, 439, 552, 553], "solut": [9, 31, 45, 283, 287, 324, 325, 327, 405, 566], "enough": [9, 313, 389, 392, 459, 547, 551], "caus": [9, 14, 22, 32, 37, 287, 305, 312, 325, 390, 396, 402, 439], "overwhelm": 9, "overhead": [9, 13, 327, 389, 390], "mf": 9, "delta": [9, 12, 13, 33, 37, 331, 402], "php": 9, "mp": 9, "cc": [9, 279, 552, 568], "sswp": 9, "mv": [9, 299], "track": 9, "gcn": [9, 309, 313, 325, 329, 388, 392, 396, 400, 567, 569, 572, 574], "commnet": 9, "me": 9, "keep": [9, 304, 306, 313, 333, 394, 402, 497, 500, 553], "graphsag": [9, 309, 313, 317, 321, 325, 329, 388, 392, 394, 396, 400, 569, 572, 574], "gin": [9, 325], "vldb": [9, 563, 569], "paper": [9, 14, 24, 297, 310, 312, 315, 316, 317, 318, 320, 321, 322, 328, 400, 405, 537, 547, 563, 567], "publish": [9, 14, 24, 29, 297, 320, 321], "2021": [9, 322], "denot": [9, 126, 281, 283, 284, 304, 306, 393, 468, 553], "w": [9, 129, 305, 331, 405, 467, 473, 487, 490, 492, 497, 500, 502, 530, 540, 542, 553, 571], "respect": [9, 16, 38, 292, 294, 300, 304, 319, 320, 321, 324, 325, 331, 350, 367, 375, 391, 394, 405, 446, 459, 506, 540, 546, 552, 553], "initi": [9, 16, 18, 19, 121, 123, 125, 129, 280, 295, 297, 306, 317, 318, 323, 325, 330, 389, 390, 400, 402, 404, 405, 479, 481, 482, 540, 543, 551, 553, 557, 563], "init_v": 9, "init_m": 9, "aggreg": [9, 294, 300, 307, 325, 333, 388, 394, 396, 400, 552, 571], "vector": [9, 286, 310, 316, 321, 325, 330, 333, 388, 396, 398, 405, 487, 491], "element": [9, 13, 126, 300, 304, 306, 323, 330, 389, 392, 394, 402, 405, 435, 467, 512, 534, 546, 547, 552], "specifi": [9, 16, 17, 20, 23, 24, 30, 36, 123, 124, 125, 126, 129, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 279, 283, 284, 293, 297, 300, 302, 304, 309, 313, 317, 321, 323, 331, 333, 339, 346, 347, 357, 358, 362, 366, 370, 371, 387, 388, 389, 391, 394, 397, 402, 404, 405, 416, 424, 425, 446, 459, 469, 471, 472, 475, 476, 483, 487, 488, 489, 490, 491, 497, 500, 502, 505, 518, 537, 540, 542, 546, 547, 551, 553, 554, 560], "addition": [9, 12, 14, 36, 126, 297, 299, 300, 310, 316, 320, 322, 324, 327, 396, 405, 552, 561], "correspond": [9, 10, 13, 15, 17, 18, 37, 41, 45, 129, 294, 297, 299, 302, 304, 306, 309, 313, 319, 324, 327, 331, 365, 388, 389, 390, 391, 393, 394, 398, 402, 405, 438, 439, 469, 471, 472, 473, 474, 475, 487, 533, 534, 536, 540, 542, 543, 549, 553, 561], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 147, 166, 167, 173, 176, 182, 196, 203, 279, 286, 330, 549, 552, 553, 554, 563], "m1": [9, 287, 296, 441, 566, 570], "m2": [9, 441], "below": [9, 10, 12, 20, 34, 35, 36, 37, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 123, 125, 129, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 304, 313, 320, 321, 323, 324, 325, 328, 389, 392, 394, 397, 400, 439, 469, 471, 505, 540, 547, 553], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 147, 166, 167, 173, 176, 182, 196, 203, 279, 282, 321, 328, 330, 398, 553, 563, 567], "dbl_max": 9, "backend": [9, 27, 29, 309, 312, 317, 320, 321, 325, 402, 540, 547, 554, 567], "seamless": [9, 290, 297, 326, 553], "block": [9, 282, 287, 294, 391, 467, 553], "spawn": 9, "adopt": [9, 123, 283, 297, 327, 392, 553], "csc": [9, 551], "csr": [9, 13, 125, 286, 402, 551, 554], "sent": [9, 10, 14, 16, 24, 305], "mainten": [9, 552], "preserv": [9, 13, 332, 402, 502, 532], "effect": [9, 36, 37, 45, 283, 290, 297, 304, 305, 313, 320, 325, 392, 471, 540, 553], "readi": [9, 30, 32, 37, 282, 283, 287, 290, 295, 297, 305, 320, 390, 392, 547, 553, 561], "accept": [9, 47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270, 405, 487, 491, 553, 554], "insert": [9, 14, 126, 147, 221, 294, 360, 553], "newli": [9, 41, 203, 277], "particular": [9, 37, 300, 304, 331, 391, 394, 469], "incid": [9, 20, 302, 304, 306, 416, 417, 459, 481, 530, 540], "encod": [9, 13, 128, 300, 302, 331, 389, 394, 400, 402, 404, 542, 553, 572], "dummi": 9, "furthermor": [9, 305, 306, 309, 320, 327], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 297, 313, 322, 323, 394], "cancel": [9, 93, 167, 169, 241], "compens": 9, "whose": [9, 24, 299, 306, 392, 394, 405, 410, 430, 512, 516, 532, 534, 535, 551, 552], "proce": [9, 129, 279, 459, 553], "inner": [10, 13, 16, 286, 306, 307, 333, 402, 552], "outer": [10, 14, 286, 300, 333, 455, 552], "cross": [10, 302, 335, 515], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 126, 127, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 279, 282, 283, 284, 285, 287, 293, 297, 302, 304, 306, 315, 320, 321, 323, 324, 328, 330, 331, 332, 339, 341, 343, 359, 366, 383, 391, 402, 440, 442, 443, 445, 447, 449, 450, 452, 454, 455, 458, 469, 471, 472, 474, 476, 477, 478, 480, 484, 485, 486, 492, 493, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 535, 542, 547, 552, 560, 561], "5": [10, 13, 19, 20, 31, 129, 287, 295, 297, 301, 304, 306, 312, 313, 315, 316, 317, 318, 321, 324, 328, 388, 391, 393, 394, 395, 397, 400, 405, 411, 416, 418, 424, 443, 446, 459, 463, 464, 465, 467, 468, 476, 478, 485, 486, 487, 488, 490, 491, 505, 506, 508, 509, 510, 511, 513, 514, 517, 519, 521, 523, 524, 530, 535, 540, 546, 547, 553, 555, 561, 566, 567, 571], "9": [10, 31, 147, 221, 293, 296, 297, 304, 306, 321, 389, 405, 443, 445, 491, 509, 517, 530, 535, 570], "12": [10, 20, 32, 196, 270, 287, 296, 306, 328, 331, 389, 390, 391, 393, 395, 407, 408, 409, 445, 507, 508, 512, 516, 520, 526, 564, 566, 570, 571], "split": [10, 125, 297, 304, 306, 315, 316, 317, 318, 389, 390, 547, 553], "roughli": 10, "across": [10, 14, 34, 35, 36, 282, 283, 302, 317, 320, 322, 323, 327, 552, 554], "divid": [10, 203, 277, 300, 304, 306, 310, 320, 331, 389, 392, 396, 397, 405, 551], "place": [10, 18, 19, 36, 125, 293, 297, 306, 398, 399, 402, 467, 487, 488, 489, 490, 491, 520, 538], "itself": [10, 20, 22, 37, 304, 306, 310, 319, 320, 333, 388, 390, 546, 547, 552], "replic": [10, 295, 481], "resid": [10, 14, 38], "j": [10, 31, 129, 286, 331, 400, 405, 438, 439, 460, 461, 469, 471, 472, 474, 480, 491, 494, 495, 496, 518, 552], "outcom": 10, "outgo": [10, 13, 16, 24, 126, 297, 304, 306, 324, 333, 394, 405, 540, 552], "incom": [10, 13, 14, 16, 34, 45, 126, 304, 306, 330, 333, 405], "consid": [10, 15, 18, 27, 37, 277, 306, 313, 323, 331, 332, 389, 390, 405, 469, 532, 549, 552], "vice": [10, 487], "versa": [10, 487], "compani": [10, 552], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 108, 290, 304, 319, 327, 389, 390, 394, 397, 402, 552, 553], "regardless": [10, 300, 322, 389, 485, 552], "friendli": [11, 12, 37, 292, 297, 309, 323, 325, 326, 327], "research": [11, 297, 313, 325, 530, 547], "particularli": [11, 325, 532], "field": [11, 27, 30, 33, 38, 124, 126, 129, 284, 293, 313, 315, 316, 319, 321, 392, 396, 400, 402, 486, 547, 553, 564, 567], "scienc": [11, 494, 517], "solv": [11, 24, 37, 287, 289, 306, 323], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 320], "minor": [12, 14, 34, 309, 320, 325, 328, 555], "cope": [12, 34], "life": [12, 32, 34, 293, 320], "extrem": [12, 27, 320, 396, 441, 452, 552], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 43, 126, 294, 302, 304, 306, 309, 310, 313, 322, 323, 325, 327, 328, 330, 331, 333, 391, 392, 394, 396, 442, 443, 444, 455, 458, 466, 512, 534, 547, 549, 551, 552, 553, 554], "format": [12, 13, 20, 22, 34, 35, 45, 47, 68, 70, 124, 125, 126, 176, 178, 250, 252, 277, 290, 292, 297, 300, 306, 310, 317, 319, 325, 326, 328, 331, 359, 366, 388, 391, 394, 396, 399, 400, 402, 403, 540, 542, 547, 549, 565], "unifi": [12, 34, 43, 290, 292, 294, 297, 389, 549], "care": [12, 34, 279, 306, 398, 399, 552], "foreign": [12, 552], "ecosystem": [12, 280, 292, 296, 308, 309, 324, 327, 557], "freedom": 12, "accord": [12, 19, 36, 45, 287, 293, 294, 299, 304, 306, 310, 319, 320, 324, 325, 330, 392, 394, 398, 459, 467, 479, 480, 549, 553], "demand": [12, 283, 294, 323, 552, 553, 557], "sdk": [12, 18, 43, 44, 127, 128, 129, 282, 285, 287, 293, 297, 298, 307, 308, 309, 323, 324, 327, 335, 545, 553, 557, 563], "domain": [12, 299, 320, 325, 487, 488, 489, 490, 491], "dedic": 12, "treat": [12, 14, 20, 34, 306, 402, 540, 542, 547, 560], "immut": [12, 34, 129, 292, 302, 322], "persist": [12, 15, 30, 34, 287, 292, 293, 320, 322, 327, 551], "fortun": [12, 20, 124, 290], "grin": [12, 292], "awar": [12, 37, 123, 287, 293, 297, 304, 322], "introduct": [12, 34, 307, 323, 393, 394, 397, 405, 450, 532, 552], "foundat": [12, 285, 320], "visit": [12, 29, 121, 279, 280, 299, 306, 324, 389], "meanwhil": [12, 290, 309, 325, 552], "compress": [12, 13, 321, 331, 389, 505], "pipelin": [12, 34, 309, 320, 323, 327, 556], "balanc": [12, 390, 440], "link": [12, 31, 37, 38, 126, 287, 289, 294, 297, 302, 310, 325, 328, 331, 402, 405, 442, 463, 465, 466, 476, 477, 478, 537, 540, 547], "popular": [12, 22, 29, 281, 290, 319, 321, 324, 325, 388, 400, 553], "freeli": [12, 24], "background": [12, 289], "interoper": [12, 552], "panda": [12, 290, 299, 330, 332, 346, 357, 402, 540, 569], "mar": [12, 27, 290, 304, 322, 547], "fastffi": [12, 335], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 43, 46, 203, 277, 279, 280, 282, 283, 287, 293, 297, 300, 301, 302, 304, 307, 308, 309, 320, 322, 324, 327, 330, 441, 452, 459, 535, 538, 540, 557, 563], "emploi": [12, 24, 34, 297, 316, 322, 323], "captur": [12, 325], "20": [12, 13, 27, 29, 32, 34, 293, 296, 304, 306, 309, 328, 331, 332, 390, 391, 393, 402, 459, 487, 488, 509, 511, 540, 563, 564, 570, 571], "100": [12, 34, 129, 299, 306, 312, 315, 316, 321, 331, 400, 405, 462, 469, 473, 480, 489, 540, 547, 553, 567, 571], "build": [12, 15, 31, 34, 35, 37, 44, 46, 125, 127, 128, 203, 287, 294, 297, 299, 305, 309, 310, 319, 322, 330, 331, 341, 343, 390, 394, 396, 398, 399, 402, 488, 489, 490, 532, 547, 549, 560, 565, 572], "been": [12, 17, 23, 24, 28, 29, 33, 37, 45, 129, 203, 277, 279, 284, 287, 294, 295, 296, 297, 299, 304, 306, 308, 310, 320, 322, 323, 324, 325, 327, 331, 380, 392, 394, 402, 403, 405, 459, 482, 532, 544, 557], "go": [13, 311, 400, 467, 520, 553], "impact": [13, 324], "dive": 13, "arrowfrag": [13, 16, 330, 554], "vineyard": [13, 15, 16, 23, 28, 31, 33, 286, 287, 292, 293, 302, 309, 314, 315, 320, 326, 327, 330, 332, 362, 367, 370, 371, 402, 403, 547, 552, 553, 561, 563, 566, 567, 568, 571, 573], "basic": [13, 16, 20, 45, 124, 125, 129, 297, 324, 388, 391, 396, 398, 399, 400, 459, 469, 474, 546], "member": [13, 16, 304, 306, 330, 530], "string": [13, 17, 23, 33, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 124, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 284, 293, 297, 299, 300, 302, 304, 319, 330, 331, 333, 338, 375, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 404, 405, 420, 424, 425, 434, 532, 534, 536, 540, 542, 549, 551, 552, 553, 554, 563, 571, 573], "consecut": 13, "hashmap": [13, 286, 402], "arrai": [13, 17, 286, 300, 310, 319, 325, 330, 331, 332, 391, 392, 394, 397, 400, 540, 543, 555, 563], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 298, 304, 319, 331, 402, 405, 540, 543, 563, 566, 568, 573], "vertex_label": [13, 330, 333], "perfect": [13, 129, 402], "int64_t": [13, 286, 293, 319, 330, 331, 402, 555, 573], "std": [13, 14, 15, 279, 286, 330, 549, 554], "string_view": 13, "uint64_t": [13, 16, 402, 549], "oid_arrays_": [13, 286], "topologi": [13, 310, 313, 322, 391, 396, 537, 549, 551, 552], "row": [13, 125, 293, 297, 310, 325, 389, 402, 533, 553], "matrix": [13, 319, 325, 331, 396, 405, 467, 485, 500, 503, 532, 540, 543], "src_type": [13, 391], "edge_typ": [13, 45, 62, 85, 124, 126, 166, 203, 215, 235, 240, 248, 277, 312, 315, 316, 321, 388, 390, 391, 392, 393, 394, 397, 400, 404, 552, 567, 572], "pair": [13, 20, 296, 300, 302, 306, 330, 331, 333, 387, 400, 439, 444, 445, 451, 467, 485, 491, 540, 543, 546, 552, 554], "indptr": 13, "ie_lists_": [13, 286], "edge_label": [13, 221, 222, 228, 299, 330, 333, 547], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 123, 129, 285, 302, 306, 310, 319, 328, 388, 390, 402, 547, 549, 551, 552, 554], "uint32_t": [13, 330, 402], "num_edg": 13, "ie_offsets_lists_": [13, 286], "offset": [13, 286, 330, 391, 399, 443, 553], "slice": [13, 294, 332, 402, 546], "ie_list": 13, "ie_offset": 13, "num_vertic": 13, "oe_lists_": [13, 286], "oe_offsets_lists_": [13, 286], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 286], "vertex_tables_": [13, 286], "oid_t": [13, 15, 16, 286, 330], "vid_t": [13, 15, 16, 286, 330], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 277, 287, 297], "practic": [13, 16, 28, 282, 294, 302, 310, 313, 320, 325, 389, 390, 392, 553], "load_factori": 13, "15": [13, 287, 306, 315, 316, 318, 328, 390, 391, 393, 394, 500, 522, 533, 540, 547], "extra": [13, 37, 287, 293, 295, 405, 501, 566], "column": [13, 18, 33, 45, 54, 124, 126, 137, 150, 151, 166, 203, 211, 224, 225, 240, 277, 285, 286, 290, 294, 302, 310, 319, 321, 325, 330, 332, 333, 340, 389, 399, 402, 533, 549, 553, 554, 563, 567, 573], "edge_id": 13, "uniqu": [13, 125, 126, 203, 277, 284, 294, 299, 300, 302, 304, 319, 320, 321, 322, 331, 379, 380, 389, 393, 398, 399, 402, 405, 507, 513, 546, 553, 554], "kept": [13, 304, 306, 330], "summari": [13, 327, 420], "argument": [13, 23, 30, 129, 175, 249, 250, 304, 306, 313, 317, 319, 405, 407, 408, 409, 438, 446, 476, 483, 487, 488, 489, 490, 491, 518, 540, 543, 546, 547, 553, 554, 563], "use_perfect_hash": [13, 330, 381, 402, 547], "load_from": [13, 22, 30, 402, 547, 551], "realli": 13, "margin": 13, "former": [13, 323], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 296, 299, 306, 324, 402, 547, 552, 553, 570], "localvertexmap": 13, "suitabl": [13, 126, 320, 327, 390, 394, 400, 459, 553, 556], "dozen": 13, "hundr": [13, 469, 480], "repeatedli": [13, 294, 323], "add_vertic": [13, 290, 299, 319, 402, 540, 543, 544, 567, 568, 573], "sure": [13, 23, 27, 30, 41, 45, 121, 124, 279, 280, 282, 284, 295, 297, 299, 306, 394, 398, 400, 547, 553], "fairli": [13, 296], "8": [13, 20, 31, 32, 33, 35, 37, 46, 127, 129, 196, 203, 270, 282, 287, 293, 296, 299, 304, 306, 309, 312, 328, 331, 389, 443, 466, 485, 508, 517, 519, 525, 529, 535, 537, 540, 542, 553, 555, 566, 571], "absolut": 13, "int32_t": [13, 319, 402, 573], "vid_typ": [13, 33, 330, 381, 402, 547], "compact_edg": [13, 330, 381, 402, 547], "compact": [13, 330, 402], "varint": [13, 402], "half": [13, 402], "generated_eid": 13, "save": [13, 18, 28, 29, 124, 293, 390, 402, 405, 553], "interact": [13, 27, 29, 33, 36, 37, 38, 41, 43, 44, 122, 124, 126, 128, 147, 166, 167, 173, 176, 182, 196, 203, 250, 277, 281, 283, 290, 293, 294, 295, 298, 299, 301, 303, 305, 306, 307, 309, 319, 320, 322, 323, 326, 327, 329, 359, 402, 481, 530, 545, 547, 560, 567, 571], "vertex_id": [13, 24, 290, 319, 573], "retain_oid": [13, 293, 319, 330, 381, 402, 547, 554, 573], "gain": [13, 37], "signific": [13, 322, 327], "arrowprojectedfrag": [13, 15, 16, 330, 339], "implicit": [13, 543], "arrowflattenfrag": 13, "thought": [13, 468], "view": [13, 20, 24, 45, 121, 280, 285, 319, 320, 351, 413, 417, 436, 437, 540, 543, 549, 561], "mainli": [13, 125, 129, 294, 300, 306, 327, 396], "purpos": [13, 43, 306, 320, 552], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 332, 555, 556], "r2": [13, 332, 555, 556], "r3": [13, 332, 555], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 279, 306, 323, 331, 389, 393, 394, 395, 405, 422, 459, 479, 489, 538, 540, 547, 552, 553], "express": [14, 15, 24, 294, 297, 300, 301, 302, 313, 322, 324, 332, 389, 391, 394, 491, 540, 571], "modifi": [14, 20, 24, 28, 123, 283, 293, 300, 305, 344, 345, 360, 361, 395, 418, 471, 538, 551, 552], "adher": [14, 35, 126, 552], "think": [14, 24], "principl": [14, 398], "privileg": 14, "experienc": [14, 324], "inform": [14, 15, 16, 19, 27, 29, 38, 45, 75, 121, 203, 277, 280, 282, 287, 294, 295, 297, 299, 300, 302, 316, 321, 323, 325, 326, 335, 349, 388, 389, 390, 391, 394, 396, 398, 402, 405, 420, 438, 479, 501, 502, 530, 540, 547, 549, 553, 560], "hop": [14, 294, 302, 304, 306, 309, 310, 313, 320, 324, 325, 388, 392, 394, 396, 397, 398, 400], "slow": [14, 296], "consequ": [14, 320, 323], "piec": [14, 281, 292, 399, 547], "destin": [14, 33, 77, 124, 125, 126, 150, 153, 224, 227, 293, 299, 300, 306, 310, 319, 321, 330, 332, 348, 389, 390, 391, 393, 394, 400, 402, 404, 546, 551, 552, 553, 573], "abovement": 14, "peval": [14, 16, 17, 18, 34, 323, 330, 338, 557, 563], "incev": [14, 16, 17, 18, 34, 323, 330, 338, 557, 563], "assembl": [14, 34, 294, 322, 323, 330, 402], "unlik": [14, 17, 301, 310, 313, 320, 540], "modif": [14, 22, 297, 309, 320, 325, 402, 543], "convent": [14, 37, 287, 473, 499, 561], "taught": [14, 306], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 287, 299, 320, 553], "collect": [14, 34, 42, 46, 47, 297, 300, 304, 305, 306, 324, 325, 326, 400, 540], "partial": [14, 16, 18, 34, 304, 330, 332, 389, 482, 557], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 125, 293, 313, 327, 389, 397, 405, 475, 540], "accur": [14, 297, 299], "long": [14, 17, 30, 33, 38, 297, 299, 302, 304, 306, 322, 327, 331, 394, 552, 553, 563, 571], "const": [14, 15, 16, 279, 286, 330, 333, 398, 399, 552, 553, 554], "fragment_t": [14, 15, 16, 330], "frag": [14, 17, 18, 286, 338, 549, 554, 563], "context_t": [14, 15, 16, 330], "ctx": [14, 17, 22, 330, 551, 563], "message_manager_t": [14, 16, 330], "vertex_t": [14, 16, 286, 330], "native_sourc": [14, 18, 563], "getinnervertex": [14, 330], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 286, 330, 549, 563], "get_neighbor": 14, "min": [14, 18, 24, 57, 82, 297, 300, 333, 563, 571], "static_cast": [14, 16, 279, 286, 549], "get_data": [14, 286], "isoutervertex": [14, 330], "put": [14, 16, 17, 22, 46, 47, 108, 126, 129, 147, 173, 196, 203, 221, 248, 270, 277, 398], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 147, 166, 167, 173, 176, 182, 196, 203, 277, 286, 306, 390, 400, 402, 498, 552, 553, 563], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 286, 330, 549, 563], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 306, 333, 552], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 563], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 286, 330], "dijkstra": [14, 18, 323, 405, 563], "checkout": [14, 37, 395], "seri": [15, 306, 325, 330, 394, 552], "strong": [15, 282, 294, 323], "typenam": [15, 16, 131, 135, 138, 145, 155, 159, 165, 199, 201, 286, 330], "frag_t": [15, 16, 330], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 123, 277, 282, 293, 305, 306, 324, 391, 394, 398, 400, 546, 555], "shared_ptr": [15, 286, 330, 549, 554], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 41, 127, 129, 284, 299, 306, 319, 547, 563, 573], "global": [15, 24, 124, 294, 302, 304, 306, 325, 381, 402, 532, 547, 554, 560, 571], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 41, 125, 293, 294, 306, 319, 325, 502, 546], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 125, 129, 178, 277, 286, 315, 319, 330, 331, 333, 338, 388, 390, 391, 395, 398, 400, 540, 543, 549, 557, 563, 572, 573], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 448], "len": [15, 304, 306, 315, 317, 390, 405, 414, 445, 462, 464, 467, 469, 470, 474, 540], "ed": [15, 23, 473, 487, 494, 517, 523], "ctruee": 15, "rather": [15, 18, 125, 283, 306, 319, 324, 326, 327, 405, 459, 501, 552], "py": [15, 32, 36, 41, 45, 46, 47, 67, 75, 92, 93, 104, 108, 118, 127, 129, 277, 295, 317, 388, 395, 400, 547, 553, 560, 563, 564, 565, 572], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 342, 543], "dynamic_properti": [15, 355, 543], "def": [15, 18, 23, 277, 298, 312, 315, 316, 317, 318, 319, 321, 338, 388, 390, 391, 392, 393, 394, 397, 400, 446, 553, 563, 567, 568, 572, 573], "arg": [15, 147, 166, 167, 173, 176, 182, 196, 203, 279, 315, 317, 330, 331, 332, 333, 366, 384, 391, 392, 393, 394, 397, 400, 404, 547, 553], "appasset": [15, 18, 338, 339, 343, 545, 563], "algo": [15, 16, 17, 22, 23, 331, 339], "flash_bf": 15, "vertex_data": [15, 16, 271, 331, 339], "gscoordin": [15, 28, 36, 45], "builtin": [15, 19, 20, 121, 280, 284, 541, 543, 545], "gs_conf": [15, 16, 339], "yaml": [15, 16, 28, 29, 38, 45, 120, 122, 123, 125, 126, 129, 277, 278, 280, 284, 293, 305, 317, 331, 339, 547, 551, 553, 571], "cpp_flash": 15, "class_nam": [15, 16, 339], "compatible_graph": [15, 16, 339], "immutableedgecutfrag": 15, "log": [15, 17, 46, 75, 86, 94, 123, 169, 243, 287, 292, 315, 316, 320, 322, 552, 554, 566], "p2p": [15, 17, 22, 23], "network": [15, 27, 126, 282, 287, 290, 292, 295, 306, 310, 314, 316, 320, 321, 323, 326, 327, 328, 329, 331, 388, 389, 390, 392, 394, 396, 400, 405, 460, 461, 467, 469, 473, 476, 477, 478, 481, 493, 517, 528, 529, 531, 532, 537, 541, 555, 566], "load_p2p_network": [15, 16, 17, 18, 290, 331, 332, 563], "attribut": [15, 19, 126, 302, 313, 316, 321, 323, 325, 330, 331, 364, 375, 390, 391, 393, 396, 400, 401, 404, 405, 407, 408, 409, 424, 425, 434, 446, 459, 464, 483, 487, 488, 489, 490, 491, 494, 495, 496, 530, 532, 534, 537, 538, 540, 541, 543, 549], "convert": [15, 20, 23, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 129, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 284, 310, 331, 346, 347, 357, 358, 370, 371, 388, 389, 396, 400, 460, 461, 518, 535, 540, 542, 543, 549], "simple_graph": [15, 16], "dist": [15, 17, 280, 298, 331, 332, 395, 398, 487, 489, 491, 547, 563, 571], "codegen": [15, 46, 129, 294], "bit": [15, 296, 300, 304, 306, 551], "longer": [15, 315, 333, 547], "retriev": [15, 128, 292, 299, 300, 302, 304, 321, 322, 332, 346, 347, 357, 358, 362, 366, 370, 371, 391, 392, 394, 400, 405, 546, 553, 554], "displai": [15, 282, 297, 305, 389], "vertex_rang": [15, 332, 346, 347, 357, 358, 362, 370, 371, 402, 546], "end": [15, 16, 286, 290, 300, 304, 306, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 327, 332, 333, 394, 399, 405, 419, 428, 433, 434, 447, 459, 542, 546, 552, 557], "sort_valu": 15, "pip3": [16, 19, 23, 35, 36, 37, 45, 121, 127, 277, 282, 287, 298, 305, 560, 564, 566, 570], "degre": [16, 19, 20, 286, 290, 306, 313, 331, 333, 391, 392, 397, 405, 414, 439, 440, 459, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 485, 497, 498, 499, 500, 534, 540, 541, 553], "vertexdatacontext": [16, 17, 330, 405, 563], "myappcontext": 16, "explicit": [16, 330, 484, 540, 547], "parallelmessagemanag": [16, 17, 563], "param1": [16, 196, 270], "setvalu": [16, 17, 563], "vertex_array_t": [16, 330], "variabl": [16, 29, 33, 39, 41, 126, 203, 277, 279, 282, 284, 287, 295, 304, 338, 459, 547, 553, 554, 566], "And": [16, 18, 23, 29, 31, 36, 38, 290, 294, 296, 306, 319, 328, 331, 332, 393, 398, 543, 546, 547, 553], "zero": [16, 126, 322, 331, 389, 394, 405, 422, 440, 449, 482, 534, 535, 554], "myapp": 16, "parallelappbas": [16, 17, 563], "parallelengin": [16, 17, 563], "install_parallel_work": 16, "constexpr": [16, 330], "messagestrategi": [16, 18, 330, 333, 563], "message_strategi": [16, 330], "ksynconoutervertex": [16, 18, 330, 333, 563], "loadstrategi": [16, 330], "load_strategi": [16, 330], "kbothoutin": [16, 330], "initchannel": 16, "noth": [16, 333, 349, 402, 404, 540], "forc": [16, 37, 319, 560], "forcecontinu": [16, 17, 563], "getincomingadjlist": [16, 286, 330], "counter": [16, 306], "runnabl": [16, 17, 23, 90, 163, 237, 279], "content": [16, 47, 67, 75, 92, 93, 104, 108, 118, 126, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270, 279, 290, 297, 306, 316, 319, 321, 405, 537, 551, 573], "my_app": [16, 18, 563], "cpp_pie": [16, 331, 339], "context_typ": [16, 330, 331, 339], "dynamicprojectedfrag": 16, "codebas": [16, 35, 44, 128], "my_app_context": 16, "zip": [16, 124, 280, 298, 299, 305, 339, 487, 491, 540, 571], "jr": 16, "load_app": [16, 17, 18, 22, 563], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 331, 332, 402, 546, 563], "demo": [17, 22, 23, 45, 296, 335, 547, 553, 561, 563], "turn": [17, 283, 287, 299, 328, 335, 534, 561], "verbos": [17, 23, 38, 123, 287, 561], "cluster_typ": [17, 22, 101, 102, 299, 319, 331, 332, 547, 551, 563, 573], "add_lib": [17, 22, 547], "home": [17, 22, 23, 28, 38, 125, 287, 290, 319, 330, 395, 396, 398, 399, 401, 402, 405, 449, 560, 561, 563, 565, 573], "19": [17, 22, 23, 32, 127, 280, 282, 287, 298, 306, 328, 390, 391, 393, 561, 566, 570], "shade": [17, 22, 23, 563], "java_pi": [17, 331], "threadnum": [17, 563], "info": [17, 38, 123, 129, 166, 240, 287, 296, 306, 317, 333, 402, 540, 543, 547, 552, 553, 554, 561], "avail": [17, 23, 29, 30, 41, 125, 203, 277, 281, 282, 290, 297, 299, 300, 302, 305, 313, 319, 322, 328, 331, 387, 400, 488, 489, 490, 540, 547, 549, 552, 563], "mvn": [17, 22, 129, 203, 335, 553], "clean": [17, 32, 129, 203, 290, 296, 297, 299, 321, 335, 398, 552], "dskiptest": [17, 129, 335], "pom": [17, 23, 203, 553], "xml": [17, 23, 330, 553], "groupid": [17, 23, 203, 297, 553, 563], "artifactid": [17, 23, 203, 297, 553, 563], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 297, 553, 563], "spark": [17, 551], "drastic": 17, "great": [17, 23, 37, 553], "suppos": [17, 306, 534, 552], "traversecontext": [17, 563], "overrid": [17, 279, 319, 330, 388, 398, 560, 563], "ifrag": [17, 563], "parallelcontextbas": [17, 563], "adjlist": [17, 330, 333, 551, 563], "nbr": [17, 20, 286, 330, 333, 540, 563], "dst": [17, 18, 30, 147, 203, 221, 277, 290, 302, 313, 319, 332, 388, 391, 402, 404, 546, 549, 552, 563, 572, 573], "largest": [17, 306, 405, 485, 563], "vertexarrai": [17, 330, 333, 563], "math": [17, 312, 316, 321, 405, 489, 490, 567, 569], "max": [17, 300, 333, 401, 405, 563, 571], "pars": [17, 294, 319, 331, 389, 549, 553], "maxiter": [17, 563], "jsonobject": [17, 563], "gsvertexarrai": [17, 563], "createfficontext": [17, 563], "containskei": [17, 563], "getinteg": [17, 563], "javadoc": [17, 35], "proper": [17, 37], "javaapp": [17, 545, 563], "But": [17, 293, 306, 319, 327, 335, 540, 546], "rememb": [17, 22, 23, 30, 33, 45, 121, 124, 203, 277, 282, 284, 553, 560], "pack": [17, 23, 563], "param": [17, 23, 29, 90, 109, 163, 185, 237, 250, 259, 279, 287, 296, 299, 317, 331, 351, 352, 366, 381, 383, 387, 394, 400, 547, 553, 563], "bother": 17, "click": [17, 36, 37, 297, 313, 390, 391, 394, 564], "pure": [18, 330, 557], "just": [18, 19, 23, 27, 45, 121, 124, 125, 280, 282, 287, 290, 293, 297, 304, 306, 327, 335, 398, 402, 540, 543, 547, 553, 555], "udf": [18, 338, 546, 563], "decor": [18, 563], "vd_type": [18, 333, 338, 563], "md_type": [18, 333, 338, 563], "youralgorithm": [18, 563], "staticmethod": [18, 338, 563], "statu": [18, 27, 29, 30, 38, 43, 45, 46, 47, 67, 75, 80, 92, 93, 94, 98, 104, 105, 108, 115, 118, 124, 128, 129, 147, 166, 167, 169, 173, 176, 182, 183, 196, 203, 221, 240, 241, 243, 248, 250, 256, 257, 270, 277, 285, 287, 315, 398, 399, 405, 553, 557, 561], "cython": [18, 34, 287, 366, 545, 563], "sssp_pie": [18, 563], "v_label_num": [18, 554, 563], "vertex_label_num": [18, 279, 333, 549, 554, 563], "v_label_id": [18, 333, 563], "init_valu": [18, 333, 563], "1000000000": [18, 331, 563], "pieaggregatetyp": [18, 333, 563], "kminaggreg": [18, 333, 563], "register_sync_buff": [18, 333, 563], "get_config": [18, 333, 547, 563], "declar": [18, 203, 277, 282, 294, 304, 306, 309, 324, 327, 390, 563], "get_inner_nod": [18, 333, 563], "break": [18, 37, 203, 277, 283, 305, 400, 563], "set_node_valu": [18, 333, 563], "e_label_num": [18, 286, 554, 563], "edge_label_num": [18, 333, 549, 554, 563], "e_label_id": [18, 563], "get_outgoing_edg": [18, 333, 563], "third": [18, 129, 319, 320, 324, 402, 525, 526], "get_int": [18, 279, 333, 563], "get_node_valu": [18, 333, 563], "iv": [18, 563], "inner_nod": [18, 333, 563], "v_dist": [18, 563], "u_dist": [18, 286, 563], "classic": [18, 313, 393, 541], "yourpregelalgorithm": [18, 563], "sssp_pregel": [18, 563], "set_valu": [18, 333, 563], "src_id": [18, 125, 286, 313, 389, 390, 391, 393, 394, 397, 400, 404, 563], "cur_dist": [18, 563], "new_dist": [18, 563], "outgoing_edg": [18, 333, 563], "vote_to_halt": [18, 333, 563], "sin": [18, 563], "m_pi": [18, 563], "translat": [18, 37, 299, 320], "generate_eid": [18, 293, 319, 330, 381, 402, 547, 554, 563, 573], "test": [18, 23, 29, 33, 43, 44, 124, 128, 166, 173, 203, 240, 248, 279, 282, 284, 285, 287, 292, 293, 296, 297, 306, 309, 312, 315, 316, 321, 325, 388, 398, 400, 404, 424, 425, 459, 540, 542, 547, 552, 553, 564, 565, 567, 572], "futur": [18, 123, 126, 203, 277, 283, 300, 304, 306, 319], "to_gar": [18, 563], "tmp": [18, 19, 28, 38, 45, 129, 166, 293, 295, 362, 367, 400, 402, 547, 551, 553, 561, 563, 566], "my_sssp_pregel": [18, 563], "gar": [18, 331, 339, 563], "construct": [19, 283, 285, 306, 310, 313, 319, 320, 321, 322, 330, 381, 388, 389, 390, 391, 392, 402, 403, 407, 408, 448, 469, 471, 472, 474, 480, 484, 485, 486, 494, 497, 498, 499, 500, 502, 518, 522, 526, 532, 534, 547, 551, 554], "expand": [19, 283, 294, 297, 306, 307, 392, 394, 541], "add_edges_from": [19, 20, 424, 540], "add_nod": [19, 20, 540, 543], "number_of_nod": [19, 20, 405, 449, 533, 540], "number_of_edg": [19, 20, 414, 449, 533, 540], "sort": [19, 20, 286, 294, 306, 405, 411, 439, 443, 446, 449, 474, 475, 533, 534, 540, 552], "connected_compon": [19, 405], "nx": [19, 20, 290, 342, 344, 345, 348, 351, 353, 355, 360, 361, 365, 368, 369, 402, 405, 540, 542, 543], "add_nodes_from": [19, 20, 540], "red": [19, 20, 37, 299, 389, 540], "green": [19, 20, 36, 37], "add_edg": [19, 20, 290, 299, 319, 402, 418, 424, 425, 428, 433, 434, 540, 543, 567, 568, 573], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": [19, 281], "dict": [19, 20, 27, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 331, 332, 359, 367, 387, 390, 391, 394, 402, 403, 487, 488, 489, 490, 497, 498, 518, 540, 546, 547, 553], "draw": [19, 283, 306, 487, 490], "matplotlib": [19, 306], "with_label": 19, "font_weight": 19, "bold": [19, 328], "twitter": [19, 328], "wget": [19, 22, 23, 29, 35, 124, 277, 280, 298, 395, 571], "raw": [19, 22, 23, 124, 125, 129, 277, 293, 294, 310, 357, 358, 390, 396, 398, 399, 404], "githubusercont": [19, 22, 23, 124, 277], "p": [19, 20, 31, 36, 129, 173, 203, 284, 299, 304, 306, 321, 322, 331, 390, 400, 405, 463, 464, 465, 467, 476, 477, 478, 481, 482, 484, 486, 488, 489, 490, 491, 494, 496, 571], "o": [19, 22, 23, 27, 30, 33, 38, 279, 330, 400, 405, 422, 473, 475, 480, 488, 489, 490, 492, 493, 494, 540, 553, 564, 567], "gs_nx": 19, "g1": [19, 402, 544, 555, 556], "read_edgelist": [19, 542], "expandvar": [19, 22], "nodetyp": [19, 542], "create_us": [19, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 469, 470, 471, 472, 474, 476, 477, 478, 480, 484, 485, 486, 492, 493, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 535, 542], "g2": [19, 402, 540, 544, 555, 556], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 297, 299, 304, 326, 405], "hashabl": [20, 420, 435, 497, 540, 542], "float": [20, 89, 96, 158, 172, 300, 302, 304, 315, 319, 328, 331, 388, 389, 390, 391, 399, 400, 401, 405, 459, 462, 463, 464, 465, 467, 478, 479, 480, 481, 482, 487, 488, 489, 490, 491, 494, 495, 496, 532, 540, 542, 547, 551, 555, 571, 572, 573], "tupl": [20, 306, 319, 389, 390, 391, 400, 402, 405, 424, 425, 434, 446, 487, 491, 497, 536, 540, 542, 547], "though": [20, 279, 459, 540, 553], "yield": [20, 203, 284, 297, 394, 400, 487, 491, 540], "node_attribute_dict": 20, "discuss": [20, 279, 287, 306, 405, 552, 566], "incorpor": [20, 129], "path_graph": [20, 405, 416, 418, 419, 425, 540, 542], "grown": [20, 449, 482, 540], "unpack": [20, 305, 330, 540], "ebunch": [20, 540], "dictionari": [20, 281, 331, 375, 405, 487, 488, 489, 490, 497, 498, 499, 500, 540, 542, 551], "11": [20, 27, 30, 31, 32, 47, 68, 129, 293, 296, 306, 312, 328, 331, 389, 390, 391, 393, 407, 408, 409, 445, 540, 553, 561], "complaint": 20, "clear": [20, 37, 297, 304, 306, 344, 345, 440, 442, 443, 445, 447, 449, 450, 452, 454, 455, 458, 469, 471, 472, 474, 476, 477, 478, 480, 484, 485, 486, 492, 493, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 535, 540, 542, 553], "quietli": [20, 435, 540], "ignor": [20, 297, 405, 416, 435, 540, 547], "spam": 20, "stage": [20, 287, 292, 310, 326, 327, 394, 552], "seen": [20, 121, 280, 294, 320, 552], "report": [20, 287, 328, 365, 463, 464, 465, 540, 543], "adj": [20, 333, 405, 540], "item": [20, 29, 125, 280, 285, 317, 320, 389, 390, 391, 394, 400, 405, 540, 553], "One": [20, 294, 300, 320, 324, 325, 326, 327, 331, 392, 394, 471, 480, 534, 553], "nbunch": [20, 413, 417, 419, 435, 540], "remove_nod": [20, 540], "remove_nodes_from": [20, 540], "remove_edg": [20, 540], "remove_edges_from": [20, 469, 471, 540], "instanti": [20, 331, 400, 555], "digraph": [20, 402, 407, 417, 419, 424, 425, 428, 433, 434, 445, 462, 463, 464, 467, 471, 472, 474, 476, 477, 478, 479, 483, 534, 535, 536, 538, 541, 542, 543], "edgelist": [20, 518, 542], "subscript": [20, 540], "notat": [20, 123, 125, 505, 507, 509, 511, 513, 519, 521, 540], "yellow": [20, 389], "blue": [20, 389, 540], "undirect": [20, 126, 319, 325, 331, 351, 390, 394, 402, 405, 411, 415, 437, 460, 461, 467, 469, 476, 478, 481, 483, 484, 485, 487, 488, 489, 490, 491, 497, 502, 506, 507, 510, 513, 514, 516, 522, 535, 537, 540, 554], "twice": [20, 518, 540], "fg": [20, 554], "add_weighted_edges_from": [20, 424, 540], "125": [20, 389, 473, 484], "75": [20, 306, 312, 315, 316, 321, 328, 405, 463, 464, 465, 467, 547, 567], "375": 20, "eattr": [20, 540], "wt": 20, "attach": [20, 330, 389, 476, 479], "fridai": [20, 540, 543], "mondai": 20, "5pm": [20, 540], "2pm": [20, 540], "room": [20, 540], "714": [20, 540], "to_direct": [20, 402, 460, 461, 476, 478, 540], "represent": [20, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 126, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 283, 294, 320, 322, 325, 402, 538, 540, 551], "dg": [20, 309, 325], "dgv": 20, "as_view": [20, 436, 437, 540], "shallow": 20, "out_edg": [20, 417, 540], "in_degre": [20, 313, 315, 392, 394, 397, 400, 471, 497, 498, 540], "predecessor": [20, 410, 483, 534, 540], "successor": [20, 377, 410, 477, 478, 483, 540], "out_degre": [20, 471, 497, 498, 540], "feel": [20, 37, 279, 287], "inconsist": [20, 328], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 304, 313, 325, 331, 392, 397, 462, 463, 464, 465, 467, 469, 473, 476, 478, 479, 480, 481, 482, 487, 488, 489, 490, 491, 494, 496], "to_undirect": [20, 402, 476, 478, 540], "theoret": 20, "load_ldbc": [20, 306, 551, 571], "foo": [20, 540], "famou": [22, 23, 539], "hadoop": [22, 553], "stop": [22, 27, 30, 46, 104, 182, 203, 256, 277, 297, 322, 326, 330, 405], "open": [22, 36, 37, 129, 279, 282, 295, 305, 307, 313, 324, 327, 400, 542, 552, 553], "actual": [22, 23, 28, 120, 121, 122, 124, 126, 203, 277, 278, 280, 295, 297, 302, 304, 306, 313, 334, 336, 393, 491, 540, 543, 551, 561], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 402], "p2pvertexinputformat": 22, "eformat": [22, 402], "p2pedgeinputformat": 22, "graphscope_sess": [22, 402], "31": [22, 23, 290, 319, 390, 391, 393, 573], "v_prop": [22, 330, 364], "vdata": 22, "e_prop": [22, 330, 364], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 405], "toward": [22, 297, 553], "offici": [22, 293, 295, 296, 305, 324], "pl": 22, "snapshot": [22, 297, 302, 327, 549, 553], "writabl": 22, "degrad": [22, 327], "procedur": [22, 29, 46, 108, 123, 127, 128, 173, 176, 248, 250, 280, 283, 285, 293, 294, 300, 306, 341, 482], "except": [22, 46, 47, 67, 75, 92, 93, 104, 108, 118, 203, 277, 279, 283, 287, 305, 312, 315, 316, 319, 321, 326, 393, 400, 418, 435, 439, 450, 459, 469, 471, 520, 540, 547, 552, 567], "right": [22, 300, 304, 319, 398, 441, 450, 452, 473, 538], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 290, 294, 297, 309, 323, 325, 327, 328, 462], "proceed": [23, 27, 121, 280, 462, 480], "side": [23, 37, 80, 81, 294, 304, 305, 331, 350, 390, 443, 552], "venv": [23, 296, 321], "virtualenv": [23, 277], "pyspark_venv": 23, "bin": [23, 31, 129, 295, 296, 297, 305, 306, 320, 321, 414, 553, 561, 565, 571], "pyspark_venv_g": 23, "tar": [23, 29, 31, 297, 553], "gz": [23, 31, 297, 542, 553], "upload": [23, 45, 46, 118, 124, 125, 293], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 320, 551, 571], "oss": [23, 29, 31, 124, 319, 330, 395, 402, 553, 563, 564, 573], "beij": [23, 29, 31, 310, 325, 389, 553, 564], "fixm": 23, "yuansi": 23, "env": [23, 287, 296, 317, 321, 395], "var": [23, 33, 38, 287, 319, 400, 553, 561, 573], "gs_jar": 23, "l": [23, 29, 35, 45, 121, 129, 280, 313, 325, 392, 460, 461, 463, 464, 465, 472, 473, 474, 476, 477, 478, 481, 488, 489, 490, 491, 493, 497, 498, 499, 500, 529, 532, 540, 560, 561], "lib": [23, 31, 203, 281, 295, 297, 339, 553], "7077": 23, "master_url": 23, "conf": [23, 295, 297, 305, 330, 553, 571], "executor": [23, 35, 38, 293, 295, 320, 403, 561], "driver": [23, 27, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 270, 277, 279, 284, 301, 305, 319, 367, 402, 553, 571], "2g": 23, "10g": [23, 565], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 300], "url": [23, 29, 94, 169, 243, 295, 402, 403, 553, 571], "rdd": 23, "classifi": [23, 310, 312, 316, 321, 325, 400, 563], "maven": [23, 128, 297, 335, 553, 563], "conflict": [23, 296, 306, 312, 402, 530, 553], "correctli": [23, 37, 279, 284, 287, 309, 405, 553], "resolv": [23, 28, 287, 319, 402, 554], "goal": [23, 283, 285, 294, 300, 310, 322, 325, 552], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 286, 294, 446, 553], "config": [23, 27, 28, 31, 45, 46, 73, 93, 123, 124, 293, 295, 297, 305, 317, 365, 375, 387, 388, 401, 404, 544, 547, 549, 553, 554, 571, 572], "socket": [23, 28, 30, 295, 330, 554], "bound": [23, 126, 173, 203, 248, 277, 304, 306, 324, 366, 459, 547, 552, 555], "vineyardsock": 23, "filepath": [23, 193], "sock": [23, 28, 295], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 284, 293, 295, 297, 301, 324, 331], "grow": [24, 283, 290, 297, 309, 320, 459, 469, 476, 477, 478, 539, 552], "capac": [24, 33, 295, 540, 547], "indivis": 24, "succinctli": 24, "oppos": [24, 313], "orient": [24, 313, 327, 397, 553], "googl": [24, 35, 323, 565], "powergraph": [24, 327, 328], "wa": [24, 29, 30, 37, 92, 304, 306, 322, 328, 394, 405, 459, 474, 487, 488, 489, 490, 539, 553], "2010": [24, 328, 331, 405, 465, 532, 537], "sequenc": [24, 300, 304, 306, 331, 402, 439, 459, 469, 470, 471, 472, 473, 474, 475, 491, 497, 498, 501, 534, 535, 540, 541, 554], "conceptu": 24, "behavior": [24, 123, 129, 304, 306, 319, 333, 547], "becom": [24, 290, 306, 313, 540, 552, 553], "inact": 24, "again": [24, 287, 304, 319, 555, 560], "termin": [24, 36, 299], "halt": [24, 324, 333, 479], "individu": [24, 293, 295, 316, 321], "messageiter": [24, 333], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 125, 310, 313, 389, 400, 405, 502, 554], "getvalu": [24, 147, 166, 167, 173, 176, 182, 196, 203, 279, 286], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 287, 553], "dramat": 24, "face": [24, 31, 294, 306, 323, 525, 526], "power": [24, 203, 277, 284, 297, 300, 301, 304, 306, 309, 324, 331, 405, 459, 469, 517, 540], "law": [24, 459, 469], "gather": [24, 547], "scatter": [24, 390], "accumul": [24, 279, 313, 534], "workload": [27, 36, 283, 290, 292, 294, 295, 297, 303, 306, 309, 320, 322, 328, 553, 555, 556], "grpc": [27, 28, 31, 106, 287, 330, 564, 566], "linux": [27, 30, 31, 36, 129, 282, 293, 312, 328, 335, 570], "maco": [27, 30, 36, 129, 282, 287, 296, 564, 566, 567, 570], "skip": [27, 31, 35, 297, 324, 335, 553], "minikub": [27, 29, 30, 553], "instruct": [27, 29, 30, 33, 37, 44, 45, 127, 129, 280, 283, 293, 295, 296, 297, 298, 299, 305, 321, 324, 330, 343, 394], "platform": [27, 32, 37, 43, 127, 129, 282, 292, 293, 294, 312, 326, 327, 328, 335, 389, 531, 547], "desktop": [27, 553, 567], "server": [27, 29, 47, 67, 75, 80, 81, 92, 93, 104, 108, 118, 129, 147, 166, 176, 196, 221, 240, 250, 270, 282, 294, 295, 299, 302, 305, 307, 309, 313, 318, 320, 322, 324, 329, 393, 398, 399, 400, 553, 565, 571], "kubectl": [27, 29, 30, 33, 38, 287, 293, 553, 561, 566], "kube": [27, 547], "apivers": [27, 33, 317], "v1": [27, 33, 35, 46, 47, 67, 75, 92, 93, 104, 108, 118, 129, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 287, 304, 306, 312, 315, 316, 317, 321, 324, 388, 505, 518, 543, 566, 567, 572], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 306, 394, 399, 402, 462, 534, 561], "16": [27, 31, 293, 295, 306, 328, 388, 390, 391, 393, 395, 496, 519, 533, 572], "2023": [27, 47, 68, 561], "44": [27, 328, 390, 391, 393, 533], "05": [27, 467, 480], "cst": 27, "sig": [27, 563, 570], "28": [27, 304, 306, 310, 325, 328, 390, 391, 393, 537], "cluster_info": 27, "172": [27, 328], "21": [27, 31, 47, 68, 290, 306, 328, 331, 390, 391, 393, 513, 553], "67": [27, 328, 331], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 279, 317, 547], "profil": [27, 297, 571], "encapsul": [27, 203, 277, 284, 309, 310, 388, 394, 547], "entranc": [27, 129, 394], "tag": [27, 41, 127, 304, 306, 328, 467, 547, 553, 565], "intranet": 27, "internet": [27, 29, 31, 282, 299, 306, 323, 537, 539], "might": [27, 123, 126, 277, 287, 405, 497, 540, 556], "k8s_image_registri": [27, 33, 547], "k8s_image_repositori": [27, 547], "k8s_image_tag": [27, 33, 317, 547], "fit": [27, 283, 290, 293, 314, 315, 335], "increas": [27, 38, 123, 287, 290, 390, 438, 439, 447, 469, 471, 479, 497, 500, 502, 552], "cpu": [27, 75, 129, 287, 293, 317, 318, 395, 547, 556, 566], "num_work": [27, 28, 33, 317, 318, 387, 547, 571], "k8s_engine_cpu": [27, 387, 547], "32": [27, 304, 328, 390, 391, 393, 401, 405, 551], "k8s_engine_mem": [27, 287, 317, 387, 547, 566], "256gi": 27, "vineyard_shared_mem": [27, 287, 317, 387, 547, 566], "preexist": 27, "k8s_client_config": [27, 547], "disk": [27, 124, 283, 287, 293, 320, 553], "test_data": [27, 312, 316, 321, 564, 567], "testingdata": [27, 30, 33, 564, 567], "k8s_volum": [27, 30, 33, 387, 547, 564, 567], "constructor": [27, 319, 440, 442, 443, 445, 447, 449, 450, 452, 454, 455, 458, 469, 471, 472, 474, 476, 477, 478, 480, 484, 485, 486, 492, 493, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 535, 542], "vm": [27, 30, 330], "copi": [27, 29, 30, 282, 293, 320, 322, 327, 348, 405, 412, 416, 418, 419, 477, 483, 538, 540, 543, 551, 552, 553, 554, 555], "hostpath": [27, 30, 33, 293, 547, 564, 567], "expandus": [27, 564, 567], "mountpath": [27, 30, 33, 317, 547, 564, 567], "expect": [27, 34, 37, 279, 287, 319, 335, 469, 471, 473, 543, 547], "monitor": [27, 29, 309], "wait": [27, 123, 124, 169, 203, 277, 287, 297, 547], "finish": [27, 124, 203, 286, 305, 315, 333, 390, 393, 553], "remov": [27, 29, 121, 147, 166, 196, 240, 270, 280, 304, 306, 331, 335, 395, 412, 418, 420, 466, 469, 471, 473, 515, 518, 534, 540, 553], "remain": [27, 283, 300, 304, 319, 323, 389, 394, 474, 501], "statefulset": [27, 553], "svc": [27, 293], "left": [27, 36, 123, 300, 304, 331, 402, 405, 441, 473], "service_port": 28, "63800": 28, "launcher_typ": [28, 45], "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 45, 554], "0000": [28, 290, 306], "rpc_port": 28, "9600": 28, "sai": [28, 41], "configmap": [28, 317], "mount": [28, 30, 33, 287, 294, 319, 399, 547, 564, 566, 567], "ideal": [29, 37, 126, 283, 327], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 287, 293, 295, 306, 553, 564, 566], "minut": [29, 287, 294], "succe": 29, "past": [29, 126, 294, 555], "noteport": 29, "node_ip": [29, 553], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 317, 330, 400], "nodeport": [29, 317, 547, 553, 567], "echo": [29, 31], "listen": [29, 282, 283, 295, 330], "statement": [29, 394, 553], "ident": [29, 332, 348, 436, 437, 441, 512, 532, 534, 540], "expos": [29, 282, 302, 308, 392, 403, 547, 557], "reconnect": [29, 547], "disconnect": [29, 121, 280, 405, 481, 482, 497, 500, 547, 560], "sess2": 29, "comment": [29, 37, 290, 299, 300, 306, 319, 389, 540, 542, 543, 551, 568, 573], "homepag": 29, "remot": [29, 36, 203, 305, 317, 318, 335, 403, 547, 571], "cater": [29, 320], "tgz": 29, "unzip": [29, 280, 297, 298, 299, 305, 571], "zxvf": 29, "bundl": [30, 547], "aliv": 30, "reserv": 30, "simplifi": [30, 43, 293, 297, 320, 321, 322, 324, 326, 389, 394, 552], "etcd": [30, 287, 293, 547, 549, 564], "replica": [30, 293, 317], "etcd_replica": 30, "greater": [30, 33, 300, 304, 331, 390, 405, 459, 490, 547, 552], "ag": [30, 33, 45, 124, 125, 126, 166, 196, 203, 240, 248, 270, 277, 294, 302, 304, 306, 310, 325, 388, 389, 402, 546, 561, 571, 572], "33": [30, 283, 304, 390, 391, 393, 530, 533], "vineyardd": [30, 33, 295], "vineyardctl": [30, 547], "v6d": [30, 31, 293, 319, 547], "blob": [30, 287, 563], "cmd": [30, 330, 547], "readm": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 335], "md": [30, 400], "notic": [30, 33, 293, 302, 306, 320, 394, 402, 533, 540, 547, 555], "charact": [30, 125, 531, 536, 542], "vineyard_deploy": 30, "restart": [30, 46, 104, 182, 203, 256, 277, 284, 297, 561], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": [30, 297], "k8s_namespac": [30, 33, 387, 547], "k8s_vineyard_deploy": [30, 33, 387, 547], "reload": [30, 553], "vineyard_id": [30, 33, 402, 561], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 330, 402, 547, 552, 554], "softwar": [30, 33, 125, 284, 293, 296, 304, 309, 320, 402, 554], "successfulli": [30, 47, 67, 75, 92, 93, 104, 108, 124, 147, 176, 196, 203, 221, 250, 270, 277, 282, 295, 297, 299, 310, 315, 459, 553], "folder": [31, 38, 45, 129, 317, 319, 552], "cento": [31, 32, 287, 296, 328, 566, 570], "82": [31, 328], "boost": [31, 309, 320, 330], "perl": 31, "v3": [31, 324, 328], "24": [31, 196, 270, 293, 306, 328, 390, 391, 393, 507, 525, 533], "openmpi": [31, 328], "gflag": 31, "glog": 31, "arrow": [31, 125, 286, 330, 342, 355, 402, 543], "74": [31, 328, 531], "openssl": [31, 287, 566], "zlib": 31, "protobuf": [31, 42], "49": [31, 306, 328, 390, 391, 393], "13": [31, 35, 306, 328, 389, 390, 391, 393, 445, 486], "libclang": 31, "curl": [31, 305], "lo": [31, 305], "czf": 31, "mkdir": [31, 129, 287, 400, 566], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 286], "y": [31, 32, 306, 317, 318, 331, 486, 487, 491], "devtoolset": 31, "python38": 31, "opt": [31, 36, 123, 129, 294, 295, 311, 400], "bash": [31, 129, 297, 304, 317, 561, 565], "euxo": 31, "pipefail": 31, "dir": [31, 553], "prefix": [31, 37, 281, 287, 295, 300, 304, 317, 402, 534, 552, 571], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 565], "manylinux2010_x86_64": 31, "whl": [31, 395, 398], "x86_64": [31, 45, 127, 282, 317], "licens": [31, 565], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 389], "program_opt": 31, "regex": [31, 304], "chrono": 31, "atom": [31, 553], "date_tim": [31, 126], "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": [31, 129, 142, 163, 185, 279], "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 294, 320, 525, 553], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 330], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 129, 282, 287, 293, 296, 395, 564, 566, 570], "04": [32, 129, 287, 293, 296, 306, 328, 395, 564, 566, 570], "intel": [32, 296, 564, 566, 570], "appl": [32, 287, 296, 540, 564, 566, 570], "silicon": [32, 296, 564, 566], "jdk": [32, 293, 296, 308, 557, 563], "wheel": [32, 287, 458, 524, 566, 569], "manylinux2014": [32, 565], "abi": 32, "wish": [32, 37, 280], "nightli": [32, 287, 566], "tidi": 32, "quickli": [32, 36, 283, 297, 309, 321, 324, 325, 327, 400, 547], "insid": [32, 38, 45, 125, 287, 304, 306, 331, 339, 389, 401, 402, 515, 546, 547, 571], "apt": [32, 395], "ipython": 32, "tensorflow": [32, 309, 310, 312, 315, 316, 320, 321, 325, 326, 388, 389, 390, 393, 394, 396, 400, 567], "tool": [32, 35, 36, 45, 121, 127, 129, 280, 282, 283, 290, 293, 301, 307, 309, 311, 320, 487, 489, 549, 552, 553, 554, 570], "gsctl": [32, 41, 43, 124, 127, 128, 129, 277, 280, 282, 284, 285, 292, 295, 311, 564, 565], "dep": [32, 35, 128, 560, 564, 565], "fly": [32, 283, 321], "clang": [32, 35, 296, 565], "essenti": [32, 125, 126, 279, 287, 300, 304, 309, 324, 326], "arm": [32, 129], "preliminari": 32, "yet": [32, 203, 277, 282, 298, 304, 332, 497, 500, 540, 546, 553], "calcul": [33, 294, 304, 306, 331, 333, 391, 405, 459, 491], "period": [33, 553], "restor": [33, 547, 553], "persistentvolum": [33, 553], "dump": [33, 331, 367], "cat": [33, 45, 317, 318, 553, 561], "eof": [33, 45], "metadata": [33, 45, 71, 117, 124, 125, 129, 166, 167, 173, 180, 193, 240, 241, 248, 254, 267, 287, 317, 330, 402, 540, 549, 553], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 547], "persistentvolumeclaim": [33, 547, 553], "matchlabel": 33, "request": [33, 45, 46, 203, 277, 279, 287, 319, 330, 359, 390, 398, 401, 403, 434, 540, 547, 553, 566], "extern": [33, 37, 279, 313, 320, 547, 553], "ccc": 33, "sub_graph": [33, 302, 321, 567, 568], "haslabel": [33, 290, 296, 302, 306, 321, 571], "simple_g": [33, 321, 563, 567], "pr_result": 33, "tc_result": 33, "add_column": [33, 321, 330, 402, 563, 567, 568], "tc": [33, 321, 567], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 140, 147, 166, 173, 176, 182, 184, 196, 203, 240, 279, 547], "pvc_name": [33, 547], "schema": [33, 45, 46, 54, 92, 124, 125, 129, 137, 139, 160, 166, 203, 211, 240, 248, 277, 279, 283, 286, 294, 295, 299, 300, 301, 302, 306, 315, 316, 319, 331, 389, 390, 399, 402, 540, 549, 551, 552, 553, 554, 568, 571, 573], "oid_typ": [33, 319, 330, 331, 359, 381, 402, 547, 573], "ulong": 33, "lang": [33, 35, 125, 296, 299, 304, 321, 403], "eid": [33, 286, 299, 402, 553], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 123, 279, 292, 294, 301, 320, 324, 326, 327], "behind": [34, 315, 552, 555, 560, 561], "scene": [34, 294, 315, 397], "lower": [34, 294, 297, 304, 306, 324, 459, 466, 479], "cost": [34, 294, 297, 306, 320, 324, 405, 553], "ownership": 34, "cach": [34, 297, 310, 317, 323, 327, 540], "layout": [34, 323, 553], "were": [34, 37, 306, 328, 491, 553], "outperform": [34, 297, 309, 323, 325, 326, 327], "art": [34, 309, 323, 326, 328], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37, 283], "promot": 35, "readabl": [35, 304, 540], "qualiti": [35, 37, 325], "black": [35, 565], "enforc": 35, "rule": [35, 46, 47, 123, 129, 284, 294, 297, 306, 313, 323, 392, 398, 402, 439, 549], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 43, 44, 128, 285, 292, 317, 564, 565], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 129, 295, 305], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 45, 311], "devcontain": 36, "json": [36, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 147, 166, 167, 173, 182, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 293, 295, 300, 547, 549, 553, 554], "setup": [36, 37, 46, 277, 287, 402, 547, 565], "visual": [36, 37, 283, 320], "studio": 36, "collabor": [36, 320, 552], "stabl": [36, 331, 402, 549, 553, 570], "haven": [36, 277, 282, 306], "navig": [36, 552, 560], "icon": 36, "bottom": [36, 450], "corner": 36, "window": [36, 306, 570], "reopen": 36, "marketplac": 36, "prompt": [36, 299, 305], "shift": [36, 300, 304, 306, 405, 505], "ctrl": 36, "made": [36, 37, 45, 293, 297, 313, 328, 389, 392, 398, 405, 500, 552], "rebuild": 36, "subcommand": [36, 45, 311], "assembli": [36, 295], "learning_engin": 36, "graphlearn": [36, 38, 310, 312, 315, 316, 317, 321, 388, 389, 390, 394, 395, 400, 401, 404, 547, 561, 567, 572], "compos": [36, 38, 129, 310, 313, 321, 323, 327], "alon": [36, 294, 302, 560], "circul": [36, 443], "edit": [36, 37, 45, 299, 486, 523, 560], "entrypoint": [36, 560, 567], "plai": [36, 294, 308, 329, 399, 404, 557], "thank": [37, 290, 299, 320], "interest": [37, 306, 309, 323, 553], "focus": [37, 297, 306, 320, 326, 328, 394, 532, 553], "eager": [37, 331, 332, 381, 383, 402, 547], "contributor": [37, 533], "welcom": [37, 280], "engag": [37, 282, 320, 321], "good": 37, "particip": [37, 123], "join": [37, 123, 297, 300, 306, 317, 390, 400, 441, 444, 452, 459, 468, 469, 482, 484, 487, 488, 489, 490, 491, 499, 500, 540, 552], "ask": [37, 292], "question": [37, 292, 301, 306, 566], "ve": [37, 293, 298, 305, 320], "hasn": [37, 306], "confirm": [37, 297], "concis": [37, 302, 324, 403], "descript": [37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 284, 293, 294, 300, 304, 313, 317, 319, 389, 392, 397, 398, 402, 497, 505, 553], "relev": [37, 123, 124, 395, 434, 540, 551], "reproduc": [37, 540], "yourself": 37, "why": [37, 287, 306, 331], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 290, 299, 310, 325, 396], "submiss": 37, "fact": [37, 294, 299, 497, 500], "page": [37, 120, 121, 122, 124, 278, 280, 292, 322, 331, 334, 336, 450, 465, 529, 569], "button": [37, 299], "tbf": [37, 291, 328, 548, 559, 562], "isn": [37, 302, 393], "someon": 37, "approach": [37, 283, 297, 299, 302, 309, 310, 320, 322, 324, 325, 393, 469, 482, 537, 552], "spend": 37, "secret": [37, 319, 547, 564, 573], "accident": 37, "hook": 37, "titl": [37, 124, 306, 316, 321], "grammar": 37, "spell": [37, 125], "500": [37, 47, 67, 75, 92, 93, 104, 108, 118, 129, 147, 166, 173, 176, 182, 196, 221, 240, 248, 250, 256, 270, 459], "word": [37, 306, 316, 321, 324, 325, 400, 402, 540], "42": [37, 306, 328, 390, 391, 393, 463, 465, 475, 533], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 324], "patch": 37, "rest": [37, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 128, 129, 285, 540, 553], "attain": 37, "brief": [37, 279, 289], "valid": [37, 129, 284, 294, 297, 315, 316, 325, 338, 388, 435, 459, 481, 487, 536, 547, 549], "typo": 37, "feat": 37, "inv": [37, 394, 400, 571], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 553], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 405, 540], "insight": [37, 45, 290, 323, 325, 560], "feedback": [37, 290], "discourag": 37, "rebas": 37, "workflow": [37, 45, 129, 290, 320, 325, 326, 330], "upstream": [37, 394], "leas": 37, "ping": [37, 563], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 285, 292, 533], "approv": 37, "date": [37, 126, 300, 306, 551, 552, 553], "todo": [37, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 127, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 279, 280, 300, 317, 318, 398], "dongz": 37, "potenti": [37, 283, 310, 320, 552], "concern": [37, 320, 327, 552], "reach": [37, 287, 302, 306, 324, 394, 399, 402, 405, 482, 497, 500, 552], "action": 37, "realiti": [37, 394], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 319, 547, 553], "failur": [37, 327], "stream": [38, 287, 293, 304, 305, 306, 310, 394, 399, 402], "stdout": 38, "log_level": [38, 123, 129, 317, 387], "permiss": [38, 46, 126, 287, 339, 566], "consol": [38, 293, 295, 299, 307, 309, 319, 324, 403, 553, 569], "frontend": [38, 39, 101, 129, 293, 295, 296, 298, 305, 553, 561], "event": [38, 459], "involvedobject": 38, "warn": [38, 123, 540], "pinpoint": 38, "exec": [38, 553, 561], "diagnost": 38, "forward": [38, 283, 310, 312, 313, 315, 316, 321, 325, 394, 553, 567], "browser": [38, 306], "explain": [38, 297, 306, 389, 547, 552, 571], "leverag": [39, 203, 297, 301, 302, 308, 309, 322, 324, 335, 532, 549, 553, 557], "opentelemetri": 39, "javaag": 39, "agent": 39, "protocol": [39, 279, 298, 301, 319, 327, 547], "java_tool_opt": 39, "TO": 39, "otel_service_nam": 39, "compris": [41, 124, 129, 300, 302, 316, 320, 393], "busi": [41, 294, 306, 310, 319, 320, 321, 327], "e2": [41, 519], "coupl": [41, 322, 327, 520, 549], "entri": [43, 294, 297, 304, 306, 313, 315, 404, 405, 452, 469, 471, 472, 497, 499, 500, 518, 560], "swagger": 43, "shield": 43, "understand": [43, 44, 124, 125, 128, 279, 306, 313, 324, 388, 394, 402, 552], "flex": [43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 122, 124, 129, 203, 277, 278, 279, 283, 285, 300, 560], "destroi": [43, 285, 560], "arch": 45, "amd64": [45, 127], "vscode": 45, "openapi": [45, 46, 120, 122, 129, 278], "middl": [45, 409], "http_port": 45, "8080": [45, 121, 123, 127, 280], "referenc": [45, 129, 332], "pytest": [45, 46, 277], "test_interact": 45, "storedprocedur": [45, 139, 160], "127": [45, 121, 203, 277, 280, 282, 284, 295, 328, 553], "explan": [45, 126, 283, 297, 331, 392], "test_graph": [45, 124, 203, 240, 248, 277], "vertex_typ": [45, 62, 85, 124, 126, 166, 203, 215, 235, 240, 248, 277], "type_nam": [45, 46, 48, 52, 59, 66, 67, 69, 72, 83, 91, 92, 119, 124, 125, 126, 166, 203, 205, 209, 212, 219, 229, 233, 239, 240, 248, 273, 275, 277], "property_nam": [45, 51, 63, 87, 124, 125, 126, 166, 203, 208, 218, 238, 240, 248, 277, 306, 332, 333, 546], "property_typ": [45, 51, 63, 87, 124, 126, 166, 203, 208, 218, 238, 240, 248, 277], "primitive_typ": [45, 79, 99, 124, 126, 166, 203, 232, 240, 247, 248, 250, 277], "dt_signed_int64": [45, 124, 126, 158, 166, 172, 203, 240, 248, 277], "long_text": [45, 95, 111, 124, 126, 166, 203, 240, 244, 248, 261, 277], "dt_signed_int32": [45, 124, 126, 158, 166, 172, 203, 240, 248, 250, 277], "primary_kei": [45, 48, 52, 59, 66, 83, 91, 124, 126, 166, 203, 209, 219, 239, 240, 248, 277, 553], "vertex_type_pair_rel": [45, 48, 59, 83, 124, 126, 166, 203, 205, 212, 233, 240, 248, 277], "source_vertex": [45, 49, 69, 77, 124, 125, 126, 166, 203, 206, 227, 240, 248, 276, 277], "destination_vertex": [45, 49, 69, 77, 124, 125, 126, 166, 203, 206, 227, 240, 248, 276, 277], "many_to_mani": [45, 124, 126, 132, 166, 203, 240, 248, 277], "dt_doubl": [45, 124, 126, 158, 166, 172, 203, 240, 248, 277], "bind": [45, 67, 121, 331, 552], "submit": [45, 93, 124, 128, 167, 176, 250, 279, 283, 285, 294, 298, 299, 304, 305, 306, 321, 324, 389, 390, 403, 549, 553, 567], "datasourc": [45, 46, 67, 124, 178, 319, 573], "graph_id": [45, 46, 61, 67, 92, 93, 104, 105, 107, 108, 147, 166, 167, 173, 176, 196, 203, 214, 221, 240, 241, 248, 250, 256, 258, 270, 277, 279, 547], "csv": [45, 124, 166, 203, 240, 277, 285, 290, 293, 297, 299, 319, 402, 540, 543, 551, 553, 554, 567, 568, 573], "column_map": [45, 54, 76, 119, 124, 125, 166, 203, 211, 223, 240, 273, 277], "edge_map": [45, 76, 103, 124, 125, 166, 203, 223, 240, 251, 277], "type_triplet": [45, 76, 124, 125, 166, 203, 223, 240, 277], "person_knows_person": [45, 124, 125, 166, 203, 240, 277, 553], "source_vertex_map": [45, 76, 124, 125, 166, 203, 223, 240, 277], "destination_vertex_map": [45, 76, 124, 125, 166, 203, 223, 240, 277], "loaderjob": [45, 124], "job_config": 45, "loading_config": [45, 68, 124, 125, 251, 277], "import_opt": [45, 70, 124, 125, 252, 277], "overwrit": [45, 124, 125, 178, 547, 553], "delimit": [45, 124, 125, 293, 297, 402, 542, 554, 568], "header_row": [45, 124, 125, 293, 402, 554], "openapitool": 46, "pythonclientcodegen": 46, "git_user_id": 46, "git_repo_id": 46, "sudo": [46, 277, 395, 564, 565], "apiexcept": [46, 47, 67, 75, 92, 93, 104, 108, 118, 176], "pprint": [46, 47, 67, 75, 92, 93, 104, 108, 118], "localhost": [46, 47, 67, 75, 92, 93, 104, 108, 118, 129, 280, 295, 298, 305, 317, 319, 547, 573], "apicli": [46, 47, 67, 75, 92, 93, 104, 108, 118, 176, 547], "api_cli": [46, 47, 67, 75, 92, 93, 104, 108, 118, 547], "api_inst": [46, 47, 67, 75, 92, 93, 104, 108, 118], "alertapi": 46, "create_alert_receiver_request": [46, 47, 56], "createalertreceiverrequest": [46, 47], "api_respons": [46, 47, 67, 75, 92, 93, 104, 108, 118], "create_alert_receiv": 46, "uri": [46, 47, 67, 75, 92, 93, 104, 108, 118, 129, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 298, 319, 402, 551, 573], "post": [46, 47, 67, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 287, 306, 319, 394, 459, 573], "alert": [46, 47], "delete_alert_message_in_batch": 46, "delete_alert_receiver_by_id": 46, "receiver_id": [46, 47], "delete_alert_rule_by_id": 46, "rule_id": [46, 47], "list_alert_messag": 46, "list_alert_receiv": 46, "list_alert_rul": 46, "update_alert_message_in_batch": 46, "update_alert_receiver_by_id": 46, "update_alert_rule_by_id": 46, "datasourceapi": 46, "bind_datasource_in_batch": 46, "get_datasource_by_id": 46, "unbind_edge_datasourc": 46, "unbind_vertex_datasourc": 46, "deploymentapi": 46, "get_deployment_info": 46, "get_deployment_pod_log": 46, "get_deployment_resource_usag": 46, "get_deployment_statu": 46, "get_storage_usag": 46, "graphapi": 46, "create_edge_typ": [46, 59, 212], "create_graph": [46, 240, 248, 277], "create_vertex_typ": [46, 66, 219], "delete_edge_type_by_nam": 46, "delete_graph_by_id": 46, "delete_vertex_type_by_nam": 46, "get_graph_by_id": 46, "get_schema_by_id": 46, "import_schema_by_id": 46, "list_graph": [46, 240], "jobapi": 46, "delete_job_by_id": 46, "job_id": [46, 58, 93, 124, 167, 203, 240, 241, 242, 277], "get_dataloading_job_config": 46, "dataload": [46, 93, 166, 167, 203, 240, 241, 277, 317, 318], "get_job_by_id": 46, "list_job": [46, 241], "submit_dataloading_job": 46, "serviceapi": 46, "get_service_status_by_id": 46, "list_service_statu": 46, "restart_servic": [46, 256], "start_servic": [46, 256, 277], "stop_servic": [46, 256, 277], "storedprocedureapi": 46, "create_stored_procedur": 46, "storedproc": [46, 108, 123, 127, 281, 284], "delete_stored_procedure_by_id": 46, "stored_procedure_id": [46, 65, 108], "get_stored_procedure_by_id": 46, "list_stored_procedur": 46, "update_stored_procedure_by_id": 46, "utilsapi": 46, "upload_fil": 46, "baseedgetyp": [46, 203, 277], "baseedgetypevertextypepairrelationsinn": [46, 48, 59, 83, 131, 138, 159, 203, 205, 212, 233, 277], "baseedgetypevertextypepairrelationsinnerxcsrparam": [46, 49, 132, 203, 206, 277], "basepropertymeta": [46, 203, 277], "basevertextyp": [46, 203, 277], "basevertextypexcsrparam": [46, 52, 66, 91, 135, 145, 165, 203, 209, 219, 239, 277], "columnmap": [46, 76, 119, 149, 199, 203, 223, 273, 277], "columnmappingcolumn": [46, 54], "createalertrulerequest": [46, 47], "createdataloadingjobrespons": [46, 93], "createedgetyp": [46, 62, 92, 141, 203, 215, 277], "creategraphrequest": [46, 92, 166, 203, 240, 248, 277], "creategraphrespons": [46, 92, 166, 203, 240, 277], "creategraphschemarequest": [46, 60, 92, 139, 203, 213, 277], "createpropertymeta": [46, 59, 66, 138, 145, 203, 212, 219, 277], "createstoredprocrequest": [46, 60, 108], "createstoredprocrespons": [46, 108], "createvertextyp": [46, 62, 92, 141, 203, 215, 277], "dataloadingjobconfig": [46, 93], "dataloadingjobconfigedgesinn": [46, 68], "dataloadingjobconfigloadingconfig": [46, 68], "dataloadingjobconfigloadingconfigformat": [46, 70], "dataloadingjobconfigverticesinn": [46, 68], "dataloadingmrjobconfig": [46, 93], "datetyp": [46, 203, 277], "edgemappingtypetriplet": [46, 76, 149, 203, 223, 277], "gsdatatyp": [46, 51, 63, 87, 97, 134, 144, 164, 171, 176, 191, 203, 208, 218, 238, 246, 250, 265, 277], "getalertmessagerespons": [46, 47], "getalertreceiverrespons": [46, 47], "getalertrulerespons": [46, 47], "getedgetyp": [46, 85, 161, 203, 235, 277], "getgraphrespons": [46, 92, 166, 183, 203, 240, 257, 277], "getgraphschemarespons": [46, 84, 92, 160, 166, 203, 234, 240, 277], "getpodlogrespons": [46, 75], "getpropertymeta": [46, 83, 91, 159, 165, 203, 233, 239, 277], "getresourceusagerespons": [46, 75], "getstorageusagerespons": [46, 75], "getstoredprocrespons": [46, 84, 108], "getvertextyp": [46, 85, 161, 203, 235, 277], "jobstatu": [46, 93, 167, 203, 241, 277], "longtext": [46, 187, 203, 277], "nodestatu": [46, 102], "podstatu": [46, 102], "primitivetyp": [46, 158, 176, 203, 250, 277], "resourceusag": [46, 88], "runningdeploymentinfo": [46, 75], "runningdeploymentstatu": [46, 75], "schemamap": [46, 67, 160, 166, 203, 234, 240, 277], "servicestatu": [46, 104, 182, 203, 256, 277], "servicestatussdkendpoint": [46, 105], "startservicerequest": [46, 104, 182, 203, 256, 277, 279], "storedproceduremeta": [46, 203, 277], "stringtyp": [46, 203, 277], "stringtypestr": [46, 79, 110, 158, 186, 203, 232, 260, 277], "temporaltyp": [46, 203, 277], "temporaltypetempor": [46, 79, 112, 158, 188, 203, 232, 262, 277], "timestamptyp": [46, 203, 277], "updatealertmessagestatusrequest": [46, 47], "updatestoredprocrequest": [46, 108], "uploadfilerespons": [46, 118, 203, 277], "inc": 46, "No": [47, 67, 75, 92, 93, 104, 108, 118, 125, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270, 287, 304, 540], "200": [47, 67, 75, 92, 93, 104, 108, 118, 129, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270, 306, 388, 546, 556, 572], "back": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 306, 309, 315, 398, 552, 560], "message_id": [47, 115], "message_ids_exampl": 47, "comma": [47, 389], "id1": [47, 571], "id2": [47, 571], "id3": 47, "Not": [47, 67, 75, 92, 93, 104, 108, 147, 166, 167, 173, 182, 196, 221, 240, 241, 248, 256, 270, 283, 540, 553], "receiver_id_exampl": 47, "rule_id_exampl": 47, "alert_typ": 47, "start_tim": [47, 94, 105, 243, 257], "end_tim": [47, 94, 243], "get_alert_message_respons": [47, 80], "alert_type_exampl": 47, "status_exampl": 47, "severity_exampl": 47, "start_time_exampl": 47, "02": [47, 68, 306, 467], "56": [47, 68, 306, 328, 439, 533], "30": [47, 68, 306, 328, 390, 391, 393, 464, 509, 511, 516, 553, 571], "end_time_exampl": 47, "quot": [47, 125], "get_alert_receiver_respons": [47, 81], "get_alert_rule_respons": [47, 82], "update_alert_message_status_request": [47, 115], "create_alert_rule_request": [47, 57], "base_edge_typ": [48, 205], "base_edge_type_inst": [48, 205], "from_json": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276], "to_json": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276], "base_edge_type_dict": [48, 205], "to_dict": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276], "base_edge_type_from_dict": [48, 205], "from_dict": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277], "x_csr_param": [49, 52, 66, 91, 125, 126, 206, 209, 219, 239, 252], "base_edge_type_vertex_type_pair_relations_inn": [49, 206], "base_edge_type_vertex_type_pair_relations_inner_inst": [49, 206], "base_edge_type_vertex_type_pair_relations_inner_dict": [49, 206], "base_edge_type_vertex_type_pair_relations_inner_from_dict": [49, 206], "edge_storage_strategi": [50, 126, 207], "base_edge_type_vertex_type_pair_relations_inner_x_csr_param": [50, 207], "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_inst": [50, 207], "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_dict": [50, 207], "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_from_dict": [50, 207], "nullabl": [51, 63, 87], "default_valu": [51, 63, 87], "base_property_meta": [51, 208], "base_property_meta_inst": [51, 208], "base_property_meta_dict": [51, 208], "base_property_meta_from_dict": [51, 208], "base_vertex_typ": [52, 209], "base_vertex_type_inst": [52, 209], "base_vertex_type_dict": [52, 209], "base_vertex_type_from_dict": [52, 209], "max_vertex_num": [53, 126, 210], "base_vertex_type_x_csr_param": [53, 210], "base_vertex_type_x_csr_params_inst": [53, 210], "base_vertex_type_x_csr_params_dict": [53, 210], "base_vertex_type_x_csr_params_from_dict": [53, 210], "var_properti": [54, 211, 224, 225], "align": [54, 123, 124, 125, 126, 137, 211, 280, 294, 304, 313, 324, 388, 391, 392, 491, 552], "column_mapping_inst": [54, 211], "column_mapping_dict": [54, 211], "column_mapping_from_dict": [54, 211], "column_mapping_column": 55, "column_mapping_column_inst": 55, "column_mapping_column_dict": 55, "column_mapping_column_from_dict": 55, "webhook_url": [56, 81], "at_user_id": [56, 81], "is_at_al": [56, 81], "create_alert_receiver_request_inst": 56, "create_alert_receiver_request_dict": 56, "create_alert_receiver_request_from_dict": 56, "metric_typ": [57, 80, 82], "conditions_descript": [57, 82], "frequenc": [57, 82, 414], "create_alert_rule_request_inst": 57, "create_alert_rule_request_dict": 57, "create_alert_rule_request_from_dict": 57, "create_dataloading_job_respons": [58, 93], "create_dataloading_job_response_inst": 58, "create_dataloading_job_response_dict": 58, "create_dataloading_job_response_from_dict": 58, "create_edge_type_inst": [59, 212], "create_edge_type_dict": [59, 212], "create_edge_type_from_dict": [59, 212], "stored_procedur": [60, 84, 213, 234], "var_schema": [60, 84, 213, 234], "create_graph_request": [60, 92, 213, 240, 248, 277], "create_graph_request_inst": [60, 213], "create_graph_request_dict": [60, 213], "create_graph_request_from_dict": [60, 213], "create_graph_respons": [61, 92, 214], "create_graph_response_inst": [61, 214], "create_graph_response_dict": [61, 214], "create_graph_response_from_dict": [61, 214], "create_graph_schema_request": [62, 92, 215], "create_graph_schema_request_inst": [62, 215], "create_graph_schema_request_dict": [62, 215], "create_graph_schema_request_from_dict": [62, 215], "create_property_meta": [63, 218], "create_property_meta_inst": [63, 218], "create_property_meta_dict": [63, 218], "create_property_meta_from_dict": [63, 218], "create_stored_proc_request": [64, 108], "create_stored_proc_request_inst": 64, "create_stored_proc_request_dict": 64, "create_stored_proc_request_from_dict": 64, "create_stored_proc_respons": [65, 108], "create_stored_proc_response_inst": 65, "create_stored_proc_response_dict": 65, "create_stored_proc_response_from_dict": 65, "create_vertex_type_inst": [66, 219], "create_vertex_type_dict": [66, 219], "create_vertex_type_from_dict": [66, 219], "schema_map": [67, 103, 240, 251], "graph_id_exampl": [67, 92, 93, 104, 108], "400": [67, 92, 93, 104, 108, 129, 147, 166, 173, 196, 221, 240, 248, 270, 546], "bad": [67, 92, 93, 104, 108, 147, 173, 196, 221, 248, 270, 297], "source_vertex_typ": [67, 92], "destination_vertex_typ": [67, 92], "unbind": 67, "ourc": 67, "type_name_exampl": [67, 92], "source_vertex_type_exampl": [67, 92], "destination_vertex_type_exampl": [67, 92], "repeat": [68, 302, 324, 325, 394, 400, 474, 479, 482, 502, 505, 571], "dataloading_job_config": [68, 93], "dataloading_job_config_inst": 68, "dataloading_job_config_dict": 68, "dataloading_job_config_from_dict": 68, "dataloading_job_config_edges_inn": 69, "dataloading_job_config_edges_inner_inst": 69, "dataloading_job_config_edges_inner_dict": 69, "dataloading_job_config_edges_inner_from_dict": 69, "dataloading_job_config_loading_config": 70, "dataloading_job_config_loading_config_inst": 70, "dataloading_job_config_loading_config_dict": 70, "dataloading_job_config_loading_config_from_dict": 70, "dataloading_job_config_loading_config_format": 71, "dataloading_job_config_loading_config_format_inst": 71, "dataloading_job_config_loading_config_format_dict": 71, "dataloading_job_config_loading_config_format_from_dict": 71, "dataloading_job_config_vertices_inn": 72, "dataloading_job_config_vertices_inner_inst": 72, "dataloading_job_config_vertices_inner_dict": 72, "dataloading_job_config_vertices_inner_from_dict": 72, "dataloading_mr_job_config": [73, 93], "dataloading_mr_job_config_inst": 73, "dataloading_mr_job_config_dict": 73, "dataloading_mr_job_config_from_dict": 73, "date32": [74, 113, 126, 146, 189, 220, 263], "date_typ": [74, 220], "date_type_inst": [74, 220], "date_type_dict": [74, 220], "date_type_from_dict": [74, 220], "running_deployment_info": [75, 101], "pod_nam": [75, 553, 561, 566], "from_cach": 75, "deprec": [75, 402, 420, 518], "get_pod_log_respons": [75, 86], "pod_name_exampl": 75, "component_exampl": 75, "get_resource_usage_respons": [75, 88], "running_deployment_statu": [75, 102], "groot": [75, 292, 302, 320, 327], "get_storage_usage_respons": [75, 89], "edge_mapping_inst": [76, 223], "edge_mapping_dict": [76, 223], "edge_mapping_from_dict": [76, 223], "edge_mapping_type_triplet": [77, 227], "edge_mapping_type_triplet_inst": [77, 227], "edge_mapping_type_triplet_dict": [77, 227], "edge_mapping_type_triplet_from_dict": [77, 227], "error_inst": 78, "error_dict": 78, "error_from_dict": 78, "tempor": [79, 112, 158, 188, 232, 262, 300, 304], "gs_data_typ": [79, 232], "gs_data_type_inst": [79, 232], "gs_data_type_dict": [79, 232], "gs_data_type_from_dict": [79, 232], "alert_nam": 80, "trigger_tim": 80, "get_alert_message_response_inst": 80, "get_alert_message_response_dict": 80, "get_alert_message_response_from_dict": 80, "get_alert_receiver_response_inst": 81, "get_alert_receiver_response_dict": 81, "get_alert_receiver_response_from_dict": 81, "get_alert_rule_response_inst": 82, "get_alert_rule_response_dict": 82, "get_alert_rule_response_from_dict": 82, "type_id": [83, 91, 229, 233, 239, 275], "get_edge_typ": [83, 233], "get_edge_type_inst": [83, 233], "get_edge_type_dict": [83, 233], "get_edge_type_from_dict": [83, 233], "store_typ": [84, 234], "creation_tim": [84, 98, 101, 234, 237], "data_update_tim": [84, 234], "schema_update_tim": 84, "get_graph_respons": [84, 92, 234], "get_graph_response_inst": [84, 234], "get_graph_response_dict": [84, 234], "get_graph_response_from_dict": [84, 234], "get_graph_schema_respons": [85, 92, 235], "get_graph_schema_response_inst": [85, 235], "get_graph_schema_response_dict": [85, 235], "get_graph_schema_response_from_dict": [85, 235], "get_pod_log_response_inst": 86, "get_pod_log_response_dict": 86, "get_pod_log_response_from_dict": 86, "property_id": [87, 238, 333], "get_property_meta": [87, 238], "get_property_meta_inst": [87, 238], "get_property_meta_dict": [87, 238], "get_property_meta_from_dict": [87, 238], "cpu_usag": [88, 96, 98], "memory_usag": [88, 96, 98], "get_resource_usage_response_inst": 88, "get_resource_usage_response_dict": 88, "get_resource_usage_response_from_dict": 88, "storage_usag": 89, "get_storage_usage_response_inst": 89, "get_storage_usage_response_dict": 89, "get_storage_usage_response_from_dict": 89, "bound_graph": [90, 237], "get_stored_proc_respons": [90, 108], "get_stored_proc_response_inst": 90, "get_stored_proc_response_dict": 90, "get_stored_proc_response_from_dict": 90, "get_vertex_typ": [91, 239], "get_vertex_type_inst": [91, 239], "get_vertex_type_dict": [91, 239], "get_vertex_type_from_dict": [91, 239], "delete_schedul": 93, "job_id_exampl": 93, "successfuli": 93, "mapreduc": [93, 553], "job_statu": [93, 94, 243], "logview": 94, "job_status_inst": [94, 243], "job_status_dict": [94, 243], "job_status_from_dict": [94, 243], "long_text_inst": [95, 244], "long_text_dict": [95, 244], "long_text_from_dict": [95, 244], "disk_usag": 96, "node_statu": 96, "node_status_inst": 96, "node_status_dict": 96, "node_status_from_dict": 96, "parameter_inst": [97, 246], "parameter_dict": [97, 246], "parameter_from_dict": [97, 246], "restart_count": 98, "timestamp": [98, 100, 113, 114, 126, 189, 190, 263, 264, 551, 553], "component_belong_to": 98, "pod_statu": 98, "pod_status_inst": 98, "pod_status_dict": 98, "pod_status_from_dict": 98, "primitive_type_inst": [99, 247], "primitive_type_dict": [99, 247], "primitive_type_from_dict": [99, 247], "resource_usag": 100, "resource_usage_inst": 100, "resource_usage_dict": 100, "resource_usage_from_dict": 100, "instance_nam": 101, "running_deployment_info_inst": 101, "running_deployment_info_dict": 101, "running_deployment_info_from_dict": 101, "running_deployment_status_inst": 102, "running_deployment_status_dict": 102, "running_deployment_status_from_dict": 102, "schema_mapping_inst": [103, 251], "schema_mapping_dict": [103, 251], "schema_mapping_from_dict": [103, 251], "service_statu": [104, 105, 257], "start_service_request": [104, 107, 256, 258, 277], "sdk_endpoint": 105, "service_status_inst": [105, 257], "service_status_dict": [105, 257], "service_status_from_dict": [105, 257], "cypher": [106, 123, 124, 127, 128, 129, 142, 163, 173, 185, 248, 279, 284, 285, 293, 294, 295, 296, 297, 299, 301, 320, 321, 322, 326, 327, 403, 547], "hqp": [106, 129], "service_status_sdk_endpoint": 106, "service_status_sdk_endpoints_inst": 106, "service_status_sdk_endpoints_dict": 106, "service_status_sdk_endpoints_from_dict": 106, "start_service_request_inst": [107, 258], "start_service_request_dict": [107, 258], "start_service_request_from_dict": [107, 258], "stored_procedure_id_exampl": 108, "update_stored_proc_request": [108, 116], "stored_procedure_meta": [109, 259], "stored_procedure_meta_inst": [109, 259], "stored_procedure_meta_dict": [109, 259], "stored_procedure_meta_from_dict": [109, 259], "string_typ": [110, 260], "string_type_inst": [110, 260], "string_type_dict": [110, 260], "string_type_from_dict": [110, 260], "string_type_str": [111, 261], "string_type_string_inst": [111, 261], "string_type_string_dict": [111, 261], "string_type_string_from_dict": [111, 261], "temporal_typ": [112, 262], "temporal_type_inst": [112, 262], "temporal_type_dict": [112, 262], "temporal_type_from_dict": [112, 262], "temporal_type_tempor": [113, 263], "temporal_type_temporal_inst": [113, 263], "temporal_type_temporal_dict": [113, 263], "temporal_type_temporal_from_dict": [113, 263], "time_stamp_typ": [114, 264], "time_stamp_type_inst": [114, 264], "time_stamp_type_dict": [114, 264], "time_stamp_type_from_dict": [114, 264], "update_alert_message_status_request_inst": 115, "update_alert_message_status_request_dict": 115, "update_alert_message_status_request_from_dict": 115, "update_stored_proc_request_inst": 116, "update_stored_proc_request_dict": 116, "update_stored_proc_request_from_dict": 116, "file_path": [117, 267], "upload_file_respons": [117, 118, 267], "upload_file_response_inst": [117, 267], "upload_file_response_dict": [117, 267], "upload_file_response_from_dict": [117, 267], "filestorag": 118, "bytearrai": 118, "multipart": 118, "vertex_mapping_inst": [119, 273], "vertex_mapping_dict": [119, 273], "vertex_mapping_from_dict": [119, 273], "stub": [120, 122, 278, 328, 334, 336, 469, 497, 500], "openapi_coordin": [120, 122], "execu": 121, "redeploi": 121, "what": [121, 123, 280, 287, 293, 306, 307, 324, 399, 486, 540, 546, 552], "gs_interactive_default_graph": [121, 280, 284], "shutdown": [121, 280, 317], "uninstal": [121, 280, 287, 293, 566], "v0": [123, 328, 395, 543], "admin": [123, 127, 128, 129, 256, 282, 283, 297, 402, 553], "7777": [123, 127, 129, 203, 277, 282, 284], "10000": [123, 127, 129, 203, 277, 282, 284, 537], "7687": [123, 127, 129, 203, 277, 282, 283, 284, 293, 295, 298, 299], "meta": [123, 127, 129, 295, 297, 300, 310, 319, 330, 391, 392, 551, 553], "8081": [123, 127], "7778": [123, 127], "7688": [123, 127], "10001": [123, 127, 389, 390, 391, 393], "tailor": [123, 297], "interactive_config": 123, "unconfigur": 123, "glimps": 123, "fatal": 123, "verbose_level": 123, "compute_engin": [123, 129], "thread_num_per_work": [123, 129], "planner": [123, 129, 284, 297], "is_on": [123, 129], "rbo": [123, 129, 294, 297], "filtermatchrul": [123, 129, 297], "filterintojoinrul": [123, 129, 297], "notexisttoantijoinrul": 123, "query_timeout": [123, 129], "20000": 123, "timeout": [123, 287, 295, 296, 553], "millisecond": [123, 126, 300, 304, 328, 551], "hierarchi": [123, 125], "propertynam": [123, 134, 144, 164, 553], "databas": [123, 128, 129, 281, 287, 294, 297, 300, 301, 304, 306, 320, 322, 324, 326, 328, 553, 563], "benefit": [123, 305, 319, 323, 552], "throughput": [123, 283, 285, 294, 320, 326, 327, 553], "claus": [123, 283, 301], "calcit": [123, 293, 297], "notmatchtoantijoinrul": [123, 129], "transform": [123, 294, 297, 306, 330, 342, 355, 532, 540, 541, 545, 551], "anti": [123, 300, 320, 324, 327], "3000000": [123, 295, 296, 553], "repli": [123, 306], "definit": [124, 129, 304, 320, 405, 486, 487, 489], "comprehens": [124, 203, 277, 283, 297, 320, 326, 328, 329], "consult": [124, 127], "dataourc": 124, "xxx": [124, 296, 299, 398, 402, 547, 563], "desc": [124, 284, 304, 306], "hangzhou": [124, 319, 389, 573], "taglin": 124, "born": 124, "acted_in": [124, 297], "review": [124, 320, 331, 405, 469, 487], "wrote": 124, "graph_algo": 124, "delv": 125, "deeper": [125, 297], "thorough": 125, "data_sourc": [125, 252, 277], "col_nam": 125, "disregard": 125, "examin": [125, 321], "modern_graph_import": 125, "showcas": 125, "dissect": 125, "prepend": 125, "build_csr_in_mem": [125, 255], "use_mmap_vector": [125, 255], "quote_char": 125, "double_quot": 125, "escape_char": 125, "block_siz": 125, "4mb": 125, "dst_id": [125, 389, 390, 391, 393, 394, 400, 404], "person_created_softwar": 125, "dd_graph": 125, "your_proj_nam": 125, "table_nam": 125, "partition_col_nam": 125, "partition_nam": 125, "src_user_id": 125, "dst_user_id": 125, "mandatori": [125, 126, 321, 389], "ye": [125, 290, 540], "header": [125, 293, 402, 552, 553], "escap": 125, "null_valu": 125, "recogn": [125, 552, 553], "null": [125, 300, 304, 405, 422, 438, 439, 446, 453, 505, 535, 540], "batch_siz": [125, 313, 315, 317, 318, 388, 392, 393, 394, 397, 400, 556, 572], "mmap_vector": 125, "mmap_arrai": 125, "triplet": [125, 126, 302], "outlin": [125, 295, 300], "seamlessli": [125, 203, 277, 280, 290, 293, 297, 301, 307, 309, 320, 326, 327], "encompass": [126, 298, 305, 316], "friendship": 126, "peopl": [126, 294, 299, 306, 540, 553], "since_d": 126, "terminologi": [126, 300], "delin": 126, "plan": [126, 129, 283, 284, 294, 297, 300, 320, 322, 323, 324, 335, 553, 561], "dt_unsigned_int32": [126, 158, 172], "dt_unsigned_int64": [126, 158, 172], "var_char": [126, 261, 268], "fixed_char": [126, 230], "character": [126, 392], "exclus": [126, 300], "symbol": 126, "skill": 126, "profici": [126, 306], "one_to_on": [126, 132], "one_to_mani": [126, 132], "many_to_on": [126, 132], "mmap": 126, "48": [126, 290, 328, 390, 391, 393, 492, 493, 539], "only_in": [126, 133], "only_out": [126, 133], "both_out_in": [126, 133], "pertain": [126, 293], "dt_bool": [126, 158, 172], "dt_float": [126, 158, 172], "categor": [126, 129, 283, 313], "subtyp": 126, "length": [126, 279, 286, 290, 300, 304, 306, 319, 324, 331, 392, 405, 444, 446, 451, 473, 494, 498, 504, 526, 535, 540, 573], "unlimit": 126, "text": [126, 176, 250, 325, 333, 441], "char": [126, 230, 261, 399, 402, 552], "fixed_length": [126, 231], "desir": [126, 284, 302, 402, 459, 481, 501, 503, 504], "restrict": 126, "max_length": [126, 269], "uint32": [126, 300], "situat": [126, 304, 306, 309, 389, 390, 553], "df_yyyy_mm_dd": 126, "iso": 126, "fomat": 126, "2019": [126, 533], "01": [126, 306, 312, 316, 318, 321, 331, 389, 405, 464, 567], "date_format": 126, "tf_hh_mm_ss_sss": 126, "00": [126, 306], "000": [126, 293, 306, 328], "time_format": 126, "tzf_utc": 126, "tzf_offset": 126, "time_zone_format": 126, "dtf_yyyy_mm_dd_hh_mm_ss_sss": 126, "date_time_format": 126, "int32": [126, 300, 312, 316, 321, 389, 391, 399, 400, 551, 567], "1970": 126, "time32": 126, "midnight": 126, "int64": [126, 300, 319, 333, 359, 381, 389, 391, 392, 397, 399, 400, 402, 547, 551, 573], "000000": 126, "zone": [126, 300], "signifi": [126, 424, 425], "integ": [126, 130, 136, 152, 155, 157, 159, 160, 162, 163, 164, 165, 169, 181, 183, 195, 196, 201, 202, 270, 297, 300, 304, 405, 440, 443, 444, 445, 446, 447, 449, 451, 452, 454, 455, 458, 459, 462, 463, 464, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 505, 518, 532, 533, 534, 535, 537, 540, 551, 553], "januari": 126, "timezon": 126, "albeit": 126, "previous": [126, 306, 339, 476, 477, 478, 551, 552], "mention": [126, 304, 306, 551, 552, 561], "crucial": [126, 129, 320], "component_typ": 126, "overflow": 126, "truncat": [126, 525, 526, 527, 532], "flexbuild": [127, 560], "arm64": [127, 282], "qemu": 127, "slower": 127, "buildx": 127, "manifest": 127, "your_image_registri": 127, "adminservic": 128, "setuptool": 128, "regist": [128, 173, 176, 203, 277, 280, 281, 283, 294, 297, 319, 330, 333, 362, 547], "decod": [128, 388, 389, 390, 400, 572], "debian": 129, "redhat": 129, "22": [129, 306, 328, 390, 391, 393, 402, 533, 551], "x86": 129, "seastar": 129, "incompat": [129, 491, 552], "gen_code_from_plan": 129, "physic": [129, 284, 293, 294, 297, 320, 331, 405, 463, 464, 465, 487, 551], "graph_db": [129, 279], "graphdb": [129, 279], "hqps_db": 129, "http_server": 129, "httpd": 129, "hiactor": [129, 320], "dockerfil": [129, 309, 395], "openapi_interact": [129, 278], "immutable_graph": 129, "rt_mutable_graph": 129, "mutable_csr": [129, 160, 181, 255], "third_parti": 129, "parti": [129, 320, 520], "lego": 129, "clariti": [129, 300], "gaia": [129, 320, 571], "ir": [129, 293, 294, 295, 320, 322], "submodul": [129, 395, 398, 552], "pexperiment": 129, "build_test": 129, "build_doc": 129, "build_odps_fragment_load": 129, "odp": [129, 179, 285, 389], "use_pthash": 129, "hash": [129, 389, 402], "optimize_for_host": 129, "accuraci": [129, 297, 317, 318, 325], "establish": [129, 280, 282, 290, 553], "workspac": [129, 317], "github_workspac": 129, "flex_data_dir": 129, "tmp_interactive_workspac": 129, "interactive_workspac": 129, "schema_fil": 129, "bulk_load_fil": 129, "bulk_load": [129, 240, 241, 277], "cp": [129, 293, 295, 537, 552], "glog_v": 129, "akin": 129, "hous": [129, 320, 514, 515], "temp_workspac": 129, "graph_meta": 129, "indices_lock": 129, "job_meta": 129, "plugin_meta": 129, "plugins_lock": 129, "running_graph": 129, "subsequ": [129, 293, 294, 295, 297, 305, 331, 389, 390], "hqps_admin_test": 129, "default_graph": 129, "interactive_config_test": 129, "mcsr": 129, "metadata_stor": 129, "reader": [129, 399], "interv": [129, 300, 459, 491, 547], "1000": [129, 203, 304, 331, 390, 405, 537, 540, 553], "statist": [129, 166, 240, 277, 294, 297, 300, 306, 391], "86400000": 129, "default_listen_address": 129, "bolt_connector": [129, 283], "gremlin_connector": 129, "8182": [129, 293, 295, 305, 553], "40000": 129, "gremlin_script_language_nam": 129, "antlr_gremlin_calcit": [129, 293], "http_servic": 129, "admin_port": 129, "query_port": 129, "interactive_serv": 129, "engine_config": [129, 547], "maintan": 129, "subprocess": 129, "bodi": [129, 176, 250, 394, 398, 506], "ok": [129, 277, 330], "invalid_argu": 129, "unsupported_oper": 129, "not_found": 129, "404": [129, 147, 166, 173, 196, 221, 240, 248, 270], "already_exist": 129, "409": [129, 147, 196, 221, 270], "permission_deni": 129, "403": 129, "codegen_error": 129, "invalid_schema": 129, "101": [129, 331, 569], "illegal_oper": 129, "102": [129, 400, 536], "internal_error": 129, "103": 129, "invalid_import_fil": 129, "104": 129, "io_error": 129, "105": [129, 328, 460, 461], "query_fail": 129, "106": 129, "vertextypepairrel": [131, 138, 159], "sourcevertex": [132, 153, 202], "destinationvertex": [132, 153, 202], "xcsrparam": [132, 135, 145, 165, 178], "edgestoragestrategi": 133, "sortoncompact": 133, "boolean": [133, 163, 181, 183, 185, 300, 304, 319, 331, 333, 390, 394, 405, 424, 425, 462, 464, 467, 498, 538, 551], "oemut": 133, "iemut": 133, "propertytyp": [134, 144, 164], "primarykei": [135, 145, 165], "maxvertexnum": 136, "edgemappingsourcevertexmappingsinnercolumn": [137, 150, 151, 203, 211, 224, 225, 277], "createprocedurerequest": [139, 173, 203, 213, 248, 277, 279], "vertextyp": [141, 161], "edgetyp": [141, 161, 542], "procedureid": [143, 173, 176], "interactive_admin_endpoint": [147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277, 279, 282, 284], "deleteedg": 147, "edgerequest": [147, 198, 203, 221, 272, 277], "edgerequest3": 147, "srclabel": [147, 148, 154, 553], "dstlabel": [147, 148, 154, 553], "edgelabel": [147, 148, 154, 304, 352], "srcprimarykeyvalu": [147, 148, 154], "dstprimarykeyvalu": [147, 148, 154], "addpropertiesitem": [147, 196], "123": [147, 221, 389], "edgerequest4": 147, "233": [147, 221], "arraylist": 147, "addedgerespons": 147, "isok": [147, 166, 167, 173, 176, 182, 196, 203, 279], "println": [147, 166, 167, 173, 176, 182, 196, 203, 279, 553], "getstatusmessag": [147, 166, 167, 173, 176, 182, 196, 203, 279], "edgedata": [147, 203, 221, 277], "getedgerespons": 147, "getproperti": 147, "getnam": [147, 196], "parsedoubl": 147, "tostr": [147, 203, 330, 554], "assert": [147, 196, 221, 240, 241, 248, 250, 256, 270, 277, 279, 305, 331, 552], "updateedgerequest": 147, "updateedgerespons": 147, "typetriplet": 149, "sourcevertexmap": 149, "edgemappingsourcevertexmappingsinn": [149, 203, 223, 277], "destinationvertexmap": 149, "edgemappingdestinationvertexmappingsinn": [149, 203, 223, 277], "typeid": [155, 159, 165, 201], "vertextypepairstatist": [155, 203, 229, 277], "_char": [156, 187], "fixedcharchar": [156, 187, 203, 230, 261, 277], "fixedlength": 157, "signed_int32": [158, 172, 176], "unsigned_int32": [158, 172], "signed_int64": [158, 172], "unsigned_int64": [158, 172], "dt_string": [158, 172], "storetyp": 160, "creationtim": [160, 163], "dataupdatetim": 160, "getprocedurerespons": [160, 173, 203, 234, 248, 277], "dataimportconfig": 160, "totalvertexcount": 162, "totaledgecount": 162, "vertextypestatist": 162, "vertexstatist": [162, 203, 236, 277], "edgetypestatist": 162, "edgestatist": [162, 203, 236, 277], "boundgraph": 163, "updatetim": 163, "propertyid": 164, "getallgraph": 166, "getr": [166, 167, 173], "got": [166, 167, 173, 240], "privat": [166, 203], "modern_graph_schema_json": 166, "fromjson": [166, 203], "rep": [166, 203], "getgraphid": [166, 203], "badrequest": [166, 240], "jobrespons": [166, 203, 240, 277], "modern_graph_bulk_loading_json": 166, "throw": [166, 173, 176, 203, 250, 279, 393], "ioexcept": [166, 203, 279], "getjobid": [166, 203], "deleter": [166, 173], "getgraphresponseresult": 166, "getgraphstatisticsrespons": [166, 203, 240, 277], "503": [166, 240], "unavail": [166, 240], "getschema": 166, "jobid": [167, 168, 203, 241], "histori": [167, 241, 304, 306, 324], "bulkload": [167, 203, 277], "graphmanagementapi": [167, 203, 277], "getjobr": 167, "getjobstatu": [167, 203, 277], "getjobsr": 167, "starttim": [169, 183], "endtim": 169, "procedure_id": [173, 203, 217, 248, 277], "createprocedurerespons": [173, 203, 248, 277, 279], "cppstoredprocedur": [173, 176, 250], "cypherstoredprocedur": [173, 176, 250], "testprocedur": [173, 176, 203, 277], "typeenum": [173, 203, 279], "resp": [173, 203, 221, 240, 241, 248, 250, 256, 270, 277, 279], "runtimeexcept": [173, 203, 279], "listr": 173, "updateprocedurerequest": [173, 203, 248, 277], "setdescript": [173, 279], "updater": 173, "querynam": 175, "typedvalu": [175, 176, 203, 249, 250, 277], "attempt": [176, 250, 290, 293, 323, 324, 327, 540], "irresult": 176, "collectiveresult": [176, 250], "proto": [176, 250, 330, 350, 375], "creation": [176, 250, 309, 390, 464], "queryrequest": [176, 203, 250, 277], "setquerynam": 176, "addargumentsitem": 176, "primitivetypeenum": 176, "queryr": 176, "plain": [176, 250, 325], "exit": [176, 279, 305, 317, 331, 571], "byte": [176, 279, 300, 331, 339, 399], "loadingconfig": 177, "schemamappingloadingconfig": [177, 203, 251, 277], "schemamappingloadingconfigxcsrparam": [178, 203, 252, 277], "schemamappingloadingconfigdatasourc": [178, 203, 252, 277], "importopt": 178, "schemamappingloadingconfigformat": [178, 203, 252, 277], "buildcsrinmem": 181, "usemmapvector": 181, "metric": [182, 256, 325, 487, 488, 489, 490, 491], "statisticsen": 183, "boltport": 183, "hqpsport": 183, "gremlinport": [183, 293], "varchar": [187, 203, 277], "varcharvarchar": [187, 194, 203, 261, 268, 277], "maxlength": 195, "deletevertex": 196, "vertexedgerequest": [196, 203, 270, 277], "vertexrequest": [196, 198, 203, 270, 272, 277], "primarykeyvalu": [196, 200], "mike": [196, 270], "addvertexrequestitem": 196, "addvertexrespons": 196, "vertexdata": [196, 203, 270, 277], "value1": [196, 270, 293, 319, 573], "param2": [196, 270], "value2": [196, 270, 293], "getvertexrespons": 196, "updatevertexrequest": 196, "cindi": [196, 270], "updatevertexrespons": 196, "gradl": 203, "ossrh": 203, "interactive_stored_proc_endpoint": [203, 277, 282, 284], "interactive_cypher_endpoint": [203, 277, 282, 284], "neo4j": [203, 277, 280, 281, 282, 283, 292, 293, 295, 296, 298, 299, 300, 322, 327, 328, 403, 551], "gettingstart": [203, 283], "neo4jsess": 203, "getneo4jsess": [203, 277, 284], "persson": [203, 277], "test_graph_schema_json": 203, "creategraph": [203, 277], "programmat": [203, 277], "reprens": 203, "replas": 203, "reop": 203, "test_graph_bulk_loading_json": 203, "getstatu": 203, "statusenum": 203, "sleep": [203, 277, 400], "catch": [203, 279, 553], "interruptedexcept": 203, "printstacktrac": [203, 279], "infom": 203, "complelet": [203, 277], "defini": 203, "createprocedur": [203, 277, 279], "procnam": 203, "invokd": 203, "term": [203, 277, 281, 310], "moment": [203, 277, 300, 335, 553], "startservic": [203, 277, 279], "startservicerespons": [203, 279], "starservic": 203, "gremlincli": 203, "getgremlincli": 203, "deletegraphrespons": 203, "deletegraph": [203, 277], "five": [203, 277], "categori": [203, 277, 300, 304, 310, 312, 313, 321, 325, 400], "proceduremanagementapi": [203, 277], "jobmanagementapi": [203, 277], "servicemanagementapi": [203, 277], "queryserviceapi": [203, 277], "vertexapi": [203, 277], "edgeapi": [203, 277], "getgraphmeta": [203, 277], "getgraphschema": [203, 277], "listgraph": [203, 277], "canceljob": [203, 277], "getjobbyid": [203, 277], "listjob": [203, 277], "deleteprocedur": [203, 277], "getprocedur": [203, 277], "listprocedur": [203, 277], "updateprocedur": [203, 277], "getservicestatu": [203, 277], "restartservic": [203, 277], "stopservic": [203, 277], "callprocedur": [203, 277, 279], "callprocedureoncurrentgraph": [203, 277], "addvertex": [203, 277], "getvertex": [203, 277, 330], "updatevertex": [203, 277], "addedg": [203, 277], "getedg": [203, 277], "updateedg": [203, 277], "apiresponsewithcod": [203, 277], "fixedchar": [203, 277], "authent": [203, 277, 295, 298, 326, 553], "gs_interact": [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 284], "api_response_with_cod": 204, "api_response_with_code_inst": 204, "api_response_with_code_dict": 204, "api_response_with_code_from_dict": 204, "python_sdk": [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "sort_on_compact": 207, "oe_mut": 207, "ie_mut": 207, "create_procedure_request": [216, 248], "create_procedure_request_inst": 216, "create_procedure_request_dict": 216, "create_procedure_request_from_dict": 216, "create_procedure_respons": 217, "create_procedure_response_inst": 217, "create_procedure_response_dict": 217, "create_procedure_response_from_dict": 217, "edge_request": [221, 228, 272], "src_label": [221, 222, 228, 293, 319, 402, 543, 547, 553, 554, 567, 568], "dst_label": [221, 222, 228, 293, 319, 402, 543, 547, 553, 554, 567, 568], "src_primary_key_valu": [221, 222, 228], "dst_primary_key_valu": [221, 222, 228], "modelproperti": [221, 222, 228, 270, 271, 274], "is_ok": [221, 240, 241, 248, 250, 256, 270, 277, 279], "get_valu": [221, 240, 241, 248, 250, 256, 270, 277], "edge_data": [222, 365, 555], "edge_data_inst": 222, "edge_data_dict": 222, "edge_data_from_dict": 222, "edge_mapping_destination_vertex_mappings_inn": 224, "edge_mapping_destination_vertex_mappings_inner_inst": 224, "edge_mapping_destination_vertex_mappings_inner_dict": 224, "edge_mapping_destination_vertex_mappings_inner_from_dict": 224, "edge_mapping_source_vertex_mappings_inn": 225, "edge_mapping_source_vertex_mappings_inner_inst": 225, "edge_mapping_source_vertex_mappings_inner_dict": 225, "edge_mapping_source_vertex_mappings_inner_from_dict": 225, "edge_mapping_source_vertex_mappings_inner_column": 226, "edge_mapping_source_vertex_mappings_inner_column_inst": 226, "edge_mapping_source_vertex_mappings_inner_column_dict": 226, "edge_mapping_source_vertex_mappings_inner_column_from_dict": 226, "edge_request_inst": 228, "edge_request_dict": 228, "edge_request_from_dict": 228, "vertex_type_pair_statist": [229, 276], "edge_statist": 229, "edge_statistics_inst": 229, "edge_statistics_dict": 229, "edge_statistics_from_dict": 229, "fixed_char_inst": 230, "fixed_char_dict": 230, "fixed_char_from_dict": 230, "fixed_char_char": 231, "fixed_char_char_inst": 231, "fixed_char_char_dict": 231, "fixed_char_char_from_dict": 231, "data_import_config": 234, "total_vertex_count": 236, "total_edge_count": 236, "vertex_type_statist": 236, "edge_type_statist": 236, "get_graph_statistics_respons": 236, "get_graph_statistics_response_inst": 236, "get_graph_statistics_response_dict": 236, "get_graph_statistics_response_from_dict": 236, "update_tim": 237, "get_procedure_respons": 237, "get_procedure_response_inst": 237, "get_procedure_response_dict": 237, "get_procedure_response_from_dict": 237, "test_graph_def": [240, 248, 277], "delete_graph": [240, 277], "get_graph": 240, "get_graph_meta": 240, "get_graph_statist": 240, "get_graph_schema": 240, "test_graph_datasourc": [240, 277], "bulk_load_request": [240, 241, 277], "cancel_job": 241, "loading_resp": 241, "get_job": [241, 277], "job_respons": 242, "job_response_inst": 242, "job_response_dict": 242, "job_response_from_dict": 242, "model_properti": 245, "model_property_inst": 245, "model_property_dict": 245, "model_property_from_dict": 245, "create_procedur": [248, 277, 279], "create_proc_request": [248, 277, 279], "test_procedur": [248, 277, 284], "proc_id": [248, 250], "delete_procedur": 248, "get_procedur": 248, "list_procedur": 248, "update_procedur": 248, "update_procedure_request": [248, 266], "update_proc_req": 248, "proc": [248, 281, 492, 493, 497, 498, 539], "query_nam": [249, 250], "query_request": 249, "query_request_inst": 249, "query_request_dict": 249, "query_request_from_dict": 249, "call_procedur": 250, "req": [250, 398], "call_procedure_curr": 250, "schema_mapping_loading_config": 252, "schema_mapping_loading_config_inst": 252, "schema_mapping_loading_config_dict": 252, "schema_mapping_loading_config_from_dict": 252, "schema_mapping_loading_config_data_sourc": 253, "schema_mapping_loading_config_data_source_inst": 253, "schema_mapping_loading_config_data_source_dict": 253, "schema_mapping_loading_config_data_source_from_dict": 253, "schema_mapping_loading_config_format": 254, "schema_mapping_loading_config_format_inst": 254, "schema_mapping_loading_config_format_dict": 254, "schema_mapping_loading_config_format_from_dict": 254, "schema_mapping_loading_config_x_csr_param": 255, "schema_mapping_loading_config_x_csr_params_inst": 255, "schema_mapping_loading_config_x_csr_params_dict": 255, "schema_mapping_loading_config_x_csr_params_from_dict": 255, "get_service_statu": 256, "stop_r": 256, "statistics_en": 257, "bolt_port": 257, "hqps_port": 257, "gremlin_port": [257, 553], "typed_valu": 265, "typed_value_inst": 265, "typed_value_dict": 265, "typed_value_from_dict": 265, "update_procedure_request_inst": 266, "update_procedure_request_dict": 266, "update_procedure_request_from_dict": 266, "var_char_inst": 268, "var_char_dict": 268, "var_char_from_dict": 268, "var_char_var_char": 269, "var_char_var_char_inst": 269, "var_char_var_char_dict": 269, "var_char_var_char_from_dict": 269, "vertex_edge_request": [270, 272], "vertex_request": [270, 272, 274], "primary_key_valu": [270, 274], "vertex_data_inst": 271, "vertex_data_dict": 271, "vertex_data_from_dict": 271, "vertex_edge_request_inst": 272, "vertex_edge_request_dict": 272, "vertex_edge_request_from_dict": 272, "vertex_request_inst": 274, "vertex_request_dict": 274, "vertex_request_from_dict": 274, "vertex_statist": 275, "vertex_statistics_inst": 275, "vertex_statistics_dict": 275, "vertex_statistics_from_dict": 275, "vertex_type_pair_statistics_inst": 276, "vertex_type_pair_statistics_dict": 276, "vertex_type_pair_statistics_from_dict": 276, "assist": [277, 295, 301, 323], "har": 277, "isol": [277, 302, 405, 501, 553], "build_proto": 277, "graph_nam": [277, 295], "dictionali": 277, "pyyaml": [277, 564], "yaml_str": 277, "python_dict": 277, "safe_load": 277, "afterward": 277, "interpret": [277, 290, 320, 405], "elif": [277, 400], "rais": [277, 279, 287, 294, 297, 331, 339, 341, 375, 387, 394, 402, 403, 405, 411, 420, 424, 425, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 479, 481, 484, 485, 486, 497, 500, 532, 535, 536, 540, 543, 547], "uncom": 277, "proc_nam": 277, "forbid": 277, "getgraphstatist": 277, "apart": [279, 319, 487], "count_vertic": 279, "app_bas": 279, "graph_db_sess": 279, "app_util": 279, "readappbas": 279, "writeappbas": 279, "countvertic": 279, "graphdbsess": 279, "deseri": [279, 552], "transact": [279, 302, 320, 326, 327, 328, 549, 553, 563], "txn": 279, "getreadtransact": 279, "label_nam": [279, 332, 546], "get_str": [279, 333], "has_vertex_label": 279, "label_id": [279, 286, 330, 332, 333, 365], "get_vertex_label_id": 279, "put_int": 279, "getvertexnum": 279, "createapp": 279, "db": [279, 297], "deleteapp": 279, "cast": [279, 312, 316, 319, 321, 400, 552, 567], "app_path": 279, "app_cont": 279, "nio": 279, "net": [279, 405, 459], "urisyntaxexcept": 279, "junit": 279, "jupit": 279, "createproceduretest": 279, "setnam": 279, "appfilepath": 279, "notexist": 279, "appfilecont": 279, "readallbyt": 279, "isempti": 279, "setqueri": 279, "settyp": 279, "readtransact": 279, "inserttract": 279, "updatetransact": 279, "contact": [279, 287], "cypherapp": 279, "himself": 279, "callabl": 279, "procedurenam": 279, "labelnam": [279, 571], "put_str": 279, "put_byt": 279, "callprocedureraw": 279, "startserviceongraph": 279, "call_procedure_raw": 279, "get_byt": 279, "administr": [280, 517], "graph_data": 280, "breakdown": [280, 285], "bolt": [280, 283, 295, 298, 299, 324], "connector": [280, 283, 298, 306], "opencyph": [280, 322], "supported_cyph": [280, 283], "storp": 281, "sproc": 281, "stopro": 281, "storeproc": 281, "subroutin": 281, "rdbm": [281, 299], "wikipedia": [281, 323, 331, 502, 506, 507, 508, 509, 511, 512, 513, 519, 520, 521, 522, 524, 525, 526, 527, 533], "sole": [282, 297, 299, 300], "theori": [282, 313, 392, 400], "mac": [282, 335, 565, 567], "installt": 282, "apiserv": 282, "streamlin": [282, 304], "screen": [282, 555], "coordinator_port": 282, "secur": [282, 310, 325, 326], "firewal": 282, "concurr": [283, 285, 320, 390], "impress": [283, 285], "Its": [283, 285, 287, 322, 519, 552], "timefram": [283, 285], "emphas": [283, 285, 327], "stand": [283, 327, 392, 393, 552], "shoulder": 283, "pivot": 283, "pillar": 283, "qp": [283, 293, 306, 326, 553], "snb": [283, 306, 319, 568, 573], "180": 283, "87": [283, 328, 531], "op": [283, 332, 342, 344, 345, 346, 347, 349, 350, 352, 354, 355, 357, 358, 359, 360, 361, 362, 365, 366, 367, 370, 371, 372, 374, 375, 398, 540, 544, 547], "boast": 283, "highlight": [283, 300, 320, 324], "laid": 283, "triumph": 283, "ten": [283, 297, 323, 327, 392], "thousand": 283, "swiftli": 283, "versatil": [283, 326, 552], "craft": 283, "expans": [283, 297, 324, 325, 397, 571], "prowess": 283, "prime": [283, 484, 486], "gql": [283, 294, 297, 320, 327], "scalabl": [283, 293, 305, 323, 324, 325, 326, 327, 537], "possess": 283, "larger": [283, 297, 302, 306, 316, 487], "massiv": [283, 294, 324], "too": [283, 293, 306, 327, 390, 459, 540], "offload": [283, 553], "excess": [283, 297], "slave": 283, "constraint": [283, 297, 300, 306, 307, 324], "portion": [283, 306, 323, 324, 332, 402], "occurr": [283, 299, 324], "param_nam": [283, 284], "ddl": 283, "acid": [283, 326], "movi": [284, 285, 297, 322, 390], "parameter": 284, "personnam": 284, "th": [284, 306, 392, 405, 518], "softwareid": 284, "softwarenam": 284, "marko": [284, 302, 304, 306], "solid": [285, 508, 525, 526], "prerequisit": 285, "complic": [285, 290, 294, 306, 332], "entiti": [285, 302, 306, 316, 321, 325, 389], "helm": [285, 287, 292, 293, 553, 564, 566], "\u6807\u7b7e": 286, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 286, "\u5c5e\u6027": [286, 571, 573], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 286, "\u539f\u59cbid": 286, "oid": [286, 330, 332, 333], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 286, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 286, "\u5b50\u56feid": 286, "fid": [286, 330, 333, 365, 549], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 286, "\u5206\u533a\u5668": 286, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 286, "\u7684\u6620\u5c04": 286, "\u5b50\u56fe": 286, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 286, "\u5b58\u50a8\u4e86\u9876\u70b9": 286, "\u8fb9": [286, 563], "\u9876\u70b9\u6570\u636e": 286, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 286, "\u5185\u90e8\u70b9": 286, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 286, "\u5916\u90e8\u70b9": 286, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 286, "\u672c\u5730id": 286, "lid": [286, 330, 365], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 286, "\u5168\u5c40id": 286, "gid": [286, 330, 365], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 286, "\u88abfragment\u5171\u8bc6": 286, "\u7528\u4e8e\u5b58\u50a8gid": 286, "oid\u7684\u6620\u5c04\u5173\u7cfb": 286, "\u7684\u8282\u70b9": 286, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 286, "gid\u7f16\u7801": 286, "\u5176\u4e2d": [286, 563, 568], "\u548c": [286, 394, 563, 565, 566, 567, 568, 570, 571, 572, 573], "\u5171\u540c\u7ec4\u6210": 286, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 286, "\u7684\u9876\u70b9": 286, "\u5e8f\u53f7": 286, "lid\u7f16\u7801": 286, "\u586b\u5145": 286, "\u603b\u662f": 286, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 286, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 286, "\u5206\u4e3ahashpartitioner\u548csegmentedpartition": 286, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 286, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 286, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 286, "\u8fb9\u6587\u4ef6": 286, "\u5f97\u5230\u591a\u4e2avertex": 286, "\u548cedg": 286, "etabl": 286, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 286, "\u5206\u7ec4": 286, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 286, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 286, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 286, "\u8fb9\u8868": 286, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 286, "partial_v_t": 286, "partial_e_t": 286, "num": [286, 295, 305, 306, 401, 552], "table\u5305\u542boid": 286, "table\u5305\u62ecsrc\u548cdst\u7684oid": 286, "\u8bbf\u95eevtable\u7684oid\u5217": 286, "\u6839\u636eoid\u67e5\u8be2partit": 286, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 286, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 286, "gather\u64cd\u4f5c": 286, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 286, "\u6839\u636efrag\u6570\u91cf": 286, "label\u6570\u91cf\u548c\u5168\u90e8oid": 286, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 286, "fid_t": [286, 330], "fnum_": 286, "label_id_t": [286, 330], "label_num_": 286, "hashmapbuild": 286, "cur_gid": 286, "id_parser_": 286, "generateid": 286, "\u8d77\u59cbgid": 286, "vnum": 286, "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 286, "\u751f\u6210gid": 286, "emplac": 286, "getview": 286, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 286, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 286, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 286, "\u6839\u636epartitioner\u83b7\u53d6fid": 286, "\u6839\u636efid": 286, "id\u548coid\u67e5\u8be2gid": 286, "\u751f\u6210gid\u6570\u7ec4": 286, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 286, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 286, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 286, "\u5bf9etable\u6267\u884cshuffl": 286, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 286, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 286, "\u5904\u7406\u9876\u70b9": 286, "\u521d\u59cb\u5316id": 286, "parser": [286, 294, 317], "\u521d\u59cb\u5316ivnum": 286, "ovnum\u548ctvnum\u6570\u7ec4": 286, "\u6309\u7167vertex": 286, "label\u5206\u7ec4": 286, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 286, "\u5411vertex": 286, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 286, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 286, "\u5c06vertex": 286, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 286, "vid_parser_": 286, "vertex_label_num_": 286, "resiz": 286, "ivnums_": 286, "ovnums_": 286, "tvnums_": 286, "combinechunk": 286, "default_memory_pool": 286, "vm_ptr_": 286, "getinnervertexs": [286, 330], "fid_": 286, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 286, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 286, "\u901a\u8fc7src": 286, "gid\u5217\u548cdst": 286, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 286, "\u5e76\u6309\u7167vertex": 286, "edge_t": [286, 389, 400], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 286, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 286, "collect_outer_vertic": 286, "dynamic_pointer_cast": [286, 554], "converttoarrowtyp": [286, 330], "arraytyp": [286, 330], "chunk": [286, 375, 402, 551], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 286, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 286, "\u5916\u90e8\u70b9\u7684lid\u7531label": 286, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 286, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 286, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 286, "ovg2l_maps_": 286, "ovgid_lists_": 286, "cur_list": 286, "collected_ovgids_": 286, "\u6392\u5e8fgid": 286, "cur_map": 286, "buildertyp": 286, "vec_build": 286, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 286, "\u5176\u4e2dfid\u4e3a0": 286, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 286, "cur_id": 286, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 286, "append": [286, 306, 315, 316, 317, 318, 321, 333, 388, 399, 400, 471, 534, 567, 572], "cur_list_length": 286, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 286, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 286, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 286, "\u5220\u9664edg": 286, "table\u7684src\u5217\u548cdst\u5217": 286, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 286, "generate_local_id_list": 286, "gid_list": 286, "lid_list": 286, "vec": 286, "getfid": 286, "\u751f\u6210\u5185\u90e8\u70b9lid": 286, "getlabelid": 286, "getoffset": 286, "\u67e5\u8be2g2l": 286, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 286, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 286, "edge_src_": 286, "edge_dst_": 286, "table\u7684src\u5217\u548cgid\u5217": 286, "\u53ea\u4fdd\u7559\u5c5e\u6027": 286, "tmp_table0": 286, "removecolumn": 286, "\u6784\u5efacsr": 286, "\u5bf9\u4e8e\u6709\u5411\u56fe": 286, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 286, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 286, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 286, "\u6784\u5efarow": 286, "offset\u6570\u7ec4": 286, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 286, "\u4f7f\u7528row": 286, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 286, "\u586b\u5145dst": 286, "lid\u548ceid\u5230nbr": 286, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 286, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 286, "generate_directed_csr": 286, "vid_array_t": [286, 330], "src_list": 286, "dst_list": 286, "fixedsizebinaryarrai": 286, "int64arrai": 286, "edge_offset": 286, "actual_edge_num": 286, "v_label": [286, 330, 549], "edge_num": [286, 365, 567, 571], "src_list_ptr": 286, "raw_valu": 286, "dst_list_ptr": 286, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 286, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 286, "tvnum": 286, "offset_vec": 286, "degree_vec": 286, "int64build": 286, "podarraybuild": 286, "nbr_unit_t": [286, 330], "edge_build": 286, "v_offset": 286, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 286, "ptr": 286, "mutablepoint": 286, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 286, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 286, "vid": [286, 330, 402], "eid_t": [286, 330], "\u66f4\u65b0offset": 286, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 286, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 286, "offsets_ptr": 286, "lh": 286, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 286, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 286, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 286, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 286, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 286, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 286, "lid\u548ceid": 286, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 286, "\u5c01\u88c5": 286, "seal": [286, 309, 325], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 286, "ovgid\u548cg2l_map\u540e": 286, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 286, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 286, "\u4e5f\u5c31\u662f\u8bf4": [286, 564], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 286, "\u5f53\u524dfragment": 286, "fragment\u603b\u6570": 286, "directed_": 286, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 286, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 286, "edge_label_num_": 286, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 286, "propertygraphschema": 286, "schema_": 286, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 286, "\u9876\u70b9\u5c5e\u6027\u8868": 286, "\u4e0d\u5305\u542bid\u5217": 286, "\u5916\u90e8\u70b9gid": 286, "gid\u5230lid\u6620\u5c04": 286, "\u8fb9\u5c5e\u6027": 286, "csr\u7ed3\u6784\u7684column": 286, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 286, "csr\u7ed3\u6784\u7684row": 286, "vertex_map_t": [286, 330], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 286, "edge_tables_columns_": 286, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 286, "flatten_edge_tables_columns_": 286, "\u540c\u4e0a": 286, "vertex_tables_columns_": 286, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 286, "ie_ptr_lists_": 286, "oe_ptr_lists_": 286, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 286, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 286, "\u4e5f\u5c31\u662fcolumn": 286, "index\u7684\u8d77\u59cb\u5730\u5740": 286, "ie_offsets_ptr_lists_": 286, "oe_offsets_ptr_lists_": 286, "\u51fa\u8fb9\u7684row": 286, "offset\u8d77\u59cb\u5730\u5740": 286, "offset\u7684\u8d77\u59cb\u5730\u5740": 286, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 286, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 286, "\u76ee\u7684\u9876\u70b9fid": 286, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 286, "idst_": 286, "odst_": 286, "iodst_": 286, "idoffset_": 286, "odoffset_": 286, "iodoffset_": 286, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 286, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 286, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 286, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 286, "id\u548c\u9876\u70b9\u5e8f\u53f7": 286, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 286, "ivnum": 286, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 286, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 286, "vertex_range_t": [286, 330], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 286, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 286, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 286, "\u5c5e\u6027id": 286, "\u5217\u53f7": 286, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 286, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 286, "\u884c\u53f7": 286, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 286, "getdata": [286, 330], "prop_id_t": [286, 330], "prop_id": 286, "property_graph_util": [286, 330], "valuegett": 286, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 286, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 286, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 286, "adj_list_t": [286, 330], "e_label": [286, 330], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 286, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 286, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 286, "offset_arrai": 286, "\u8bbf\u95eerow": 286, "oe": 286, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 286, "\u751f\u6210adjlist\u5bf9\u8c61": 286, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 286, "\u7ed3\u675f\u5730\u5740": 286, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 286, "\u548c\u51fa\u8fb9\u540c\u7406": 286, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 286, "ie": 286, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 286, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 286, "\u5bf9\u5e94\u5230\u884c\u53f7": 286, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 286, "\u4f8b\u5982": [286, 563, 567, 571, 573], "\u83b7\u53d6edg": 286, "struct": [286, 330, 463, 496], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 286, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 286, "edata_arrays_": 286, "nbr_": 286, "8g": [287, 317], "18": [287, 296, 306, 328, 390, 391, 393, 402, 405, 463, 512, 517, 521, 523, 526, 532, 551, 563, 566, 570], "debug": [287, 317, 389, 394, 547, 553, 561], "silent": [287, 540, 561], "did": [287, 400], "role": [287, 294, 308, 317, 322, 390, 399, 405, 491, 529, 537, 553, 557, 561, 566], "rolebind": [287, 566], "recycl": 287, "alloc": [287, 311, 315], "seem": [287, 306], "stuck": 287, "consumpt": 287, "poor": [287, 396], "acquir": [287, 298, 305], "mostli": [287, 295, 366], "visibl": [287, 333], "volum": [287, 293, 305, 317, 463, 464, 465, 475, 484, 529, 547, 552], "cloud": [287, 326, 327, 553], "k8s_vineyard_mem": [287, 317, 387, 547, 566], "shape": [287, 312, 313, 316, 321, 330, 332, 391, 392, 393, 394, 397, 400, 404, 462, 567], "forth": 287, "smaller": [287, 297, 306, 328, 403, 405, 461, 462, 466], "shared_mem": [287, 566], "grpcio": [287, 566], "grpc_python_build_system_openssl": [287, 566], "scipi": [287, 487, 488, 489, 490, 540, 543, 566], "anaconda": [287, 566], "workaround": 287, "openbla": 287, "tri": [287, 290, 315, 324, 469, 475], "pkgconfig": 287, "cmake_prefix_path": 287, "brew": 287, "deni": [287, 339, 566], "pv": [287, 293, 547, 553, 566], "nf": [287, 399, 566], "appear": [287, 294, 306, 331, 445, 447, 449, 452, 454, 481, 482, 540, 566], "kafka": [287, 549, 553, 566], "zookeep": [287, 566], "crashloopbackoff": [287, 566], "bitnami": [287, 566], "755": 287, "1001": [287, 553], "brutal": 287, "chmod": [287, 305, 566], "777": [287, 328, 566], "eleg": [287, 290], "grant": [287, 537], "timeout_second": [287, 387, 547, 566], "600": [287, 328, 547, 566], "enterpris": 287, "proxi": [287, 566], "properli": [287, 302], "wrong": 287, "resolut": [287, 553], "occup": 287, "hostnam": [287, 566], "no_proxi": [287, 566], "suffix": [287, 304], "flush": 287, "forcibli": 287, "slack": [287, 566], "dingtalk": [287, 566], "happi": 287, "90": [289, 328], "traffic": 290, "web": [290, 331, 405, 473, 487, 492, 533], "ever": [290, 313], "amount": [290, 305, 311, 325, 392, 394, 396], "hidden": [290, 322, 323, 325, 388, 572], "attract": 290, "attent": [290, 325, 394], "difficult": [290, 389, 399, 553], "obstacl": 290, "curv": [290, 323], "hard": [290, 304, 314, 315, 501, 552], "sql": [290, 294, 304, 306, 307], "deep": [290, 313, 320, 388, 393, 394, 396, 416, 419, 528, 540], "gnn": [290, 292, 310, 312, 313, 316, 320, 321, 326, 327, 388, 392, 393, 394, 396, 397, 547, 569, 572], "train": [290, 299, 310, 312, 313, 314, 320, 321, 326, 327, 329, 390, 393, 394, 396, 397, 400, 404, 547, 567, 572], "fist": 290, "mount_dataset": [290, 319], "ran": [290, 315], "p2p_network": 290, "embed": [290, 310, 316, 321, 325, 389, 396], "inter": [290, 401, 459, 462], "wherea": [290, 459, 552], "numpi": [290, 306, 310, 330, 332, 347, 358, 367, 391, 392, 394, 395, 396, 397, 400, 402, 404, 405, 532, 540, 543, 569], "datafram": [290, 319, 332, 346, 357, 367, 370, 402, 540, 563, 573], "head": [290, 293, 299, 304, 306], "creationd": [290, 304, 306, 319, 551, 568, 573], "locationip": [290, 319, 573], "browserus": [290, 306, 319, 573], "618475290625": 290, "2011": [290, 306, 473], "08": [290, 328, 405], "17t14": 290, "26": [290, 304, 306, 317, 328, 390, 391, 393, 489], "59": [290, 328], "961": 290, "210": [290, 328, 536], "17": [290, 306, 328, 390, 391, 393, 563], "chrome": [290, 306], "618475290626": 290, "17t11": 290, "570": 290, "comment_replyof_com": 290, "274877907301": 290, "274877907299": 290, "274877907302": 290, "pd": [290, 299, 319, 573], "df_v": [290, 319, 563, 573], "read_csv": [290, 299, 319, 573], "sep": [290, 299, 319, 402, 573], "df_e": [290, 319, 573], "graphcomput": [292, 571], "gl": [292, 313, 326, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 401], "neural": [292, 310, 320, 321, 326, 327, 329, 388, 389, 392, 394, 396, 400], "posit": [292, 306, 325, 326, 388, 394, 405, 450, 469, 471, 472, 474, 475, 479, 487, 488, 489, 490, 491, 535, 538, 552, 555], "frequent": [292, 320, 323, 553], "gopt": 292, "graphar": [292, 402], "gart": 292, "gap": 292, "oltp": [292, 320, 322], "style": [292, 309, 320, 545], "wonder": 293, "throughout": [293, 294, 304], "smoothli": 293, "easiest": 293, "websit": [293, 323, 459], "untar": 293, "tree": [293, 322, 440, 442, 450, 470, 476, 478, 488, 489, 490, 503, 504, 541, 547, 573], "claim": [293, 522, 552, 553], "pvc": [293, 547, 553], "your_release_nam": 293, "grep": 293, "awk": 293, "cypherport": 293, "littl": [293, 304, 306], "v6d_modern_load": [293, 295], "data_path": [293, 554], "store_data_path": [293, 295], "thing": [293, 394, 560], "key1": 293, "key2": 293, "token": [293, 304], "column_typ": 293, "infer": [293, 297, 319, 325, 326], "filed1": 293, "filed2": 293, "unexpect": 293, "troubl": 293, "correspondingli": [293, 313, 497, 500], "v6d_ldbc_loader": 293, "replicacount": [293, 553], "hdf": [293, 319, 367, 399, 402, 553, 563, 573], "pegasusworkernum": 293, "pegasustimeout": 293, "durat": [293, 300, 304], "pegasusbatchs": 293, "1024": [293, 295, 304, 551], "pegasusoutputcapac": 293, "frontendquerypersecondlimit": 293, "2147483647": [293, 553], "gremlinscriptlanguagenam": 293, "antlr_gremlin_travers": 293, "inher": 294, "manufactur": 294, "upcom": [294, 297], "sticki": 294, "shelv": 294, "intellig": [294, 306, 320, 327, 497, 500], "hybrid": [294, 552, 553], "dedupl": 294, "higher": [294, 297, 326, 405, 415, 479, 553], "latenc": [294, 305, 320, 326, 327], "hope": [294, 306, 553], "trade": [294, 320, 553], "inevit": 294, "realist": [294, 532], "lengthi": 294, "verif": [294, 320], "account": [294, 324, 538, 571], "80": [294, 328, 519], "decoupl": [294, 320, 327], "upper": [294, 304, 306, 310, 324, 459, 552], "briefli": [294, 325], "algebra": [294, 529], "edgeexpans": 294, "pathexpans": 294, "legal": 294, "predic": [294, 306], "arithmet": [294, 304, 306], "aspect": [294, 306, 327], "firstli": [294, 302, 306, 319, 327], "down": [294, 318, 457], "cbo": [294, 297], "glogu": 294, "shuffl": [294, 304, 317, 318, 394, 400, 404], "plu": [294, 304, 306, 443, 515], "unaccept": 294, "come": [294, 299, 306, 309, 319, 321, 322, 325, 326, 328, 391, 506, 543], "end2end": 295, "sf": [295, 297, 306], "v6d_object_id": 295, "unsur": [295, 299], "vineyard_ipc_socket": [295, 554], "gie_test_hom": 295, "rpc": [295, 317, 330, 401, 547, 553], "1234": 295, "11234": 295, "pegasu": [295, 320], "gaia_executor": 295, "log4r": [295, 553], "yml": [295, 551, 553], "usernam": [295, 553], "password": [295, 553], "auth": [295, 298, 405, 553], "djna": 295, "kill": [295, 547], "pkill": 295, "gcc": [296, 328, 570], "64": [296, 305, 313, 393, 394, 471, 551, 571], "chip": [296, 570], "straightforward": [296, 321], "hereaft": [296, 306, 321], "q1": [296, 299, 306, 321], "q2": [296, 306, 321], "q3": [296, 306, 321], "someth": [296, 540], "453": 296, "pppp": 296, "startup": 296, "3000": 296, "entr": 296, "ee": 296, "syntact": [296, 302, 307, 324], "sugar": [296, 302, 307, 324], "excel": [297, 326], "novel": [297, 531], "lightweight": 297, "serverless": 297, "year": [297, 299, 304, 306, 321, 323, 567], "academ": [297, 316, 321, 567], "prestigi": 297, "confer": [297, 312, 321, 392, 563], "barrier": [297, 317], "mainstream": [297, 313, 392, 393], "embedd": 297, "occupi": 297, "mb": [297, 553], "lsqb": 297, "person_follows_person": 297, "person_acted_in_movi": 297, "joindecompositionrul": 297, "bias": [297, 304], "favor": 297, "extendintersectrul": 297, "expandgetvfusionrul": 297, "dbm": [297, 327], "default_databas": 297, "unitl": 297, "apoc": 297, "cardin": 297, "evid": 297, "precis": [297, 319, 325, 532], "hinder": 297, "absenc": 297, "priorit": 297, "promptli": 297, "squar": [297, 306, 467, 486, 514, 515, 518, 533], "AND": [297, 300, 304, 321, 333], "worst": [297, 324], "wco": 297, "expandinto": 297, "filterpushdown": 297, "kean": 297, "gun": 297, "35mb": 297, "graphbuildersdk": 297, "systempath": 297, "basedir": 297, "studi": [297, 306, 316, 321, 327, 486, 488], "bench": 297, "reconfigur": 297, "ldbc1": 297, "Be": 297, "clearquerycach": 297, "significantli": [297, 299, 302, 323, 326], "rapidli": [297, 320, 392], "tend": [297, 469], "narrow": [297, 459], "holist": [297, 322], "suboptim": 297, "isomorph": [297, 306, 325, 390, 394, 519, 541], "space": [297, 310, 325, 389, 390, 394, 405, 439, 487, 488, 489, 490, 491], "graphdatabas": 298, "routingcontrol": [298, 321], "print_top_10": 298, "execute_queri": 298, "routing_": [298, 321], "simpler": [298, 305, 306, 540], "nowadai": 299, "shortcom": [299, 302, 306], "gpt": 299, "materi": 299, "mislead": 299, "hot": 299, "cold": 299, "workabl": 299, "openai": 299, "novic": 299, "dream": 299, "chamber": 299, "25": [299, 306, 312, 316, 321, 328, 390, 391, 393, 462, 464, 467, 486, 533, 567], "langchain": 299, "316": 299, "suchun": 299, "sv": 299, "nodes_set": 299, "stone_story_nodes_rel": 299, "vid_field": [299, 319, 402, 568], "edges_set": 299, "stone_story_edg": 299, "edges_sets_": 299, "src_field": [299, 319, 402, 568], "dst_field": [299, 319, 402, 568], "daughter_in_law_of_grandson_of": 299, "wife_of": 299, "api_kei": 299, "query_to_cyph": 299, "langchain_prompt": 299, "son": 299, "baoyu": 299, "jia": 299, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 299, "cypher_sent": 299, "son_of": 299, "q": [299, 305, 392, 394, 400, 482, 486], "\u8d3e\u5b9d\u7389": 299, "lastli": 299, "\u8d3e\u653f": 299, "stori": 299, "syntax": [300, 304, 313, 324, 332, 394, 540, 546], "compli": [300, 394], "unaddress": 300, "regard": [300, 306, 316, 552], "keyword": [300, 407, 408, 409, 476, 483, 487, 488, 489, 490, 491, 540, 543, 546, 547], "insensit": [300, 304], "capit": 300, "lowercas": 300, "letter": [300, 534], "slightli": [300, 395, 459, 546], "elabor": [300, 327], "uint64": [300, 381, 402, 547], "byte_arrai": 300, "datetim": 300, "citizen": 300, "unsupport": [300, 302, 304], "conceiv": [300, 487], "inner_typ": 300, "mathemat": [300, 472, 474, 482, 484, 486, 495], "averag": [300, 304, 316, 321, 331, 405, 459], "avg": [300, 304, 405], "summar": [300, 306, 310], "subtract": [300, 304], "divis": [300, 304], "modulo": [300, 304, 484], "exponenti": [300, 304, 306, 325, 487, 489, 490], "multipli": [300, 304, 527], "inequ": 300, "NOT": [300, 304, 552], "sensit": [300, 532], "WITH": [300, 304], "conjunct": 300, "disjunct": 300, "OR": [300, 302, 304, 333, 540], "xor": [300, 304], "negat": [300, 304], "bitopr": 300, "scalar": [300, 398, 405], "listliter": 300, "fold": [300, 552, 571], "mapliter": 300, "elementid": [300, 304], "notabl": 300, "AS": [300, 302, 537, 541], "BY": [300, 302], "invoc": 300, "interconnect": [301, 323, 390], "tcp": [301, 317], "empow": [301, 307, 324], "llm": 301, "sentenc": [301, 304, 306], "websocket": [302, 571], "worth": [302, 316, 394, 402, 540], "mutat": 302, "lambda": [302, 306, 388, 394, 400, 405, 476, 487, 489, 490, 491, 572], "groovi": 302, "currenttimemilli": [302, 553, 571], "expr": [302, 304, 306, 571], "secondari": 302, "rocksdb": [302, 553], "therein": 302, "council": [302, 328], "birthdai": [302, 319, 573], "differenti": 302, "123456": [302, 310, 325, 553], "hasid": 302, "secondli": [302, 327], "path_expand": 302, "concret": [302, 331, 332, 402], "endv": [302, 306, 324, 571], "path_opt": [302, 304, 306, 324, 571], "pathexpand": 302, "27": [302, 304, 306, 328, 390, 391, 393, 521], "hasstep": 302, "groupcount": [302, 571], "age_cnt": 302, "age_sum": 302, "scan": [302, 552], "propertyidvalu": 302, "moreov": [302, 304, 320, 324, 326, 552], "propertyidvalue1": 302, "propertyidvalue2": 302, "inE": [302, 394, 571], "conquer": 303, "retain": [304, 481, 554], "meant": [304, 306], "vertexid": 304, "inject": 304, "edgeid": 304, "propertykei": 304, "accessor": 304, "eq": [304, 306, 324, 331, 571], "neq": [304, 571], "gt": [304, 306, 571], "lt": [304, 306, 571], "gte": [304, 306, 321, 567, 571], "lte": [304, 321, 567, 571], "outsid": [304, 571], "textp": [304, 571], "startingwith": [304, 571], "endingwith": [304, 571], "rko": 304, "ark": 304, "notstartingwith": [304, 571], "notendingwith": [304, 571], "notcontain": [304, 571], "unequ": 304, "nest": 304, "wheretravers": 304, "act": [304, 388, 537, 540, 560, 572], "startkei": 304, "alter": [304, 540], "opposit": [304, 394, 468, 515], "nottravers": 304, "duplic": [304, 306, 467, 469, 471, 540, 541], "deduplabel": 304, "composit": [304, 306], "de": [304, 315], "impli": 304, "flat": 304, "br": 304, "selectkei": 304, "roll": [304, 306, 309], "accompani": 304, "aggregatefunc": 304, "emit": [304, 306, 388, 391, 394, 400, 572], "ascend": [304, 306], "asc": [304, 306], "toss": 304, "merg": [304, 394], "uniontravers": 304, "matchsent": 304, "binder": 304, "__": [304, 305, 306, 321, 394, 567, 571], "graphnam": 304, "unrol": 304, "linear": [304, 474, 476, 532, 552], "result_opt": [304, 306, 571], "all_v": [304, 306, 571], "lengthrang": 304, "keyvaluepair": 304, "trail": 304, "end_v": [304, 306, 571], "all_v_": 304, "vada": 304, "josh": 304, "29": [304, 306, 390, 391, 393], "lop": 304, "72057594037927939": 304, "rippl": 304, "72057594037927941": 304, "35": [304, 306, 328, 390, 391, 393, 400, 467, 517, 533], "peter": 304, "ongo": 304, "liter": 304, "1l": 304, "0f": 304, "0d": 304, "2l": 304, "IN": [304, 322], "isnul": 304, "month": 304, "bitwis": 304, "startswith": 304, "ma": 304, "endswith": 304, "ko": 304, "substr": [304, 571], "preced": [304, 540, 553], "parenthes": 304, "unari": 304, "modulu": 304, "membership": [304, 540], "34": [304, 306, 328, 390, 391, 393, 533], "729": 304, "1225": 304, "841": 304, "alias": 304, "k1": 304, "k2": 304, "v2": [304, 306, 312, 324, 388, 518, 572], "simplepath": [304, 571], "imper": [304, 324], "reflect": [304, 552, 560], "latter": [304, 306, 323], "mix": [304, 331, 552], "sack": [304, 571], "guidanc": 305, "gremlinpython": [305, 553], "sy": [305, 400], "gremlin_python": [305, 553], "graph_travers": 305, "driver_remote_connect": 305, "driverremoteconnect": [305, 553], "gremlin_endpoint": [305, 553], "remoteconn": [305, 553], "withremot": [305, 553], "oom": 305, "vast": 305, "mitig": 305, "risk": [305, 320], "queue": [305, 333], "graph_url": [305, 403, 553, 571], "stopiter": 305, "resultiterationbatchs": 305, "addcontactpoint": [305, 553], "resultset": [305, 553], "hasnext": 305, "dlcdn": 305, "your_endpoint_address": 305, "your_endpoint_port": 305, "classnam": [305, 571], "ser": [305, 571], "gryomessageserializerv1d0": [305, 571], "serializeresulttostr": [305, 571], "x": [305, 306, 317, 318, 328, 331, 388, 394, 400, 405, 443, 476, 484, 486, 487, 491, 515, 572], "realm": 306, "audit": 306, "toolsuit": 306, "primarili": [306, 324, 552], "simul": [306, 365, 400], "conclus": 306, "confid": 306, "intric": 306, "permit": [306, 540], "3k": 306, "gremlin_queri": 306, "190376": 306, "787074": 306, "sf1": 306, "432345564227583365": 306, "504403158265495622": 306, "576460752303435306": 306, "432345564227579434": 306, "hastyp": 306, "504403158265495612": 306, "144115188075855941": 306, "issubclassof": 306, "504403158265495553": 306, "confus": [306, 488, 489, 490], "mechan": [306, 322, 325, 327, 549, 557], "belong": [306, 325, 331, 332, 333, 402, 530, 533, 540, 546, 553], "distinguish": [306, 320, 388, 389, 390, 552], "worri": 306, "havelabel": 306, "216172782113783808": 306, "216172782113784710": 306, "label1": 306, "label2": 306, "forum": 306, "72057594037936036": 306, "360287970189718653": 306, "360287970189718655": 306, "joseph": 306, "firstnam": [306, 319, 551, 568, 573], "yacin": 306, "01t00": 306, "curiou": 306, "38416": 306, "mayb": 306, "pyplot": 306, "plt": 306, "comment_cont": 306, "comment_length": 306, "histogram": 306, "hist": [306, 414], "50": [306, 328, 487, 489, 490], "607c8e": 306, "grid": [306, 533], "axi": [306, 330, 331, 332, 347, 371, 400, 546], "xlabel": 306, "ylabel": 306, "gender": [306, 319, 573], "person_gend": 306, "male": 306, "femal": 306, "male_count": 306, "female_count": 306, "216172782113784483": 306, "around": [306, 403], "432345564227569033": 306, "288230376151712472": 306, "144115188075856168": 306, "144115188075860911": 306, "72057594037934114": 306, "hasmoder": 306, "studyat": 306, "workat": 306, "islocatedin": 306, "432345564227582847": 306, "hasinterest": 306, "504403158265496227": 306, "864691128455136658": 306, "1008806316530991636": 306, "360287970189645858": 306, "en": [306, 323, 331, 502, 506, 507, 508, 509, 511, 512, 513, 519, 520, 521, 522, 524, 525, 526, 527], "e1": 306, "citi": [306, 310, 323, 325], "ispartof": 306, "countri": 306, "288230376151711797": 306, "216172782113784555": 306, "14": [306, 328, 390, 391, 393, 445, 505, 513, 525, 540], "exactli": [306, 310, 324, 331, 405, 450, 459, 473, 518, 546, 553], "432345564227569357": 306, "432345564227570524": 306, "288230376151712984": 306, "144115188075861043": 306, "replyof": [306, 551, 568], "54336": 306, "33411": 306, "360287970189700805": 306, "59465": 306, "33403": 306, "awai": 306, "ineffect": 306, "illeg": 306, "simple_path": 306, "unfold": [306, 331], "hascreat": 306, "nation": 306, "china": 306, "np": [306, 391, 394, 400, 404, 555], "market": 306, "japan": 306, "browsers_us": 306, "browser_list": 306, "firefox": 306, "safari": 306, "browser_count": 306, "autopct": 306, "1f": 306, "univers": [306, 320, 405, 438, 439, 486, 496, 528, 532], "person1": 306, "person2": 306, "university1": 306, "university2": 306, "216172782113784481": 306, "216172782113784279": 306, "144115188075858884": 306, "216172782113784361": 306, "216172782113784291": 306, "144115188075858879": 306, "216172782113784642": 306, "216172782113784473": 306, "216172782113784328": 306, "144115188075858700": 306, "216172782113784700": 306, "216172782113784331": 306, "144115188075860619": 306, "216172782113784375": 306, "216172782113784333": 306, "144115188075858813": 306, "216172782113784593": 306, "216172782113784688": 306, "144115188075860870": 306, "216172782113784047": 306, "216172782113784692": 306, "144115188075862429": 306, "23": [306, 390, 391, 393], "216172782113784192": 306, "216172782113784107": 306, "216172782113784171": 306, "regular": [306, 479, 484, 485, 486, 508, 513, 516, 521, 524, 525, 526, 527], "butterfli": 306, "notion": 306, "matchanalyticsalgorithm": 306, "matchoptimizationalgorithm": 306, "216172782113784587": 306, "216172782113784363": 306, "144115188075860919": 306, "216172782113784532": 306, "216172782113784400": 306, "144115188075861858": 306, "216172782113784491": 306, "216172782113784401": 306, "144115188075858086": 306, "216172782113784598": 306, "216172782113784629": 306, "144115188075858881": 306, "216172782113783931": 306, "216172782113784657": 306, "144115188075858708": 306, "pa": 306, "pb": 306, "216172782113783809": 306, "216172782113784011": 306, "360287970189640007": 306, "360287970189640008": 306, "360287970189640009": 306, "2012": [306, 499], "216172782113783812": 306, "216172782113783882": 306, "36": [306, 328, 390, 391, 393, 445, 525, 533, 565], "360287970189640010": 306, "37": [306, 328, 390, 391, 393, 405, 533, 565], "216172782113784105": 306, "38": [306, 328, 390, 391, 393, 533, 565], "41": [306, 328, 390, 391, 393, 480, 533], "43": [306, 390, 391, 393, 405, 507, 533, 563], "216172782113783814": 306, "216172782113783962": 306, "360287970189640135": 306, "52": [306, 533], "216172782113784199": 306, "54": [306, 328, 480, 533], "216172782113784038": 306, "216172782113783816": 306, "216172782113784144": 306, "175": 306, "360287970189640462": 306, "72057594037927936": 306, "144115188075855872": 306, "288230376151711744": 306, "432345564227567616": 306, "504403158265495555": 306, "india": 306, "hasmemb": 306, "8248": 306, "8101": 306, "imposs": 306, "2822": 306, "tag1": 306, "tag2": 306, "37164": 306, "432": 306, "property1": 306, "property2": 306, "lastnam": [306, 319, 551, 568, 573], "donati": 306, "luigi": 306, "hall": 306, "costa": 306, "carlo": 306, "khan": 306, "meera": 306, "mahinda": 306, "eli": 306, "94": 306, "228": [306, 328], "emb": [306, 388, 572], "dom": 306, "pedro": 306, "ii": 306, "condariuc": 306, "bonomi": 306, "anyth": 306, "david": [306, 441, 452, 517], "silva": 306, "guliyev": 306, "tagclass": 306, "504403158265495552": 306, "504403158265495554": 306, "504403158265495556": 306, "504403158265495557": 306, "504403158265495558": 306, "504403158265495559": 306, "504403158265495560": 306, "504403158265495561": 306, "504403158265495562": 306, "504403158265495563": 306, "504403158265495564": 306, "504403158265495565": 306, "504403158265495566": 306, "504403158265495567": 306, "504403158265495568": 306, "504403158265495569": 306, "504403158265495570": 306, "504403158265495571": 306, "504403158265495572": 306, "504403158265495573": 306, "504403158265495574": 306, "504403158265495575": 306, "504403158265495576": 306, "504403158265495577": 306, "504403158265495578": 306, "504403158265495579": 306, "504403158265495580": 306, "504403158265495581": 306, "504403158265495582": 306, "504403158265495583": 306, "504403158265495584": 306, "504403158265495585": 306, "504403158265495586": 306, "504403158265495587": 306, "504403158265495588": 306, "504403158265495589": 306, "504403158265495590": 306, "504403158265495591": 306, "504403158265495592": 306, "504403158265495593": 306, "504403158265495594": 306, "504403158265495595": 306, "504403158265495596": 306, "504403158265495597": 306, "504403158265495598": 306, "504403158265495599": 306, "504403158265495600": 306, "504403158265495601": 306, "504403158265495602": 306, "504403158265495603": 306, "504403158265495604": 306, "504403158265495605": 306, "504403158265495606": 306, "504403158265495607": 306, "504403158265495608": 306, "504403158265495609": 306, "504403158265495610": 306, "504403158265495611": 306, "504403158265495613": 306, "504403158265495614": 306, "504403158265495615": 306, "504403158265495616": 306, "504403158265495617": 306, "504403158265495618": 306, "504403158265495619": 306, "504403158265495620": 306, "504403158265495621": 306, "q4": 306, "690": 306, "134313148716225": 306, "216172782113783811": 306, "216172782113783813": 306, "216172782113784707": 306, "216172782113784708": 306, "216172782113784709": 306, "216172782113783910": 306, "216172782113784104": 306, "216172782113784207": 306, "216172782113784318": 306, "216172782113784305": 306, "216172782113784597": 306, "216172782113784693": 306, "216172782113784018": 306, "216172782113784092": 306, "216172782113784108": 306, "216172782113784161": 306, "216172782113784162": 306, "73": [306, 328, 486], "216172782113783875": 306, "216172782113783932": 306, "216172782113784057": 306, "216172782113784068": 306, "216172782113784065": 306, "216172782113784235": 306, "216172782113784247": 306, "meaning": [306, 319, 332, 402], "449": 306, "454": [306, 328], "216172782113783810": 306, "descend": [306, 534], "216172782113784082": 306, "216172782113784169": 306, "216172782113784267": 306, "216172782113784368": 306, "216172782113784376": 306, "216172782113783938": 306, "216172782113784405": 306, "216172782113783980": 306, "216172782113783844": 306, "216172782113783901": 306, "216172782113783935": 306, "216172782113784439": 306, "216172782113784315": 306, "216172782113784374": 306, "216172782113784601": 306, "216172782113784431": 306, "216172782113783815": 306, "216172782113783817": 306, "216172782113783971": 306, "216172782113784154": 306, "216172782113784381": 306, "216172782113783933": 306, "earlier": [306, 491, 553], "216172782113783819": 306, "216172782113783826": 306, "216172782113783836": 306, "bi": [306, 323, 326], "query2": 306, "09": [306, 328], "07": [306, 315, 328, 459, 467], "hastag": 306, "count1": 306, "count2": 306, "jet_li": 306, "zhang_yim": 306, "faye_wong": 306, "tsui_hark": 306, "bruce_le": 306, "johnny_depp": 306, "tom_cruis": 306, "jackie_chan": 306, "query3": 306, "moder": 306, "infinit": [306, 501], "seriou": 306, "song": 306, "containerof": 306, "message_count": 306, "824633725780": 306, "08t02": 306, "334": [306, 328], "album": 306, "hao": 306, "wang": [306, 472, 474], "19791209300479": 306, "755914248304": 306, "02t20": 306, "03": [306, 328, 561], "344": 306, "wall": 306, "lin": 306, "lei": 306, "24189255811275": 306, "824633725045": 306, "03t18": 306, "633": 306, "893353201782": 306, "28t23": 306, "53": [306, 328, 533], "251": 306, "1030792152809": 306, "03t09": 306, "47": [306, 317, 318, 328, 390, 391, 393], "414": 306, "chen": 306, "32985348833887": 306, "07t07": 306, "038": 306, "zhang": [306, 563], "yang": [306, 563], "15393162789707": 306, "query4": 306, "membercount": 306, "country_count": 306, "personcount": 306, "72057594037932503": 306, "72057594037932473": 306, "72057594037932489": 306, "72057594037932494": 306, "72057594037932501": 306, "72057594037934803": 306, "72057594037934804": 306, "72057594037935005": 306, "72057594037928132": 306, "72057594037935879": 306, "288230376151711799": 306, "country_top100_forums_dict": 306, "personcountforum": 306, "72057594037935702": 306, "72057594037930685": 306, "72057594037932114": 306, "72057594037934231": 306, "72057594037935703": 306, "72057594037935730": 306, "72057594037935734": 306, "72057594037932509": 306, "72057594037935707": 306, "72057594037935708": 306, "72057594037935711": 306, "72057594037935714": 306, "72057594037935719": 306, "72057594037935729": 306, "72057594037935731": 306, "72057594037935724": 306, "72057594037929560": 306, "72057594037931546": 306, "72057594037931545": 306, "72057594037932479": 306, "72057594037932485": 306, "72057594037932505": 306, "72057594037932511": 306, "72057594037935710": 306, "72057594037935722": 306, "72057594037929246": 306, "72057594037928266": 306, "72057594037935713": 306, "72057594037934308": 306, "72057594037934313": 306, "72057594037934302": 306, "72057594037930430": 306, "72057594037934303": 306, "72057594037932482": 306, "72057594037935147": 306, "72057594037935148": 306, "72057594037935157": 306, "72057594037927973": 306, "72057594037929386": 306, "72057594037934315": 306, "72057594037935720": 306, "72057594037935015": 306, "72057594037934300": 306, "72057594037930861": 306, "72057594037934319": 306, "72057594037931542": 306, "72057594037929583": 306, "72057594037933324": 306, "72057594037929182": 306, "72057594037929739": 306, "72057594037934829": 306, "72057594037935658": 306, "72057594037935660": 306, "72057594037935674": 306, "72057594037935682": 306, "72057594037935683": 306, "72057594037935672": 306, "72057594037927978": 306, "72057594037935163": 306, "72057594037935014": 306, "72057594037931544": 306, "72057594037934297": 306, "72057594037927979": 306, "72057594037932474": 306, "72057594037934384": 306, "72057594037932639": 306, "72057594037934380": 306, "72057594037935146": 306, "72057594037935152": 306, "72057594037928134": 306, "72057594037928674": 306, "72057594037929248": 306, "72057594037931240": 306, "72057594037931247": 306, "72057594037931256": 306, "72057594037930958": 306, "72057594037930963": 306, "72057594037931259": 306, "72057594037931260": 306, "72057594037931262": 306, "72057594037929365": 306, "72057594037929419": 306, "72057594037929421": 306, "72057594037929431": 306, "72057594037929434": 306, "72057594037929437": 306, "72057594037929446": 306, "72057594037929447": 306, "72057594037929449": 306, "72057594037929450": 306, "72057594037935166": 306, "72057594037929519": 306, "72057594037929451": 306, "72057594037929452": 306, "72057594037935046": 306, "72057594037932339": 306, "72057594037932481": 306, "72057594037934294": 306, "72057594037932389": 306, "72057594037932976": 306, "72057594037930870": 306, "72057594037931266": 306, "72057594037928092": 306, "72057594037928495": 306, "72057594037929510": 306, "72057594037929517": 306, "72057594037929961": 306, "72057594037929965": 306, "72057594037930242": 306, "72057594037930248": 306, "72057594037930250": 306, "72057594037930313": 306, "72057594037931547": 306, "72057594037935686": 306, "72057594037929052": 306, "72057594037929053": 306, "72057594037929055": 306, "72057594037929057": 306, "72057594037929060": 306, "72057594037934811": 306, "72057594037934813": 306, "72057594037934816": 306, "72057594037934821": 306, "72057594037934822": 306, "72057594037934823": 306, "72057594037934828": 306, "72057594037934835": 306, "72057594037934837": 306, "72057594037934975": 306, "72057594037934976": 306, "72057594037935032": 306, "72057594037935038": 306, "72057594037935045": 306, "72057594037935664": 306, "72057594037935673": 306, "72057594037935678": 306, "72057594037935685": 306, "72057594037931549": 306, "72057594037931550": 306, "72057594037931552": 306, "72057594037931554": 306, "72057594037931557": 306, "72057594037931560": 306, "72057594037931566": 306, "72057594037935671": 306, "72057594037935670": 306, "72057594037934977": 306, "72057594037931543": 306, "72057594037929518": 306, "72057594037935679": 306, "72057594037931575": 306, "72057594037932438": 306, "72057594037932878": 306, "72057594037932886": 306, "72057594037932888": 306, "72057594037927982": 306, "72057594037930526": 306, "72057594037930535": 306, "72057594037930546": 306, "72057594037930976": 306, "72057594037930536": 306, "72057594037931358": 306, "72057594037930366": 306, "72057594037931574": 306, "72057594037932435": 306, "72057594037935020": 306, "72057594037935864": 306, "72057594037933861": 306, "72057594037932440": 306, "72057594037927981": 306, "72057594037931349": 306, "72057594037931366": 306, "72057594037932885": 306, "72057594037927980": 306, "72057594037930529": 306, "72057594037930532": 306, "72057594037931304": 306, "72057594037932433": 306, "72057594037932441": 306, "72057594037934547": 306, "query11": 306, "live": 306, "startdat": 306, "enddat": 306, "216172782113784091": 306, "216172782113784250": 306, "216172782113784403": 306, "216172782113784537": 306, "216172782113784122": 306, "query14": 306, "country1": 306, "country2": 306, "subscor": 306, "award": [306, 563], "chile": 306, "p1": 306, "p2": 306, "case1": 306, "case2": 306, "case3": 306, "case4": 306, "216172782113784153": 306, "216172782113784100": 306, "216172782113783956": 306, "216172782113784673": 306, "216172782113784252": 306, "216172782113784263": 306, "216172782113784193": 306, "216172782113784242": 306, "216172782113784623": 306, "216172782113784498": 306, "216172782113784251": 306, "216172782113784538": 306, "216172782113784167": 306, "216172782113783864": 306, "216172782113784613": 306, "216172782113784116": 306, "faq": 307, "javasdk": [308, 557], "transit": [309, 509, 537], "magnitud": [309, 322], "superior": [309, 321, 323, 327], "rich": [309, 320, 323, 325, 390, 392], "neg": [309, 310, 388, 392, 394, 396, 400, 405, 424, 502], "gsl": [309, 310, 320, 390, 391, 392, 393, 397, 404], "gat": [309, 325, 388, 396, 572], "deepwalk": [309, 388, 572], "trans": [309, 388, 572], "pyg": [309, 310, 313, 314, 325, 326, 327], "flexibli": [309, 320, 325, 327], "pytorch": [309, 310, 317, 320, 325, 394, 396], "onlin": [309, 322, 325, 326, 549, 553], "fed": [309, 321, 325], "ek": 309, "aw": [309, 328, 564], "ack": 309, "failov": [309, 327], "concentr": [309, 327, 444], "industri": [310, 320, 325, 327, 328], "feasibl": [310, 325], "preprocess": [310, 400], "uniformli": [310, 477, 478, 479, 487, 488, 489, 490, 491, 535], "lookup": [310, 325, 400, 540], "topolog": [310, 390], "nn": [310, 312, 315, 316, 317, 318, 321, 325, 331, 388, 400, 567, 572], "ego": [310, 325, 396, 541, 572], "dimension": [310, 316, 321, 325, 389, 391, 392], "conv": [310, 313, 325], "edge_index": [310, 313, 317, 318], "carri": 310, "predict": [310, 316, 320, 321, 325], "asynchron": 310, "tensor": [310, 313, 330, 331, 332, 371, 388, 392, 396, 398, 544, 546], "plaintext": 310, "clearli": [310, 325], "dimens": [310, 312, 315, 316, 321, 325, 389, 487, 488, 489, 490, 532, 567], "batchgraph": 310, "mini": [310, 325], "loss": [310, 312, 315, 316, 317, 318, 321, 325, 400, 567, 572], "mind": 310, "classif": [310, 314, 321, 325, 329, 388, 389, 400], "trainer": [310, 312, 315, 316, 321, 388, 567, 572], "hk": 311, "rm": [311, 400], "4g": 311, "aarch64": 312, "processor": 312, "egographsag": [312, 315, 321, 567], "349": [312, 316, 321, 567], "venu": [312, 321], "www": [312, 315, 316, 321, 405, 459, 513, 522, 525, 553, 567], "tf": [312, 313, 315, 316, 321, 388, 389, 394, 395, 400, 567, 572], "disable_v2_behavior": [312, 315, 316, 321, 567], "importerror": [312, 315, 316, 321, 567], "load_ogbn_mag": [312, 315, 316, 319, 321, 567, 573], "egosagesuperviseddataload": [312, 316, 321, 567], "localtrain": [312, 315, 316, 321, 567], "node_typ": [312, 315, 316, 321, 388, 390, 391, 394, 397, 400, 404, 567, 572], "class_num": [312, 316, 321, 388, 567, 572], "features_num": [312, 315, 316, 321, 388, 567, 572], "hops_num": [312, 316, 321, 388, 567, 572], "nbrs_num": [312, 315, 316, 321, 567], "epoch": [312, 313, 315, 316, 317, 318, 321, 388, 393, 551, 567, 572], "hidden_dim": [312, 315, 316, 321, 388, 400, 567, 572], "256": [312, 316, 317, 318, 321, 328, 469, 529, 553, 567], "in_drop_r": [312, 316, 321, 567], "learning_r": [312, 315, 316, 321, 400, 567], "reset_default_tf_graph": [312, 316, 321, 567], "act_func": [312, 316, 321, 567], "relu": [312, 316, 321, 567], "dropout": [312, 315, 316, 321, 400, 567], "train_data": [312, 315, 316, 321, 567], "mask": [312, 316, 321, 404, 567], "train_embed": [312, 316, 321, 567], "src_ego": [312, 315, 316, 321, 567], "train_label": [312, 316, 321, 567], "reduce_mean": [312, 316, 321, 388, 400, 567, 572], "sparse_softmax_cross_entropy_with_logit": [312, 316, 321, 388, 400, 567, 572], "logit": [312, 316, 321, 400, 567], "adamoptim": [312, 315, 316, 321, 400, 567], "test_embed": [312, 316, 321, 567], "test_label": [312, 316, 321, 567], "test_indic": [312, 316, 321, 567], "argmax": [312, 316, 317, 318, 321, 567], "output_typ": [312, 316, 321, 375, 544, 567], "test_acc": [312, 316, 317, 318, 321, 567], "div": [312, 316, 321, 567], "reduce_sum": [312, 316, 321, 567], "float32": [312, 316, 317, 318, 321, 391, 400, 567], "obgn": [312, 316], "mag": [312, 316, 321, 567], "paper_featur": [312, 321, 567], "feat_": [312, 315, 316, 317, 318, 321, 567], "128": [312, 315, 316, 317, 318, 321, 400, 567], "lg": [312, 315, 316, 321, 383, 547, 561, 567], "cite": [312, 315, 316, 321, 567], "gen_label": [312, 315, 316, 321, 383, 547, 567], "val": [312, 315, 316, 321, 388, 404, 547, 567, 572], "85": [312, 315, 316, 321, 328, 331, 547, 567], "seed": [313, 388, 396, 400, 459, 462, 463, 464, 465, 467, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 490, 491, 494, 495, 496, 497, 500, 532, 535, 537], "sampler": [313, 315, 393, 396, 398], "perceptu": 313, "unsupervis": [313, 315, 329, 388, 394, 396, 397, 547], "putback": 313, "outofrangeerror": [313, 393, 394, 400], "evolv": [313, 320, 553], "neighborsampl": [313, 392], "edge_weight": [313, 392, 394], "random_with_replac": 313, "topk": [313, 392, 394], "pad": [313, 392], "expand_factor": [313, 392, 397], "sparsenod": [313, 391, 392, 394], "sparseedg": [313, 391, 392, 394], "layer1": [313, 392], "layer2": [313, 392], "neighbor_sampl": [313, 392], "bui": [313, 320, 391, 392, 393, 394, 397, 400], "i2i": [313, 392, 394], "layer_nod": [313, 392], "int_attr": [313, 391, 392, 393, 397, 400], "layer_edg": [313, 392], "float_attr": [313, 391, 392, 393, 397, 400], "egograph": [313, 325, 388, 396, 572], "negativesampl": [313, 397], "node_weight": [313, 394, 397], "edge_sampl": [313, 393, 397], "negative_sampl": [313, 388, 397, 572], "neg_nod": [313, 397], "heterogen": [313, 316, 321, 323, 325, 389, 390, 391, 392, 394], "randomli": [313, 394, 459, 465, 469, 471, 480, 482, 487, 490, 495, 537], "outv": [313, 388, 392, 394, 400, 571, 572], "overs": 313, "citat": [314, 316, 317, 318, 321, 329, 400, 567], "revisit": [314, 315, 329], "ho2": 314, "with_dataset": [315, 317, 387, 547, 573], "k8s_service_typ": [315, 317, 387, 547, 567], "loadbalanc": [315, 547, 567], "k8s_image_pull_polici": [315, 317, 387, 547], "cell": [315, 533], "metainfo": 315, "obgn_mag": 315, "ogbn_mag_smal": [315, 319, 567, 573], "chose": [315, 316], "i_featur": [315, 316], "argpars": [315, 317], "tfg": 315, "egosageunsuperviseddataload": 315, "parse_arg": [315, 317], "argumentpars": [315, 317], "egosag": 315, "add_argu": [315, 317], "output_dim": [315, 388, 572], "neg_num": 315, "0001": 315, "agg_typ": 315, "drop_out": 315, "neg_sampl": 315, "temperatur": 315, "dim": [315, 317, 318, 487, 488, 489, 490], "src_emb": [315, 388, 572], "dst_emb": 315, "dst_ego": 315, "neg_dst_emb": 315, "neg_dst_ego": 315, "unsupervised_softmax_cross_entropy_loss": 315, "ogbn": [316, 317, 318, 321, 567], "microsoft": [316, 321, 567], "institut": [316, 321, 567], "accomplish": [316, 321, 459], "word2vec": [316, 321, 567], "load_ogbn_arxiv": [317, 318], "num_server_nod": 317, "num_client_nod": 317, "ogbn_arxiv": [317, 318], "8gi": 317, "ifnotpres": [317, 547], "0a20240115": 317, "glt_graph": [317, 318], "graphlearn_torch": [317, 318], "node_featur": [317, 318], "node_label": [317, 318, 547], "edge_dir": [317, 318], "random_node_split": [317, 318], "num_val": [317, 318], "num_test": [317, 318], "num_client": [317, 318], "manifest_path": 317, "client_folder_path": 317, "kubeflow": [317, 399], "pytorchjob": 317, "torch": [317, 318], "pytorchreplicaspec": 317, "restartpolici": 317, "onfailur": 317, "imagepullpolici": 317, "node_rank": 317, "master_addr": [317, 318], "volumemount": 317, "emptydir": 317, "medium": 317, "sizelimit": 317, "num_worker_replica": 317, "my_pod_nam": 317, "group_mast": 317, "valuefrom": 317, "fieldref": 317, "fieldpath": 317, "distributeddataparallel": 317, "torch_geometr": [317, 318], "glt": [317, 318], "gl_torch_graph": 317, "gltorchgraph": 317, "no_grad": [317, 318], "test_load": [317, 318], "dataset_nam": [317, 318], "eval": [317, 318, 544], "y_true": [317, 318], "enumer": [317, 318, 330], "devic": [317, 318, 328], "del": [317, 318, 402, 540], "y_pred": [317, 318], "keepdim": [317, 318], "run_client_proc": 317, "num_serv": [317, 318], "client_rank": [317, 318], "server_rank_list": 317, "training_pg_master_port": 317, "init_cli": [317, 318], "master_port": [317, 318], "server_client_master_port": [317, 318], "num_rpc_thread": [317, 318], "client_group_nam": 317, "k8s_glt_client": 317, "is_dynam": [317, 318], "current_ctx": 317, "get_context": 317, "init_process_group": 317, "gloo": 317, "world_siz": 317, "init_method": 317, "train_load": [317, 318], "distneighborload": [317, 318], "num_neighbor": [317, 318], "input_nod": [317, 318], "collect_featur": [317, 318], "to_devic": [317, 318], "worker_opt": [317, 318], "remotedistsamplingworkeropt": [317, 318], "server_rank": 317, "worker_devic": [317, 318], "worker_concurr": [317, 318], "buffer_s": [317, 318], "256mb": 317, "prefetch_s": [317, 318], "workload_typ": [317, 318], "in_channel": [317, 318], "hidden_channel": [317, 318], "num_lay": [317, 318], "out_channel": [317, 318], "device_id": 317, "adam": [317, 318], "lr": [317, 318], "001": 317, "arxiv": [317, 318, 405, 448, 463, 464, 465, 479, 532], "zero_grad": [317, 318], "log_softmax": [317, 318], "nll_loss": [317, 318], "backward": [317, 318, 325, 394, 491, 547], "03d": [317, 318], "04f": 317, "4f": [317, 318], "shutdown_cli": [317, 318], "__name__": [317, 400], "__main__": [317, 400], "supervis": [317, 321, 329, 389, 392, 400, 547, 567], "sage": 317, "9997": 317, "train_loader_master_port": 317, "9998": 317, "test_loader_master_port": 317, "9999": 317, "9001": 317, "9002": 317, "9003": 317, "9004": 317, "k8s_launch": 317, "ogb": 318, "nodeproppr": 318, "unsqueez": 318, "acc": 318, "512": [318, 394], "1gb": 318, "shut": 318, "trivial": [319, 327, 456], "bucket": [319, 547, 563], "_e": [319, 402, 549, 573], "ldbc_sampl": [319, 553, 571, 573], "person_0_0": [319, 553, 568, 573], "didn": [319, 328], "person_knows_person_0_0": [319, 553, 568, 573], "comment_0_0": [319, 568, 573], "person_likes_comment_0_0": [319, 573], "deal": [319, 323, 392], "unseen": [319, 325, 555], "person_likes_post_0_0": [319, 573], "post_0_0": [319, 573], "ndarrai": [319, 332, 347, 358, 391, 392, 394, 397, 402, 404, 540, 573], "comment_replyof_comment_0_0": [319, 568, 573], "col_0": [319, 573], "col_1": [319, 573], "coo": [319, 551, 573], "array_v": [319, 573], "col": [319, 573], "array_": [319, 573], "s3": [319, 402, 573], "hood": 319, "distributedli": [319, 390, 396, 398, 399, 400], "fsspec": [319, 573], "kwarg": [319, 331, 332, 339, 350, 362, 366, 367, 384, 387, 397, 402, 403, 404, 547], "ds1": [319, 573], "datafil": [319, 573], "ds2": [319, 573], "graphscope_bucket": [319, 573], "ds3": [319, 573], "9000": [319, 553, 573], "extra_conf": [319, 573], "conf1": [319, 573], "d34": [319, 573], "client_kwarg": [319, 573], "region_nam": [319, 573], "east": [319, 573], "ossf": [319, 573], "subclass": [319, 330, 540], "abstractfilesystem": [319, 573], "abstractbufferfil": 319, "_upload_chunk": [319, 573], "_initiate_upload": [319, 573], "_fetch_rang": [319, 573], "register_implement": [319, 573], "protocol_nam": [319, 573], "protocol_file_system": [319, 573], "direction": 319, "exce": [319, 498, 499], "super": [319, 331, 390, 394], "modular": [320, 532], "seller": 320, "buyer": [320, 324], "fraudul": 320, "sell": 320, "suspici": 320, "fraud": [320, 327], "feed": [320, 383, 388, 391, 394, 400, 404, 547, 572], "webui": 320, "necessit": 320, "diversifi": 320, "ingest": [320, 553], "rapid": 320, "analyst": 320, "resembl": [320, 532, 537, 539], "olap": 320, "gen": [320, 394], "dataflow": [320, 322], "arriv": 320, "financi": 320, "billion": [320, 323, 327], "preval": 320, "miniconda": 321, "scientif": 321, "field_of_studi": [321, 567], "subject": 321, "4307": [321, 567], "n1": 321, "n2": 321, "proven": 321, "2014": [321, 405, 567], "2020": [321, 567], "ret1": [321, 567], "k_core": [321, 331, 405, 541, 563, 567], "ret2": [321, 567], "kcore": [321, 567], "downstream": [321, 394], "train_sag": 321, "130": [321, 567], "effortlessli": 321, "conduit": 321, "simultan": [321, 327, 549], "icde2023": 322, "sigmod2017": [322, 563, 569], "gra": 322, "ph": 322, "arallel": 322, "ngine": 322, "opensourc": 322, "raph": 322, "nalysi": 322, "elat": 322, "ransact": 322, "loos": [322, 327, 549], "mysql": [322, 549], "nutshel": [322, 549], "exploit": [322, 549], "ahead": [322, 549], "wal": [322, 549], "etriev": 322, "terfac": 322, "portabl": [322, 552], "rust": [322, 552, 553], "handler": [322, 547], "chive": 322, "guardian": 322, "galaxi": 322, "steal": 322, "tackl": [322, 323], "imbal": 322, "nvlink": 322, "acut": 322, "asymmetr": 322, "innov": 322, "speedup": 322, "cncf": 322, "sandbox": 322, "soon": [322, 326, 327, 328, 391], "amplifi": 322, "sophist": 322, "dissoci": 322, "ly": 322, "dag": [322, 331, 332, 350, 402, 540, 544, 547], "laptop": 322, "loop": [322, 405, 415, 428, 467, 469, 471, 473, 479, 487, 488, 489, 490, 491, 497, 500, 540, 541, 571], "correl": [322, 405], "subtask": 322, "earli": 322, "nsdi": [322, 569], "legaci": 322, "interchang": 322, "memoiz": 322, "vldb2021": 322, "artial": 322, "ncrement": 322, "transport": 323, "protein": [323, 481], "uncov": 323, "vari": [323, 389], "unless": [323, 392, 540], "discov": 323, "discoveri": [323, 325, 547, 553], "rough": 323, "accordingli": [323, 380], "snap": 323, "stanford": [323, 531], "cs224w": 323, "constitu": 323, "bellman": [323, 405], "ford": [323, 405], "wiki": [323, 331, 502, 506, 507, 508, 509, 511, 512, 513, 519, 520, 521, 522, 524, 525, 526, 527], "s_algorithm": 323, "towardsdatasci": 323, "9bd8951e7da": 323, "road": [323, 555], "logist": 323, "deliveri": 323, "media": 323, "nontrivi": [323, 512], "steep": 323, "sought": 323, "monei": [324, 327], "launder": [324, 327], "exact": [324, 469, 471, 567], "exclud": 324, "heurist": [324, 467], "purchas": 324, "bolder": 324, "border": 324, "sens": [324, 532, 547], "embrac": 324, "grasp": 324, "drug": 325, "likelihood": 325, "biologi": 325, "valuabl": 325, "bioinformat": 325, "chemic": 325, "promis": 325, "driven": [325, 532, 552], "carefulli": 325, "rewind": 325, "stack": 325, "convolut": [325, 396], "weigh": 325, "choic": [325, 552, 553], "huge": [325, 555], "gradient": 325, "recal": 325, "f1": [325, 402], "assess": [325, 400, 517], "irregular": 325, "unstructur": 325, "pool": 325, "hardwar": [325, 556], "undergo": 325, "perceiv": 325, "maxgraph": [326, 569], "2x": 326, "elast": [326, 553], "encrypt": 326, "geminigraph": [327, 328], "plato": [327, 328], "empir": 327, "enjoi": 327, "janusgraph": 327, "nebula": 327, "relaunch": [327, 553], "recoveri": 327, "coars": 327, "grain": 327, "invest": 327, "trace": [327, 331], "dgl": 327, "accommod": 327, "nebular": 327, "movement": [327, 394], "grade": 328, "r6": 328, "8xlarg": 328, "alibabacloud": 328, "ec": 328, "xl": 328, "a038f97": 328, "170e7d3": 328, "21009d6": 328, "v4": 328, "mpich": 328, "fair": 328, "huge_pag": 328, "jemalloc": 328, "o3": 328, "determinist": [328, 333, 547, 553], "cdlp": [328, 331, 563], "load_direct": 328, "load_undirected_from_direct": 328, "reformat": 328, "mark": [328, 405], "datagen": 328, "9_0": 328, "fb": 328, "62": 328, "9_1": 328, "78": [328, 459, 533], "9_2": 328, "zf": 328, "88": [328, 472, 474], "60": [328, 405, 533, 553], "61": 328, "176": [328, 496], "graph500": 328, "71": [328, 405, 477, 481, 487], "79": [328, 472, 474], "friendster": 328, "97": 328, "39": [328, 390, 391, 393, 405, 533, 563, 565], "86": 328, "57": 328, "126": [328, 473], "98": 328, "83": 328, "66": 328, "1695": 328, "2742": 328, "3600": 328, "425": 328, "55": [328, 439], "lcc": 328, "521": 328, "51": [328, 533], "296": 328, "1859": 328, "201": [328, 536], "842": 328, "68": 328, "competitor": 328, "pagerank_loc": 328, "65": 328, "72": 328, "84": 328, "63": [328, 476, 478], "gunrock": 328, "0c9a96": 328, "grout": 328, "5ce160": 328, "v7": 328, "v10": 328, "gn6v": 328, "c8g1": 328, "16xlarg": 328, "8x": 328, "16gb": 328, "nvidia": 328, "v100": 328, "gb": 328, "soc": [328, 460, 461], "livejournal1": 328, "89": 328, "9345": 328, "215": [328, 529], "560": 328, "3029": 328, "129": [328, 495], "389": 328, "155": 328, "0549": 328, "sinaweibo": 328, "168": 328, "1649": 328, "647": 328, "orkut": 328, "121": 328, "193": 328, "658": 328, "3201": 328, "7677": 328, "137": [328, 467], "2139": 328, "319": 328, "261": 328, "69": [328, 527, 533], "235": 328, "567": 328, "283": 328, "073": 328, "6619": 328, "45": [328, 390, 391, 393, 469], "150": 328, "87299": 328, "162": 328, "60403": 328, "9676": 328, "141": 328, "347": 328, "7772": 328, "0118": 328, "306": 328, "8618": 328, "9134": 328, "467": 328, "60801": 328, "8666": 328, "3501": 328, "870": 328, "6451": 328, "198": 328, "829": 328, "5036": 328, "229": 328, "024": 328, "483": 328, "178": 328, "5593": 328, "807": 328, "367": 328, "6946": 328, "2339": 328, "jupyt": [329, 547], "notebook": [329, 547], "jupyterlab": 329, "playground": [329, 574], "bipartit": [329, 388, 390, 446, 494, 495, 496, 528, 572], "grapeengin": 330, "vineyardserv": 330, "grapeinst": 330, "graphscopeserv": 330, "inlin": 330, "dag_fil": 330, "dagfil": 330, "rundagfil": 330, "subscrib": 330, "charg": 330, "commspec": [330, 549, 552, 554], "comm_spec": [330, 549, 552, 554], "vineyard_socket": 330, "bl": 330, "dispatchresult": 330, "onrec": 330, "commanddetail": 330, "gsobject": 330, "objectmanag": 330, "appentri": 330, "icontextwrapp": 330, "ifragmentwrapp": 330, "projector": 330, "propertygraphutil": 330, "objecttyp": 330, "putobject": 330, "obj": 330, "removeobject": 330, "getobject": [330, 553, 554], "hasobject": 330, "analyticalserv": 330, "startserv": 330, "stopserv": 330, "engineconfig": 330, "tojsonstr": 330, "vineyard_rpc_endpoint": 330, "enable_java_sdk": 330, "setcommand": 330, "enum": 330, "aggregatepolici": 330, "kpickfirst": 330, "kpickfirstnonempti": 330, "krequireconsist": 330, "kconcat": 330, "kpickfirstnonemptygraphdef": 330, "kmergegraphdef": 330, "worker_id": 330, "error_cod": 330, "set_error": 330, "has_large_data": 330, "set_graph_def": 330, "graphdefpb": 330, "graph_def": 330, "set_data": 330, "large_data": 330, "inarch": 330, "arc": 330, "aggregate_polici": 330, "fragmentwrapp": 330, "addcolumn": 330, "vdata_t": 330, "edata_t": 330, "arrowvertexmap": 330, "internaltyp": 330, "arrowprojectedfragmentbas": 330, "bareregist": 330, "internal_oid_t": 330, "property_graph_typ": 330, "eid_typ": 330, "vertexrang": [330, 333], "inner_vertices_t": 330, "outer_vertices_t": 330, "vertices_t": 330, "sub_vertices_t": 330, "nbr_t": 330, "arrow_projected_fragment_impl": 330, "compact_nbr_t": 330, "compactnbr": 330, "nbrunit": 330, "compact_adj_list_t": 330, "compactadjlist": 330, "const_adj_list_t": 330, "const_compact_adj_list_t": 330, "property_vertex_map_t": 330, "arrowprojectedvertexmap": 330, "label_id_typ": 330, "prop_id_typ": 330, "property_graph_t": 330, "eid_array_t": 330, "data_t": 330, "inner_vertex_array_t": 330, "outer_vertex_array_t": 330, "objectmeta": 330, "preparetorunapp": 330, "prepareconf": 330, "fnum": [330, 333], "vertex_prop_id": 330, "edge_prop_id": 330, "mirrorvertic": 330, "getid": 330, "getinternalid": 330, "getfragid": 330, "typedarrai": 330, "value_typ": 330, "gid2vertex": 330, "vertex2gid": 330, "getinnerverticesnum": 330, "getouterverticesnum": 330, "getverticesnum": 330, "getedgenum": [330, 554], "getinedgenum": [330, 554], "getoutedgenum": [330, 554], "getoutgoingedgenum": 330, "getincomingedgenum": 330, "gettotalverticesnum": 330, "isinnervertex": 330, "getoutervertex": 330, "getinnervertexid": 330, "getinnervertexinternalid": 330, "getoutervertexid": 330, "getoutervertexinternalid": 330, "gid2oid": 330, "oid2gid": 330, "innervertexgid2vertex": 330, "outervertexgid2vertex": 330, "getoutervertexgid": 330, "getinnervertexgid": 330, "compact_": 330, "enable_if": 330, "getincominginnervertexadjlist": 330, "getoutgoinginnervertexadjlist": 330, "getincomingoutervertexadjlist": 330, "getoutgoingoutervertexadjlist": 330, "src_fid": 330, "dst_fid": 330, "getlocaloutdegre": 330, "getlocalindegre": 330, "destlist": 330, "iedest": 330, "iedestss": 330, "oedest": 330, "oedestss": 330, "ioedest": 330, "ioedestss": 330, "getvertexmap": 330, "get_out_edges_ptr": 330, "get_in_edges_ptr": 330, "get_oe_offsets_begin_ptr": 330, "get_oe_offsets_end_ptr": 330, "get_ie_offsets_begin_ptr": 330, "get_ie_offsets_end_ptr": 330, "get_edata_array_accessor": 330, "get_vdata_array_accessor": 330, "get_arrow_frag": 330, "vertex_map_id": 330, "local_vertex_map": [330, 554], "getoid": 330, "getgid": 330, "offset2lid": 330, "getoffsetfromlid": 330, "getlidfromgid": 330, "getfidfromgid": 330, "oid_t_": 330, "vid_t_": 330, "arrowfragmentload": 330, "efil": [330, 554], "vfile": [330, 554], "graph_info": 330, "leaf": [330, 332, 377, 405, 450, 534], "table_vec_t": 330, "loadvertexedget": 330, "loadvertext": 330, "loadedget": 330, "loadfrag": 330, "loadfragmentasfragmentgroup": 330, "addlabelstofrag": 330, "frag_id": [330, 549, 554], "adddatatoexistedvlabel": 330, "adddatatoexistedelabel": 330, "addlabelstofragmentasfragmentgroup": 330, "extendlabeldata": 330, "extend_typ": 330, "initpartition": 330, "doxygenclass": 330, "arrowfragmentappend": 330, "doxygen": 330, "runner": [330, 563], "_build": 330, "appbas": 330, "defaultmessagemanag": 330, "need_split_edg": 330, "konlyout": 330, "propertyappbas": 330, "propertymessagemanag": 330, "propertyautoappbas": 330, "propertyautomessagemanag": 330, "app_t": 330, "defaultwork": 330, "parallelenginespec": 330, "pe_spec": 330, "defaultparallelenginespec": 330, "getcontext": 330, "ostream": 330, "parallelpropertywork": 330, "parallelpropertymessagemanag": 330, "propertyautowork": 330, "pointer": 330, "appfram": 330, "creatework": 330, "deletework": 330, "lib_path": 330, "worker_handl": 330, "queryarg": 330, "query_arg": [330, 375, 544], "context_kei": 330, "frag_wrapp": 330, "functiontyp": 330, "argsnum": 330, "argsunpack": 330, "datatyp": 330, "argtypeat": 330, "defaultpropertywork": 330, "ctx_t": 330, "ctxwrapperbuild": 330, "contextwrapp": 330, "vertexpropertycontext": [330, 563], "contextbas": 330, "labeledvertexdatacontext": 330, "contextdatatyp": 330, "icolumn": 330, "get_column": 330, "get_typed_column": 330, "vertex_properti": [330, 331, 333], "properties_map": 330, "vertexdatacontextwrapp": 330, "ivertexdatacontextwrapp": 330, "fragment_wrapp": 330, "unique_ptr": 330, "tondarrai": 330, "todatafram": 330, "tovineyardtensor": 330, "tovineyarddatafram": 330, "toarrowarrai": 330, "tensorcontext": [330, 332], "set_shap": 330, "tensor_t": 330, "tensorcontextwrapp": 330, "itensorcontextwrapp": 330, "cmake_extra_opt": 331, "asset": 331, "labeled_vertex_data": 331, "dynamic_vertex_data": 331, "labeled_vertex_properti": 331, "cpp_pregel": 331, "cython_pi": 331, "cython_pregel": 331, "appdagnod": [331, 366, 372], "__init__": [331, 388, 395, 402, 403, 404, 540, 541, 543, 547, 553, 572], "bytesio": [331, 339], "is_compat": 331, "graphdagnod": [331, 343, 357, 358, 374, 381, 383, 402, 403, 547], "invalidargumenterror": [331, 547], "scannererror": 331, "incorrect": 331, "signatur": [331, 394, 540], "full_jar_path": [331, 563], "java_app_class": [331, 563], "neccessari": 331, "resouc": 331, "__call__": 331, "qualifi": [331, 563], "app_asset": [331, 343, 349], "app_nod": 331, "__del__": 331, "unload": [331, 354, 372, 374], "attribute_assortativity_coeffici": [331, 563], "assort": 331, "ref": [331, 552], "joint": [331, 497, 498, 499, 500, 541], "newman": [331, 405, 469, 471, 532], "026126": 331, "2003": [331, 405, 462, 469, 480, 488], "numeric_assortativity_coeffici": [331, 563], "analog": 331, "k_": [331, 441, 505], "rac": 331, "s_i": 331, "sum_": [331, 405, 473], "w_": [331, 405, 473], "ij": [331, 405], "k_j": 331, "valueerror": [331, 387, 402, 405, 479, 536, 547], "barrat": 331, "barth\u00e9lemi": 331, "pastor": 331, "satorra": 331, "vespignani": 331, "pna": 331, "3747": 331, "3752": 331, "2004": [331, 494], "average_shortest_path_length": [331, 405, 541, 563], "frac": [331, 405, 415, 473], "vertexdatacontextdagnod": [331, 332], "avg_clust": [331, 563], "degree_threshold": 331, "threshold": [331, 487, 488, 489, 490], "1e9": 331, "unweight": [331, 405], "foster": 331, "grassberg": 331, "paczuski": 331, "107": [331, 493], "10815": 331, "1e": [331, 400, 405, 459], "06": [331, 405], "html": [331, 405, 489, 492, 501, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 520, 522], "gv": 331, "hits_algorithm": 331, "vertexpropertycontextdagnod": [331, 332], "is_simple_path": [331, 563], "nonempti": 331, "biject": [331, 535], "smallest": [331, 492, 512, 522], "pairwis": 331, "k_shell": [331, 563], "katz_centrality_numpi": [331, 405], "auttenu": 331, "maximun": 331, "min_progress": 331, "progress_tri": 331, "progress": [331, 484], "met": 331, "blondel": 331, "et": [331, 537], "al": [331, 537], "stat": [331, 487, 489], "mech": 331, "10008": 331, "2008": [331, 459, 482], "sotera": 331, "lpa_u2i": [331, 563], "labeledvertexpropertycontextdagnod": [331, 332], "pagerank_nx": [331, 563], "max_it": [331, 405, 459], "tol": [331, 405, 459], "solver": 331, "voterank": [331, 563], "unsign": [331, 553], "basecontextdagnod": [332, 402], "bound_app": [332, 349], "contextdagnod": 332, "to_vineyard_tensor": [332, 546, 563], "to_vineyard_datafram": [332, 546, 563], "lazi": [332, 402, 547], "sg": 332, "resultdagnod": [332, 367], "r4": [332, 555], "62586": 332, "comparis": 332, "alphabet": [332, 546], "tensorcontextdagnod": 332, "quer": 332, "labeledvertexdatacontextdagnod": 332, "column_nam": [332, 546], "labeld": 332, "context_nod": 332, "result_schema": 332, "dynamicvertexdatacontext": 332, "dag_nod": 332, "get_doubl": 333, "edge_label_id": 333, "edge_label_nam": 333, "incoming_edg": 333, "register_aggreg": 333, "pregelaggregatortyp": 333, "aggr_typ": 333, "get_aggregated_valu": 333, "get_total_vertices_num": 333, "vertex_property_num": 333, "vertex_label_nam": 333, "vertex_label_id": 333, "edge_property_num": 333, "get_vertex_label_by_id": 333, "get_vertex_label_id_by_nam": 333, "get_edge_label_by_id": 333, "get_edge_label_id_by_nam": 333, "edge_properti": 333, "get_vertex_property_id_by_nam": 333, "vertex_property_nam": [333, 552], "get_vertex_property_by_id": 333, "vertex_property_id": 333, "get_edge_property_id_by_nam": 333, "edge_property_nam": 333, "get_edge_property_by_id": 333, "edge_property_id": 333, "kboolandaggreg": 333, "kbooloraggreg": 333, "kbooloverwriteaggreg": 333, "overwritten": 333, "kdoubleminaggreg": 333, "kdoublemaxaggreg": 333, "kdoublesumaggreg": 333, "kdoubleproductaggreg": 333, "kdoubleoverwriteaggreg": 333, "kint64minaggreg": 333, "kint64maxaggreg": 333, "kint64sumaggreg": 333, "kint64productaggreg": 333, "kint64overwriteaggreg": 333, "ktextappendaggreg": 333, "kalongoutgoingedgetooutervertex": 333, "kalongincomingedgetooutervertex": 333, "kalongedgetooutervertex": 333, "get_total_nodes_num": 333, "get_nodes_num": 333, "get_inner_nodes_num": 333, "get_outer_nodes_num": 333, "outer_nod": 333, "get_node_fid": 333, "is_inner_nod": 333, "is_outer_nod": 333, "get_nod": [333, 391], "get_outer_nod": 333, "get_node_id": 333, "get_incoming_edg": 333, "has_child": 333, "child": [333, 442, 534], "has_par": 333, "parent": [333, 335, 375, 380, 534], "get_indegre": 333, "get_outdegre": 333, "kmaxaggreg": 333, "ksumaggreg": 333, "kproductaggreg": 333, "koverwriteaggreg": 333, "subproject": 335, "scratch": 335, "never": [335, 540], "hopefulli": 335, "inspir": [335, 540], "dmaven": 335, "antrun": 335, "jni": 335, "gae_java": 336, "graphscope_typ": 338, "graphscopetyp": 338, "myalgorithm": 338, "filenotfounderror": 339, "permissionerror": 339, "typeerror": [339, 375, 547], "arrowproperti": [340, 402], "subrang": 340, "loader_op": 341, "notimplementederror": 341, "run_app": [346, 347, 362, 370, 371], "copy_typ": 348, "session_id": [350, 354, 375, 402, 403, 540, 544], "graph_typ": [350, 540], "graphtyp": [350, 540, 549, 554], "view_typ": 351, "vertex_or_edge_label_list": 352, "graph_util": 352, "vertexlabel": 352, "op_typ": [354, 375, 544], "uiliti": 354, "interactive_queri": [359, 547], "gremlin_script": [359, 403], "request_opt": [359, 403], "interactivequerydagnod": 359, "modify_typ": [360, 361], "attr": [360, 361, 375, 394, 407, 408, 409, 540, 543], "type_pb2": [360, 361, 365], "nx_add_edg": 360, "nx_del_edg": 360, "nx_update_edg": 360, "nx_add_nod": 361, "nx_del_nod": 361, "nx_update_nod": 361, "fd": [362, 367, 563], "storage_opt": [362, 367], "write_opt": [362, 367], "adaptor": 362, "result_path": [362, 367], "vertex_collect": 363, "edge_collect": 363, "report_typ": 365, "variati": 365, "node_num": [365, 567, 571], "has_nod": [365, 540], "has_edg": [365, 540], "node_data": 365, "neighbors_by_nod": 365, "succs_by_nod": 365, "preds_by_nod": 365, "neighbors_by_loc": 365, "succs_by_loc": 365, "preds_by_loc": 365, "deg_by_nod": 365, "in_deg_by_nod": 365, "out_deg_by_nod": 365, "deg_by_loc": 365, "in_deg_by_loc": 365, "out_deg_by_loc": 365, "nodes_by_loc": 365, "loc": 365, "multigraph": [365, 405, 407, 415, 419, 428, 433, 434, 460, 461, 469, 471, 484, 485, 486, 540, 543], "multidigraph": [365, 407, 419, 428, 433, 434, 471, 479, 480, 538, 540], "large_attr": [375, 544], "types_pb2": [375, 540], "operationtyp": 375, "opdef": [375, 379], "attrvalu": [375, 402, 571], "largeattrvalu": 375, "op_def_pb2": 379, "incoming_data": [381, 402, 547], "as_default": [381, 547], "alia": [386, 388, 394, 540, 547, 572], "k8s_gs_imag": [387, 547, 565], "k8s_etcd_imag": 387, "k8s_image_pull_secret": [387, 547], "k8s_coordinator_cpu": [387, 547], "k8s_coordinator_mem": [387, 547], "k8s_vineyard_cpu": [387, 547], "k8s_mars_worker_cpu": [387, 547], "k8s_mars_worker_mem": [387, 547], "k8s_mars_scheduler_cpu": [387, 547], "k8s_mars_scheduler_mem": [387, 547], "with_mar": [387, 547], "k8s_waiting_for_delet": [387, 547], "dataset_download_retri": 387, "k8s_deploy_mod": [387, 547], "kv": 387, "cooper": [388, 402], "\u02bbegograph": 388, "\u02bbegotensor": 388, "sample_se": [388, 572], "positive_sampl": [388, 572], "receptive_fn": [388, 572], "egotensor": [388, 396, 572], "egoflow": [388, 396, 572], "cora": [388, 400, 572], "convers": [388, 389, 549], "node_t": [388, 389, 400, 572], "edge_table_with_self_loop": [388, 572], "train_tabl": [388, 572], "val_tabl": [388, 572], "test_tabl": [388, 572], "dataset_fold": [388, 572], "attr_typ": [388, 389, 390, 400, 572], "1433": [388, 400, 572], "attr_delimit": [388, 389, 390, 572], "learningbasedmodel": [388, 572], "categorical_attrs_desc": [388, 572], "_sample_se": [388, 572], "_positive_sampl": [388, 572], "_receptive_fn": [388, 572], "ego_flow": [388, 572], "src_ego_spec": [388, 572], "pos_src_ego_tensor": [388, 572], "identityencod": [388, 572], "widendeepencod": [388, 572], "feature_encod": [388, 572], "gcnconv": [388, 572], "sparseegographencod": [388, 572], "_encod": [388, 572], "conv_lay": [388, 572], "_supervised_loss": [388, 572], "full_graph_mod": [388, 572], "localtftrain": [388, 572], "model_fn": [388, 400, 572], "load_graph": [388, 572], "server_id": [388, 572], "server_count": [388, 390, 400, 572], "tracker": [388, 400, 572], "conclud": 388, "bought": 389, "saturdai": 389, "morn": 389, "bigint": 389, "shanghai": 389, "localfilesystem": 389, "pai": [389, 394, 395], "tab": 389, "s2": [389, 505], "215340": 389, "933091": 389, "grei": 389, "362519": 389, "097545": 389, "chapter": [389, 390, 392, 486, 523], "dscript": 389, "dentryfil": 389, "dtabl": 389, "prj": 389, "flag": [389, 390], "define_str": 389, "node_sourc": 389, "edge_sourc": 389, "bucket_s": 389, "greatli": [389, 390, 552], "your_attr_typ": 389, "you_delimit": 389, "scr_id": 389, "feature1": 389, "10002": [389, 390, 391, 393], "feature2": 389, "10003": [389, 390, 391, 393], "feature3": 389, "124": 389, "\u02bbitem_node_decod": 389, "\u02bbuser_node_decod": 389, "\u02bbedge_decod": 389, "item_node_decod": 389, "user_node_decod": 389, "edge_decod": [389, 400], "graph_object": 389, "commod": 390, "swing": [390, 391], "30001": [390, 391, 393], "30002": [390, 391, 393], "30003": [390, 391, 393], "table_1": 390, "table_2": 390, "dest": 390, "10004": [390, 391], "20001": [390, 391, 393], "20003": [390, 391, 393], "20004": [390, 391, 393], "46": [390, 391, 393, 405, 527], "ui_decod": 390, "uv_decod": 390, "table_3": 390, "table_4": 390, "click_v": 390, "task_index": [390, 400], "task_count": 390, "atyp": 390, "job_nam": [390, 400], "worker_host": 390, "respond": 390, "necessarili": [390, 502], "serious": 390, "decreas": [390, 469, 471], "speak": 390, "client_count": [390, 400], "wait_for_clos": [390, 400], "matter": [390, 546], "get_topologi": 391, "dst_type": 391, "figure1": 391, "topo": 391, "print_al": 391, "string_attr": 391, "src_node": 391, "dst_node": 391, "dense_shap": 391, "__next__": 391, "table1": 391, "u_nod": 391, "get_edg": 391, "table2": 391, "table3": 391, "click_edg": 391, "table4": 391, "conduc": 392, "recept": [392, 396], "ai": 392, "meta_path": 392, "layer_id": 392, "famili": [392, 405, 443, 501, 529], "random_without_replac": 392, "ueri": 392, "default_neighbor_id": 392, "set_default_neighbor_id": [392, 401], "xx": 392, "set_padding_mod": 392, "circular": [392, 394, 444], "nodesampl": 393, "node_sampl": 393, "by_ord": 393, "node_from": [393, 404], "edge_src": [393, 404], "edge_dst": [393, 404], "edgesampl": 393, "matur": 394, "dl": 394, "sheer": 394, "sink": 394, "generatortyp": [394, 404], "won": [394, 555], "cursor": 394, "ingo": 394, "query\u5bf9\u8c61": 394, "outneg": [394, 397], "inneg": [394, 397, 400], "candid": [394, 397], "u2i": 394, "ouv": 394, "func": 394, "edeg": 394, "src_1hop": 394, "dst_1hop": 394, "neg_i": 394, "neg_i_1hop": 394, "params_list": 394, "arrang": 394, "anonym": [394, 532], "src_attr": 394, "neg_attr": 394, "encode_fn": [394, 400], "src_atr": 394, "outnegv": 394, "gen1": 394, "gen2": 394, "circumst": 394, "foewa": 394, "from_gener": [394, 400], "make_one_shot_iter": [394, 400], "get_next": [394, 400], "zhangjiak": 395, "cp27": 395, "cp27mu": 395, "linux_x86_64": 395, "autoconf": 395, "automak": 395, "libtool": 395, "your_wheel_nam": [395, 398], "test_cpp_ut": 395, "test_python_ut": 395, "fastgcn": [396, 572], "graphsaint": 396, "amd": 396, "object_typ": 397, "oprequest": 398, "oprespons": 398, "params_": 398, "tensors_": 398, "redirect": [398, 478], "rewrit": 398, "till": [398, 547], "happen": [398, 552, 555], "stitch": 398, "myoper": 398, "register_oper": 398, "opnam": 398, "randomsampl": 398, "xxxsampler": 398, "seek": 399, "litestr": 399, "getfiles": 399, "getrecordcount": 399, "register_file_system": 399, "myfilesystem": 399, "registr": 399, "ppi": 400, "train_supervis": 400, "gen_test_data": 400, "getopt": 400, "argv": 400, "cur_path": 400, "dirnam": 400, "rf": 400, "\u4f60\u9700\u8981\u628agen_test_data": 400, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 400, "fi": 400, "case_bas": 400, "genetic_algorithm": 400, "neural_network": 400, "probabilistic_method": 400, "reinforcement_learn": 400, "rule_learn": 400, "bag": 400, "1033": 400, "103482": 400, "103515": 400, "31336": 400, "1061127": 400, "05882353": 400, "1106406": 400, "n_featur": 400, "node_decod": 400, "n_class": 400, "140": [400, 463], "n_hop": 400, "n_epoch": 400, "tripl": 400, "graph_object_cn": 400, "sample_gen": 400, "input_fn": 400, "sample_input_fn": 400, "float64": 400, "tensorshap": 400, "layer_featur": 400, "aggregate_fn": 400, "self_vec": 400, "neigh_vec": 400, "raw_feat_layer_index": 400, "layer_index": 400, "variable_scop": 400, "_layer": 400, "auto_reus": 400, "neigh_weight": 400, "get_vari": 400, "self_weight": 400, "output_shap": 400, "get_shap": 400, "neigh_mean": 400, "from_neigh": 400, "matmul": 400, "from_self": 400, "add_n": 400, "leaky_relu": 400, "depth_to_encod": 400, "h_self_vec": 400, "h_neighbor_vec": 400, "features_column": 400, "feature_column": 400, "numeric_column": 400, "loss_fn": 400, "train_op": 400, "global_step": 400, "get_global_step": 400, "estimatorspec": 400, "modekei": 400, "set_xxx": 401, "set_yyi": 401, "other_model": 401, "fill": [401, 441, 452, 462, 496], "nbr_id": 401, "set_default_int_attribut": 401, "set_default_float_attribut": 401, "set_default_string_attribut": 401, "set_inter_threadnum": 401, "intra": [401, 459, 462], "set_intra_threadnum": 401, "16mb": 401, "reset": 401, "enlarg": 401, "set_rpc_message_max_s": 401, "objectnam": 402, "degener": 402, "unspecifi": [402, 417], "consolidate_column": 402, "result_column": 402, "consolid": [402, 554, 561], "weight0": 402, "weight1": 402, "graph_nod": 402, "detach": 402, "varaibl": 402, "lexic": 402, "classmethod": 402, "graphar_store_in_loc": [402, 551], "save_to": [402, 551], "graphar_graph_nam": [402, 551], "graphar_file_typ": [402, 551], "parquet": [402, 551], "orc": [402, 551], "graphar_vertex_chunk_s": [402, 551], "graphar_edge_chunk_s": [402, 551], "graphschema": [402, 540], "schema_path": 402, "currrent": 402, "object_id": [402, 403, 404], "filetyp": 402, "ordinari": 402, "f0": 402, "graph_build": 402, "group_id": 402, "member_s": 402, "leader_student_id": 402, "student": 402, "member_student_id": 402, "group_for_teacher_stud": 402, "group_nam": 402, "establish_d": 402, "teacher_in_charge_id": 402, "teacher": 402, "lesson_num": 402, "avg_scor": 402, "student_id": 402, "salari": 402, "teacher_id": 402, "both_in_out": 402, "unambigu": 402, "orign": 402, "interactivequeri": [403, 545, 547, 571], "frontend_gremlin_endpoint": 403, "frontend_cypher_endpoint": 403, "gremlin_url": 403, "lifetim": 403, "traversal_sourc": 403, "graphtraversalsourc": 403, "cypher_driv": 403, "cypher_url": 403, "gremlin_cli": 403, "runtimeerror": [403, 547], "modern_graph_data_dir": 403, "tolist": [403, 553], "dtype": 404, "pywrap": 404, "nodefrom": 404, "get_handl": 404, "worker_count": 404, "base64": 404, "nstart": 405, "poweriterationfailedconverg": 405, "langvil": 405, "meyer": 405, "survei": [405, 493], "cites": 405, "ist": 405, "psu": 405, "edu": 405, "713792": 405, "jon": 405, "kleinberg": 405, "authorit": 405, "journal": [405, 474, 482, 499, 530, 533, 537], "acm": [405, 480, 531, 563], "604": 405, "1999": [405, 460, 461], "doi": [405, 475, 482, 517], "1145": 405, "324133": 405, "324140": 405, "cornel": 405, "kleinber": 405, "pdf": [405, 487, 489, 490], "load_centr": 405, "in_degree_centr": [405, 541], "networkxnotimpl": 405, "out_degree_centr": [405, 541], "equat": 405, "ax": 405, "eigenvalu": [405, 485], "virtu": 405, "perron": 405, "frobeniu": 405, "theorem": [405, 484, 496], "0e": 405, "strength": 405, "2f": 405, "networkxpointlessconcept": [405, 535], "networkxerror": [405, 411, 418, 420, 424, 425, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 481, 484, 485, 486, 497, 500, 532, 540, 543], "eigenvector_centrality_numpi": 405, "discern": 405, "phillip": 405, "bonacich": 405, "american": 405, "sociologi": 405, "1170": 405, "1182": 405, "1986": [405, 529], "leonidzhukov": 405, "hse": 405, "socialnetwork": 405, "oxford": [405, 438, 439, 488, 532], "press": [405, 438, 439, 486, 528, 531, 532], "usa": [405, 492, 493, 539], "pp": [405, 469, 472, 473, 474, 487, 493, 494, 531, 537], "169": 405, "x_i": 405, "a_": 405, "x_j": 405, "lambda_": 405, "distant": 405, "penal": 405, "strictli": [405, 459], "invers": [405, 484], "phi": 405, "sqrt": [405, 485], "adjacency_spectrum": 405, "720": 405, "leo": 405, "sociometr": 405, "psychometrika": 405, "1953": 405, "springer": [405, 494], "1007": [405, 439, 475], "bf02289026": 405, "has_path": [405, 541], "djikstra": 405, "floyd": 405, "warshal": 405, "bfs_edg": [405, 541], "depth_limit": 405, "core_numb": 405, "vladimir": 405, "batagelj": 405, "matjaz": 405, "zaversnik": 405, "ab": [405, 463, 464, 465, 479, 487, 491, 532, 534], "0310049": 405, "c_u": 405, "deg": [405, 459, 473, 540], "geometr": [405, 527, 541], "vw": 405, "hat": 405, "uv": [405, 473], "uw": 405, "tot": 405, "2deg": 405, "leftrightarrow": 405, "complete_graph": [405, 411, 540], "saram\u00e4ki": 405, "kivel\u00e4": 405, "onnela": 405, "kaski": 405, "kert\u00e9sz": 405, "027105": 405, "2007": [405, 487, 533], "jponnela": 405, "web_docu": 405, "a9": 405, "intens": 405, "coher": 405, "motif": 405, "065103": 405, "2005": [405, 481, 487], "sign": 405, "costantini": 405, "perugini": 405, "plo": 405, "e88669": 405, "fagiolo": 405, "76": 405, "026107": 405, "average_clust": [405, 541], "count_zero": 405, "c_v": 405, "nonzero": [405, 469, 486], "marcu": 405, "kaiser": 405, "0802": 405, "2512": 405, "g_to_add_to": [407, 408, 409], "nodes_for_cycl": 407, "add_path": [407, 409, 540], "add_star": [407, 408], "nodes_for_path": 408, "add_cycl": [408, 409], "nodes_for_star": 409, "star": [409, 446, 455], "cnbor": 411, "with_data": 412, "empty_graph": [412, 453], "width": 414, "2m": [415, 493], "prevent": 418, "err": 418, "frozen": [418, 423], "unfreez": 418, "frozen_graph": 418, "unfrozen_graph": 418, "is_frozen": 418, "neighbour": 420, "freez": [423, 541], "nodelist": [428, 467], "selfloop_edg": [428, 433, 469, 471], "number_of_selfloop": [428, 434], "selfloop": [433, 434, 467, 473], "nloop": 433, "nodes_with_selfloop": [433, 434], "datadict": [434, 540], "datavalu": 434, "attrnam": [434, 571], "edgeit": 434, "ekei": 434, "graph_atlas_g": 438, "linearli": [438, 454], "ronald": [438, 439, 529], "robin": [438, 439], "wilson": [438, 439], "1998": [438, 439], "111223": 439, "112222": 439, "automorph": [439, 512], "graph_atla": 439, "expens": 439, "popul": [439, 440, 442, 443, 445, 447, 450, 452, 454, 455, 458, 469, 471, 472, 474, 476, 477, 478, 484, 485, 486, 492, 493, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 535, 542], "book": 439, "violat": 439, "lexicograph": 439, "nondecreas": 439, "001111": 439, "000112": 439, "1008": 439, "3333444": 439, "3333336": 439, "1012": 439, "1213": 439, "1244555": 439, "1244456": 439, "perfectli": 440, "ari": [440, 450], "height": 440, "children": [440, 450, 534], "barbel": [441, 452], "bell": 441, "p_": [441, 473, 487], "mere": [441, 452], "aldou": [441, 452], "jim": [441, 452], "binomi": 442, "leftmost": 442, "ci_n": 443, "x_1": 443, "x_2": 443, "x_m": 443, "mod": [443, 457, 486, 505], "subfamili": 443, "ladder": [444, 451], "cl_n": 444, "k_n": 445, "is_direct": [445, 540], "subset_s": 446, "multipartit": [446, 457], "tripartit": 446, "bc": 446, "complete_bipartite_graph": 446, "c_n": 447, "hierarch": 448, "dorogovtsev": 448, "goltsev": 448, "mend": 448, "mat": 448, "0112143": 448, "kw": [449, 547], "unknown": [449, 552], "abc": 449, "rightmost": 450, "jame": 450, "andrew": 450, "storer": 450, "birkhaus": 450, "boston": 450, "2001": [450, 463, 471, 476, 478, 486, 495, 553], "225": [450, 540], "lollipop": 452, "k_m": 452, "p_n": [452, 454], "etext": 452, "turan": 457, "disjoint": [457, 468, 506], "2r": 457, "tau1": 459, "tau2": 459, "mu": 459, "average_degre": 459, "min_degre": 459, "max_degre": 459, "min_commun": 459, "max_commun": 459, "lfr": 459, "mathrm": 459, "expon": 459, "reassign": [459, 497], "affili": [459, 567], "random_st": [459, 462, 463, 464, 465, 467, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 490, 491, 494, 495, 496, 500, 532, 535, 537], "exceededmaxiter": 459, "250": 459, "frozenset": [459, 542], "rewir": [459, 461, 465, 497, 500], "wire": 459, "robust": 459, "somewhat": 459, "andrea": 459, "lancichinetti": 459, "santo": [459, 463, 464, 465], "fortunato": [459, 463, 464, 465], "filippo": 459, "radicchi": 459, "phy": [459, 471, 476, 477, 478, 481], "rev": [459, 471, 476, 477, 478, 481], "046110": 459, "santofortunato": 459, "caveman": [460, 461, 465], "unclear": [460, 461], "connected_caveman_graph": [460, 466], "watt": [460, 461, 471], "phenomenon": [460, 461], "amer": [460, 461], "493": [460, 461], "527": [460, 461], "caveman_graph": 461, "p_in": [462, 463, 464], "p_out": [462, 463, 464], "gaussian": [462, 488, 489, 490], "drawn": [462, 490], "varianc": 462, "probabilti": [462, 465], "random_partition_graph": [462, 467], "ulrik": 462, "brand": 462, "marco": 462, "gaertler": 462, "dorothea": 462, "wagner": 462, "11th": 462, "europ": 462, "symp": 462, "plant": [463, 464], "random_partition_model": 463, "condon": 463, "karp": 463, "algor": 463, "116": 463, "486": [463, 464, 465], "174": [463, 464, 465], "0906": [463, 464, 465], "0612": [463, 464, 465], "relax": 465, "februari": 465, "num_cliqu": 466, "clique_s": 466, "ring": 466, "stochast": [467, 541], "densiti": [467, 469, 487, 489], "symmetr": [467, 486, 509, 513, 519, 521, 532], "300": [467, 536], "prob": 467, "450": 467, "quotient_graph": 467, "relabel": 467, "245": 467, "348": 467, "405": 467, "051": 467, "022": 467, "planted_partition_graph": 467, "gaussian_random_partition_graph": 467, "gnp_random_graph": [467, 494, 495, 496], "holland": 467, "laskei": 467, "leinhardt": 467, "blockmodel": 467, "109": 467, "1983": 467, "windmil": 468, "contract": 468, "wd": 468, "deg_sequ": [469, 470, 471, 472, 474], "pseudograph": [469, 471], "nonneg": [469, 471], "is_graph": [469, 475], "graphic": [469, 471, 474, 475], "realiz": [469, 471, 474, 497, 498, 499, 500, 527, 552], "poisson": 469, "constant": [469, 571], "siam": [469, 474, 480], "167": 469, "random_sequ": 469, "random_powerlaw_tree_sequ": 469, "5000": [469, 553], "actual_degre": 469, "in_degree_sequ": 471, "out_degree_sequ": 471, "directed_random": 471, "configuration_model": [471, 472, 475], "finit": [471, 473, 486], "strogatz": 471, "026118": 471, "din": 471, "dout": 471, "in_deg_sequ": 472, "out_deg_sequ": 472, "kleitman": [472, 474], "valenc": [472, 474], "1973": [472, 474], "w_0": 473, "w_1": 473, "ldot": 473, "w_u": [473, 487, 490], "w_v": [473, 487, 490], "sum_k": 473, "w_k": 473, "z": [473, 486, 487, 491], "mathcal": 473, "ne": 473, "uu": 473, "fan": [473, 487, 563], "chung": [473, 487], "lu": [473, 563], "ann": 473, "combinator": [473, 533], "145": 473, "2002": 473, "joel": 473, "miller": 473, "aric": [473, 487], "hagberg": [473, 487], "waw": [473, 487], "alan": 473, "friez": 473, "paul": 473, "horn": 473, "pawe\u0142": 473, "pra\u0142at": 473, "lnc": 473, "6732": 473, "115": 473, "havel": 474, "hakimi": 474, "networkxexcept": 474, "resort": 474, "496": 474, "506": 474, "1962": [474, 492, 493, 539], "d_m": 475, "uniform": [475, 487, 496], "networkxunfeas": 475, "moshen": 475, "bayati": 475, "jeong": 475, "han": 475, "kim": 475, "amin": 475, "saberi": 475, "algorithmica": 475, "58": 475, "860": 475, "910": 475, "s00453": 475, "009": 475, "9340": 475, "gn": [476, 539], "a_k": 476, "krapivski": [476, 477, 478, 481], "redner": [476, 477, 478], "066123": [476, 478], "gnc": 477, "growth": [477, 537], "036118": 477, "2005k": 477, "gnr": 478, "probabilii": 478, "self_loop": 479, "preferenti": 479, "proport": 479, "peterson": [479, 522], "nichola": 479, "bori": 479, "pittel": 479, "preprint": 479, "1311": 479, "5961": 479, "2013": [479, 499], "gamma": 480, "delta_in": 480, "delta_out": 480, "bia": 480, "bollob\u00e1": 480, "borg": 480, "chay": 480, "riordan": 480, "fourteenth": 480, "annual": 480, "symposium": 480, "132": [480, 495], "139": 480, "diverg": [481, 541], "retent": 481, "disallow": 481, "ispolatov": 481, "yuryev": 481, "061911": 481, "inclus": 482, "knudsen": 482, "michael": 482, "carsten": 482, "wiuf": 482, "markov": 482, "chain": 482, "1155": 482, "190836": 482, "radiu": [483, 488, 489, 490], "chordal": 484, "chord": [484, 498], "mildli": 484, "lubotzki": 484, "invari": 484, "birkh\u00e4us": 484, "verlag": 484, "basel": 484, "1994": 484, "marguli": 485, "gabber": 485, "galil": 485, "palei": 486, "pz": 486, "f_q": 486, "odd": 486, "bolloba": 486, "cambridg": 486, "theta": [487, 490], "po": [487, 488, 489, 490, 491], "p_dist": [487, 489], "geograph": [487, 490], "rectangular": [487, 491], "ge": [487, 491], "prone": 487, "le": [487, 491, 531], "euclidean": [487, 488, 489, 490, 491], "taxicab": [487, 491], "expovari": [487, 490], "masuda": 487, "miwa": 487, "konno": 487, "036108": 487, "milan": 487, "bradonji\u0107": 487, "allon": 487, "percu": 487, "giant": 487, "antoni": 487, "bonato": 487, "209": 487, "216": 487, "cube": [488, 489, 490, 508, 525], "kdtree": [488, 489, 490], "minkowski": [488, 489, 490], "infin": [488, 489, 490], "erd\u0151": [488, 489, 490], "r\u00e9nyi": [488, 489, 490], "twenti": 488, "2d": [488, 489, 490, 540, 543], "deviat": [488, 489, 490], "gauss": [488, 489, 490], "penros": [488, 489], "mathew": [488, 489], "soft": 489, "exp": [489, 491], "annal": 489, "2016": 489, "986": 489, "1028": 489, "summat": 490, "nodethr": 490, "cole": 490, "maclean": 490, "blog": 490, "thesi": [490, 496], "waxman": 491, "x_min": 491, "y_min": 491, "x_max": 491, "y_max": 491, "Their": 491, "rout": 491, "multipoint": 491, "ieee": [491, 499, 500, 532, 537], "1988": 491, "1617": 491, "1622": 491, "harari": [492, 493, 541], "h_": [492, 493], "ceil": 492, "kn": 492, "hnm_harary_graph": 492, "weisstein": 492, "eric": 492, "mathworld": [492, 501, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 520], "wolfram": [492, 501, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 520], "hararygraph": 492, "nat": [492, 493, 539], "acad": [492, 493, 539], "sci": [492, 493, 539], "1142": [492, 493, 539], "1146": [492, 493, 539], "floor": 493, "hkn_harary_graph": 493, "boesch": 493, "satyanarayana": 493, "suffel": 493, "reliabl": 493, "synthesi": 493, "99": [493, 571], "2009": [493, 533], "uniform_random_intersection_graph": [494, 495], "nikoletsea": 494, "raptopoulo": 494, "spiraki": 494, "icalp": 494, "\u0131az": 494, "karhum": 494, "aki": 494, "lepist": 494, "sannella": 494, "vol": [494, 537], "3142": 494, "lectur": 494, "1029": 494, "1040": 494, "godehardt": 495, "jaworski": 495, "electron": [495, 533], "singer": 496, "cohen": 496, "1995": 496, "phd": 496, "john": [496, 513], "hopkin": 496, "scheinerman": 496, "evolut": 496, "2000": 496, "156": 496, "nkk": [497, 498], "degree_seq": 497, "n_edges_add": 497, "li": [497, 500], "unsatur": 497, "proof": 497, "tillman": [497, 498, 500], "markopoul": [497, 498, 499, 500, 532], "butt": [497, 498, 532], "gjoka": [497, 498, 499, 500], "2k": [497, 498], "kdd": [497, 498], "seconnd": 498, "joint_degre": [499, 500], "diagon": [499, 515], "joint_degree_graph": 499, "kurant": 499, "5k": 499, "infocom": [499, 500, 532], "stanton": 499, "pinar": 499, "prescrib": 499, "experiment": [499, 547], "n_th": 501, "m_1": 501, "singleton": [501, 540], "m_2": 501, "m_i": 501, "mycielskian": 501, "m_": 501, "mycielskigraph": 501, "p_2": 501, "chromat": [502, 533], "2n": 502, "bigcup": 502, "nonisomporph": 503, "adjanc": 503, "matric": [503, 532], "nonisomorph": 504, "shift_list": 505, "cubic": [505, 508, 509, 512, 513, 519, 521, 522, 527], "lcf": [505, 507, 509, 511, 513, 519, 521], "lederberg": 505, "coxet": 505, "frucht": [505, 512], "hamiltonian": [505, 507, 512, 513, 516, 521, 527], "symmetri": [505, 512], "dodecahedral_graph": 505, "desargues_graph": 505, "heawood_graph": 505, "pappus_graph": 505, "s1": 505, "sk": 505, "v_current": 505, "shiftlist": 505, "heawood": [505, 513], "lcfnotat": 505, "bull": 506, "planar": [506, 509, 510, 512], "pendant": 506, "leg": 506, "chv\u00e1tal": 507, "370": 507, "chv": 507, "c3": [507, 519, 520], "a1tal_graph": 507, "chvatalgraph": 507, "platon": [508, 511, 516, 520, 524, 526], "skeleton": [508, 511, 525, 526], "hypercub": 508, "aris": 508, "desargu": 509, "desarguesgraph": 509, "kite": [510, 517], "diamondgraph": 510, "dodecahedr": 511, "dodecahedron": 511, "regular_dodecahedron": 511, "dodecahedralgraph": 511, "fruchtgraph": 512, "cage": 513, "perci": 513, "nonplanar": 513, "girth": 513, "heawoodgraph": 513, "win": [513, 522], "tue": [513, 522], "nl": [513, 522], "aeb": [513, 522], "housegraph": [514, 515], "pentatop": 515, "icosahedr": 516, "icosahedron": 516, "icosahedralgraph": 516, "krackhardt": 517, "andr": 517, "beverlei": 517, "carol": 517, "dian": 517, "fernando": 517, "garth": 517, "heather": 517, "ik": 517, "jane": 517, "polit": 517, "landscap": 517, "cognit": 517, "quarterli": 517, "342": [517, 540], "369": 517, "2307": 517, "2393394": 517, "jstor": 517, "june": 517, "1990": 517, "graph_descript": 518, "ltype": 518, "adjacencylist": 518, "from_dict_of_list": 518, "from_edgelist": 518, "xlist": 518, "c_4": 518, "w2": 518, "vk": 518, "wk": 518, "vj": 518, "wj": 518, "moebiu": 519, "kantor": 519, "m\u00f6biu": 519, "petersen": [519, 522], "b6biu": 519, "93kantor_graph": 519, "octahedr": 520, "octahedron": 520, "shake": 520, "hi": [520, 530, 539], "her": 520, "partner": 520, "handshak": 520, "cocktail": 520, "octahedralgraph": 520, "tur": 520, "a1n_graph": 520, "special_cas": 520, "pappu": 521, "juliu": 522, "counterexampl": [522, 527], "bridgeless": 522, "colour": 522, "drg": 522, "maze": 523, "sedgewick": 523, "3rd": 523, "tetrahedr": 524, "k4": 524, "w4": 524, "grpah": 524, "tetrahedron": [524, 526, 527], "archimedean": [525, 526], "octagon": 525, "triangular": 525, "truncated_cub": 525, "coolmath": 525, "polyhedra": 525, "hexagon": 526, "equilater": 526, "truncated_tetrahedron": 526, "tutt": 527, "polyhedr": 527, "tait": 527, "conjectur": 527, "polyhedron": 527, "davi": 528, "southern": 528, "women": 528, "gardner": 528, "1941": 528, "south": 528, "chicago": 528, "il": 528, "florentin": 529, "breiger": 529, "philippa": 529, "pattison": 529, "cumul": 529, "dualiti": 529, "septemb": 529, "zachari": 530, "karat": 530, "club": 530, "mr": [530, 533], "offic": 530, "wayn": 530, "fission": 530, "anthropolog": 530, "452": 530, "473": 530, "1977": 530, "coappear": 531, "miser": 531, "knuth": 531, "1993": 531, "graphbas": 531, "combinatori": 531, "york": 531, "spectral": [532, 541], "forg": 532, "sgf": 532, "eigenstructur": 532, "synthes": 532, "percentag": 532, "telecommun": 532, "bernoulli": 532, "baldesi": 532, "1801": 532, "01715": 532, "karate_club_graph": 532, "sud": 533, "81": 533, "810": 533, "herzberg": 533, "murti": 533, "polynomi": 533, "am": 533, "708": 533, "717": 533, "sander": 533, "torsten": 533, "7pp": 533, "2529816": 533, "encyclopedia": 533, "dec": 533, "nil": 534, "arboresc": 534, "downward": 534, "synthet": 534, "trie": 534, "recov": [534, 547], "pr\u00fcfer": 535, "from_prufer_sequ": 535, "forest_str": 535, "triad_nam": 536, "003": 536, "012": 536, "021d": 536, "021u": 536, "021c": 536, "111d": 536, "111u": 536, "030t": 536, "030c": 536, "120d": 536, "120u": 536, "120c": 536, "triadic_censu": 536, "autonom": [537, 539], "elmokashfi": 537, "tier": 537, "mid": 537, "adv": 537, "bidirect": 537, "peer": 537, "commerci": 537, "agreement": 537, "kvalbein": 537, "dovroli": 537, "bgp": 537, "1250": 537, "1261": 537, "octob": 537, "reweight": 538, "mathematician": 539, "frank": 539, "incoming_graph_data": [540, 543], "default_label": [540, 543], "to_networkx_graph": 540, "110": 540, "protect": 540, "bracket": 540, "shortcut": 540, "nbrsdict": 540, "miscellan": 540, "__contains__": 540, "__getitem__": 540, "adj_dict": 540, "atlasview": 540, "__iter__": 540, "niter": 540, "__len__": 540, "nnode": 540, "u_of_edg": 540, "v_of_edg": 540, "ebunch_to_add": 540, "wn2898": 540, "node_for_ad": 540, "nodes_for_ad": 540, "hello": 540, "k3": 540, "attrdict": 540, "behav": 540, "idiom": 540, "foovalu": 540, "adj_it": 540, "nbrdict": 540, "adjlist_inner_dict_factori": 540, "neighbordict": 540, "adjlist_outer_dict_factori": 540, "adjlistdict": 540, "clear_edg": 540, "deepcopi": 540, "fresh": [540, 549], "__class__": 540, "degreeview": 540, "nd_view": 540, "edge_attr_dict_factori": 540, "neighborattrdict": 540, "edge_subgraph": 540, "edgeview": 540, "edgedataview": 540, "ddict": 540, "get_edge_data": 540, "edge_dict": 540, "safe": 540, "graph_attr_dict_factori": 540, "graph_cache_factori": 540, "keyerror": 540, "edge_ind": 540, "data_dictionari": 540, "is_multigraph": 540, "corespond": 540, "nbunch_it": 540, "exhaust": 540, "possibli": 540, "node_attr_dict_factori": 540, "nodeattrdict": 540, "node_dict_factori": 540, "nodedict": 540, "nodeview": 540, "nodedataview": 540, "nodedata": 540, "bar": 540, "nedg": 540, "Will": 540, "nodes_for_remov": 540, "set_edge_data": 540, "set_node_data": 540, "set_item": 540, "adjedgeattr": 540, "dd": 540, "nodeattr": 540, "netowrkx": 540, "to_undirected_class": 540, "taken": 540, "itertool": 540, "mg": 540, "nd_iter": 540, "outedgeview": 540, "in_edg": 540, "outedgedataview": 540, "has_predecessor": 540, "has_successor": 540, "indegreeview": 540, "inedgeview": 540, "outdegreeview": 540, "pred": 540, "succ": 540, "_convert_arrow_to_dynam": [541, 543], "atla": 541, "triad": 541, "mycielski": 541, "sudoku": 541, "utf": [542, 553], "filenam": [542, 553], "rb": 542, "bz2": 542, "uncompress": 542, "whitespac": 542, "obsolet": 542, "write_edgelist": 542, "fh": 542, "textlin": 542, "parse_edgelist": 542, "read_adjlist": 542, "marker": 542, "v_0": 543, "v_1": 543, "add_label": 544, "talk": 546, "output_to_cli": [546, 563], "person_id": [546, 553], "deregist": 547, "256mi": 547, "4gi": 547, "5gi": 547, "__enter__": 547, "__exit__": 547, "exc_typ": 547, "exc_valu": 547, "exc_tb": 547, "unregist": 547, "preemptiv": 547, "burstabl": 547, "qo": 547, "preempt": 547, "k8s_vineyard_imag": 547, "fallback": 547, "512mi": 547, "etcd_addr": 547, "etcd01": 547, "etcd02": 547, "etcd03": 547, "4mi": 547, "k8s_coordinator_pod_node_selector": 547, "tinyurl": 547, "3nx6k7ph": 547, "k8s_engine_pod_node_selector": 547, "path1": 547, "path2": 547, "claimnam": 547, "dangling_timeout_second": 547, "heartbeat": 547, "dangl": 547, "config_fil": 547, "reject": 547, "resource_nam": 547, "sigint": 547, "sigterm": 547, "signal": 547, "get_vineyard_object_mapping_t": 547, "with_cyph": 547, "recreat": 547, "restore_from_pvc": 547, "kubeconfig": 547, "run_fetch": 547, "lock": 547, "store_to_pvc": 547, "backup": [547, 553], "maxwel": 549, "binlog": 549, "buildgartfrag": 549, "etcd_endpoint": 549, "gartfrag": 549, "etcd_client": 549, "make_shar": 549, "mpi_comm_world": 549, "schema_kei": 549, "gart_schema_p": 549, "to_str": 549, "edge_config_str": 549, "as_str": 549, "gart_blob_m": 549, "_p": 549, "config_str": 549, "edge_config": 549, "inner_vertices_it": 549, "elabel": [549, 554], "edge_it": 549, "hive": 551, "ordered_by_sourc": 551, "ordered_by_dest": 551, "textual": 551, "unix": [551, 566], "ldbc_graphar": 551, "4096": 551, "ldbc_subgraph_graphar": 551, "ldbc_subgraph": 551, "ldbc__graphar": 551, "test_graphar": 551, "broader": 552, "ffi": 552, "agnost": 552, "grin_": 552, "partitioned_graph": 552, "edge_type_nam": 552, "boundari": 552, "sync_properti": 552, "grin_partitioned_graph": 552, "grin_partit": 552, "grin_graph": 552, "grin_get_local_graph_from_partit": 552, "grin_edge_typ": 552, "etyp": 552, "grin_get_edge_type_by_nam": 552, "grin_vertex_type_list": 552, "src_vtype": 552, "grin_get_src_types_from_edge_typ": 552, "dst_vtype": 552, "grin_get_dst_types_from_edge_typ": 552, "src_vtypes_num": 552, "grin_get_vertex_type_list_s": 552, "dst_vtypes_num": 552, "grin_vertex_typ": 552, "grin_get_vertex_type_from_list": 552, "grin_vertex_properti": 552, "dst_vp": 552, "grin_get_vertex_property_by_nam": 552, "grin_null_vertex_properti": 552, "grin_vertex_property_t": 552, "dst_vpt": 552, "grin_get_vertex_property_table_by_typ": 552, "grin_datatyp": 552, "dst_vp_dt": 552, "grin_get_vertex_property_data_typ": 552, "grin_vertex_list": 552, "__src_vl": 552, "grin_get_vertex_list": 552, "_src_vl": 552, "grin_select_type_for_vertex_list": 552, "src_vl": 552, "grin_select_master_for_vertex_list": 552, "src_vl_num": 552, "grin_get_vertex_list_s": 552, "grin_vertex": 552, "grin_get_vertex_from_list": 552, "ifdef": 552, "grin_trait_select_edge_type_for_adjacent_list": 552, "grin_adjacent_list": 552, "_adj_list": 552, "grin_get_adjacent_list": 552, "grin_direct": 552, "adj_list": 552, "grin_select_edge_type_for_adjacent_list": 552, "adj_lsit": 552, "endif": 552, "al_sz": 552, "grin_get_adjacent_list_s": 552, "ifndef": 552, "grin_edg": 552, "grin_get_edge_from_adjacent_list": 552, "grin_get_edge_typ": 552, "grin_equal_edge_typ": 552, "grin_get_neighbor_from_adjacent_list": 552, "grin_get_value_from_vertex_property_t": 552, "grin_vertex_ref": 552, "uref": 552, "grin_get_vertex_ref_for_vertex": 552, "u_master_partit": 552, "grin_get_master_partition_from_vertex_ref": 552, "send_valu": 552, "fragment_group_id": [552, 554], "get_partitioned_graph_by_object_id": 552, "local_partit": 552, "grin_get_local_partition_list": 552, "pnum": 552, "grin_get_partition_list_s": 552, "grin_get_partition_from_list": 552, "disclaim": 552, "sacrif": 552, "boilerpl": 552, "ineffici": 552, "enorm": 552, "grin_assume_all_vertex_property_local_complet": 552, "grin_assume_master_vertex_property_local_complet": 552, "grin_assume_by_type_all_vertex_property_local_complet": 552, "grin_assume_by_type_master_vertex_property_local_complet": 552, "assumpt": 552, "wider": 552, "undefin": 552, "tell": 552, "granular": 552, "grin_frag": 552, "storagespecif": 552, "vertexhandl": 552, "goe": 552, "grin_edge_list": 552, "grin_partition_list": 552, "grin_enable_": 552, "_list_arrai": 552, "vertexlist": 552, "grin_enable_vertex_list_arrai": 552, "vl": 552, "idx": 552, "sz": 552, "caller": 552, "_list_iter": 552, "grin_enable_vertex_list_iter": 552, "grin_vertex_list_iter": 552, "grin_get_vertex_list_begin": 552, "grin_get_next_vertex_list_it": 552, "vli": 552, "grin_is_vertex_list_end": 552, "grin_get_vertex_from_it": 552, "grin_get_vertex_type_by_nam": 552, "vtype": 552, "grin_vertex_property_list": 552, "grin_get_vertex_properties_by_nam": 552, "vprop": 552, "vpl": 552, "separatedli": 552, "with_vertex_label": 552, "with_edge_label": 552, "grin_serialize_vertex_ref": 552, "grin_deserialize_to_vertex_ref": 552, "grin_get_vertex_from_vertex_ref": 552, "vref": 552, "borrow": 552, "vertexcut": 552, "edgecut": 552, "judgement": 552, "columnar": 553, "gear": 553, "compromis": 553, "strict": 553, "multitud": 553, "exemplifi": 553, "said": 553, "grpc_port": 553, "grpc_endpoint": 553, "conn": 553, "add_vertex_label": 553, "v_label_nam": 553, "add_primary_kei": 553, "pk_name": 553, "prop_name_1": 553, "prop_name_2": 553, "add_edge_label": 553, "e_label_nam": 553, "prop_name_3": 553, "add_properti": 553, "xmln": 553, "xsi": 553, "w3": 553, "xmlschema": 553, "schemaloc": 553, "xsd": 553, "modelvers": 553, "gremlinexampl": 553, "codehau": 553, "mojo": 553, "classpath": 553, "mainclass": 553, "compliancelevel": 553, "killaft": 553, "credenti": 553, "valuemap": [553, 571], "javascript": 553, "data_load": 553, "load_tool": 553, "xzvf": 553, "alic": 553, "bob": 553, "person_id_1": 553, "20210611151923": 553, "data_output": 553, "55555": 553, "propertiescolmap": 553, "srcpkcolmap": 553, "dstpkcolmap": 553, "columnidx": 553, "_success": 553, "xxxxx": 553, "sst": 553, "00000": 553, "00001": 553, "00002": 553, "load_data": 553, "test_store_servic": 553, "insert_vertex": 553, "vertexrecordkei": 553, "insert_vertic": 553, "update_vertex_properti": 553, "delete_vertex": 553, "vertex_pk": 553, "delete_vertic": 553, "insert_edg": 553, "edgerecordkei": 553, "update_edge_properti": 553, "delete_edg": 553, "edge_pk": 553, "remote_flush": 553, "snapshot_id": 553, "src_vertex_kei": 553, "dst_vertex_kei": 553, "realtimewrit": 553, "unus": 553, "current_timestamp": 553, "replay_record": 553, "grootclient": 553, "grootclientbuild": 553, "replayrecord": 553, "provis": 553, "lapp": 553, "reinstal": [553, 560], "pv_name": 553, "logback": 553, "zk": 553, "storegcintervalm": 553, "try_catch_up_with_primari": 553, "otel": 553, "arrowfragmentgroup": 554, "spread": 554, "ipc": 554, "docket": 554, "string_oid": 554, "ipcclient": 554, "writeout": 554, "nb": 554, "fragmentloc": 554, "gettotalnodesnum": 554, "labeltyp": 554, "vlabel": 554, "vertex_data_t": 554, "edge_data_t": 554, "willing": 555, "implic": 555, "polymorph": 555, "instant": 555, "aka": 555, "pygrap": [555, 556], "frist": 555, "from_numpi": 555, "bind_sssp1": 555, "delai": 555, "bind_sssp2": 555, "vertex_bal": 556, "vcut": 556, "ecut": 556, "repo_hom": 560, "graph_identifi": 560, "syoov": 561, "79b44f7b58": 561, "ctmqb": 561, "10m": 561, "9m53": 561, "9m46": 561, "6dd67c65fc": 561, "gn4mb": 561, "15334625083466732": 561, "33d": 561, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 563, "\u8be5\u7cfb\u7edf\u4e8e": 563, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 563, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 563, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 563, "\u5728": [563, 564, 565, 566, 567, 570, 571, 572, 573], "\u4e2d": [563, 565, 566, 567, 573], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 563, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 563, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 563, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 563, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 563, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 563, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 563, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 563, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 563, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 563, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 563, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 563, "\u521b\u5efa\u9ed8\u8ba4": 563, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 563, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 563, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 563, "result_lpa": 563, "result_sssp": 563, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 563, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 563, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 563, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 563, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 563, "\u7c7b": [563, 573], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 563, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 563, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 563, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 563, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 563, "\u6216\u5199\u5165": 563, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 563, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 563, "\u6216\u5199\u5165\u672c\u5730\u7684": 563, "lpa_result": 563, "\u6570\u636e\u7ed3\u6784": 563, "\u6b64\u5916": [563, 567], "\u5982": [563, 566, 569, 571], "\u5feb\u901f\u4e0a\u624b": [563, 569], "\u4e2d\u6240\u793a": 563, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 563, "\u7684\u65b0\u5c5e\u6027": 563, "\u5217": 563, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 563, "\u5217\u540d\u4e3a": 563, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 563, "new_graph": [563, 568], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 563, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 563, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 563, "\u7c7b\u4f3c\u7684": 563, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 563, "\u4f8b\u5982\u9876\u70b9id": 563, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 563, "\u4ee3\u8868\u7ed3\u679c": 563, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 563, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 563, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 563, "\u8f6c\u6362\u4e3a": [563, 572], "\u4f7f\u7528\u9876\u70b9\u7684": 563, "\u4f5c\u4e3a\u540d\u4e3a": 563, "\u7684\u5217": 563, "df_vd": 563, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 563, "df_result": 563, "property0": 563, "label0": 563, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 563, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 563, "\u5c06": [563, 572], "\u9876\u70b9\u7684": 563, "\u4f5c\u4e3a": [563, 564, 573], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 563, "gs_data": 563, "\u53ef\u4ee5\u67e5\u770b": 563, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 563, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 563, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 563, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 563, "\u5728\u7eaf": 563, "\u6a21\u5f0f": [563, 571], "\u4e0b\u4f7f\u7528": 563, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 563, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 563, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 563, "\u5982\u4ee3\u7801\u6240\u793a": 563, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 563, "\u88c5\u9970\u7684\u7c7b": 563, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 563, "\u56fe\u7b97\u6cd5\u51fd\u6570": 563, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 563, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 563, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 563, "\u4e0e": 563, "\u76f8\u5173\u7684\u5b8c\u6574": 563, "\u53ef\u4ee5\u53c2\u8003": 563, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 563, "\u4e3a\u4f8b": [563, 567], "\u7528\u6237\u5728": 563, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 563, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 563, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 563, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 563, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 563, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 563, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 563, "\u589e\u91cf\u8ba1\u7b97": 563, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 563, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 563, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 563, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [563, 573], "\u7ecf\u5178\u7684": 563, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 563, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 563, "\u6a21\u578b\u4e4b\u5916": 563, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 563, "\u7f16\u7a0b\u6a21\u578b": 563, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 563, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 563, "\u6a21\u578b\u4e0d\u540c": 563, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 563, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 563, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 563, "\u800c\u4e0d\u540c\u4e8e": 563, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 563, "\u8fd8\u662f\u4ee5": 563, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 563, "\u88c5\u9970\u5668": 563, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 563, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 563, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 563, "\u4e2d\u7684": [563, 564, 566], "\u51fd\u6570": [563, 571], "\u4e0b\u5217\u4ee3\u7801": 563, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 563, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 563, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 563, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 563, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 563, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 563, "\u8fd9\u91cc": [563, 564, 573], "\u662f\u4e0e": 563, "\u76f8\u5bf9\u5e94\u7684": 563, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 563, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 563, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 563, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 563, "\u5728\u6b64\u4e4b\u540e": 563, "\u60a8\u53ef\u4ee5\u4ece": 563, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 563, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 563, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 563, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 563, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 563, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 563, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 563, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 563, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 563, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 563, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 563, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 563, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 563, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 563, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 563, "dist_0": 563, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 563, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 563, "\u8bf7\u53c2\u8003": [563, 571], "\u6765\u5c06": 563, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 563, "\u5b89\u88c5\u5b8c\u6210\u540e": 563, "\u4f60\u9700\u8981\u5c06": 563, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 563, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 563, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 563, "\u6765\u786e\u4fdd": 563, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 563, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 563, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 563, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 563, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 563, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 563, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 563, "\u7528\u6237\u9700\u8981\u6309\u7167": 563, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 563, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 563, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 563, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 563, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 563, "defaultpropertyappbas": 563, "\u6216": [563, 564, 565, 566, 569, 571], "parallelpropertyappbas": 563, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 563, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 563, "defaultappbas": 563, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 563, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 563, "\u5176\u5e94\u8be5\u662f": 563, "defaultpropertycontextbas": 563, "parallelpropertycontextbas": 563, "defaultcontextbas": 563, "\u6216\u8005": [563, 565, 572, 573], "\u7684\u7684\u5b50\u7c7b": 563, "\u901a\u8fc7\u7ee7\u627f": 563, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 563, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 563, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 563, "client\u4e2dquery\u8fd4\u56de\u7684context": 563, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 563, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 563, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 563, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 563, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 563, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 563, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 563, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 563, "\u8fd9\u4e2a\u9700\u6c42": 563, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 563, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 563, "graphscope_repo": 563, "app_class_nam": 563, "java_path": 563, "path_to_your_jar": 563, "param_str": 563, "params_str": 563, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 563, "app\u7684\u7c7b\u7684\u5168\u540d": 563, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 563, "\u53ef\u4ee5\u901a\u8fc7": 563, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 563, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 563, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 563, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 563, "\u53ef\u4ee5": 563, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 563, "jar_path": 563, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 563, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 563, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 563, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 563, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 563, "\u7684app": 563, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 563, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 563, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [563, 564, 566], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 563, "\u76f8\u5173\u8bba\u6587": 563, "wenfei": 563, "jingbo": 563, "xu": 563, "wenyuan": 563, "yu": 563, "jingren": 563, "zhou": 563, "xiaojian": 563, "luo": 563, "qiang": 563, "yin": 563, "cao": 563, "ruiqi": 563, "tod": [563, 569], "yinghui": 563, "wu": 563, "jiaxin": 563, "jiang": 563, "43rd": 563, "zeyu": 563, "zheng": 563, "bohan": 563, "chao": 563, "tian": 563, "\u4ee5": [564, 567, 568, 570, 573], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 564, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [564, 566], "\u5982\u679c\u8fd0\u884c": 564, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 564, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 564, "\u56e0\u6b64": [564, 565, 567], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 564, "\u4f1a\u8bdd": [564, 567], "\u5ba2\u6237\u7aef": [564, 565, 569], "\u5b83\u5c01\u88c5": 564, "\u7ba1\u7406\u7740": 564, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 564, "\u5e76": 564, "\u8fde\u63a5": 564, "\u64cd\u4f5c\u7528\u6237\u5728": 564, "\u96c6\u7fa4\u4e0a\u7684": 564, "\u5f15\u64ce": 564, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 564, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 564, "\u5b9e\u4f8b": 564, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 564, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 564, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 564, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 564, "\u8def\u5f84": [564, 573], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 564, "\u7136\u540e": [564, 572], "\u5c06\u5176\u901a\u8fc7": 564, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 564, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 564, "\u8282\u70b9\u7684\u6982\u5ff5": 564, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 564, "\u521b\u5efa\u7684\u96c6\u7fa4": 564, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 564, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 564, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 564, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 564, "\u4e0a\u7684\u4e00\u4e2a": 564, "\u5b9e\u4f8b\u5305\u542b": 564, "\u4e00\u4e2a\u8fd0\u884c": 564, "\u7684": [564, 565, 566, 569, 574], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 564, "\u8d1f\u8d23\u5bf9": 564, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 564, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 564, "\u5f15\u64ce\u5bb9\u5668\u7684": 564, "replicaset": 564, "\u5bf9\u8c61": 564, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 564, "\u901a\u8fc7": [564, 567], "\u63a5\u6536\u6765\u81ea": 564, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 564, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 564, "\u56fe\u67e5\u8be2\u5f15\u64ce": 564, "\u56fe\u5b66\u4e60\u5f15\u64ce": [564, 569], "\u7684\u751f\u547d\u5468\u671f": 564, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 564, "\u8bf7\u5728": 564, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 564, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 564, "\u5b89\u88c5": [564, 569], "release_nam": 564, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 564, "\u53c2\u8003": 564, "\u8be5\u94fe\u63a5": 564, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 564, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 564, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 564, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 564, "\u96c6\u7fa4": [564, 566, 570], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 564, "\u7528\u6cd5\u5982\u4e0b": 564, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 564, "launch_clust": 564, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 564, "boto3": 564, "your_access_key_id": 564, "your_access_key_secret": 564, "region": 564, "your_region_nam": 564, "kube_config_path": 564, "alibabacloud_cs20151215": 564, "alibabacloud_ecs20140526": 564, "alibabacloud_vpc20160428": 564, "your_region_id": 564, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 564, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 564, "\u5e73\u53f0\u4e0a": 564, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 564, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 564, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 564, "\u672c\u5730\u90e8\u7f72": 564, "graphscope_env": [564, 565], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 565, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 565, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 565, "\u9075\u5faa": 565, "\u7684\u5f00\u6e90\u534f\u8bae": 565, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 565, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 565, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 565, "\u955c\u50cf": 565, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 565, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 565, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 565, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 565, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 565, "\u6267\u884c": 565, "10240m": 565, "minitest": 565, "unittest": 565, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 565, "\u6bd4\u5982": [565, 573], "\u56fe\u5206\u6790\u5f15\u64ce": [565, 569], "\u6a21\u5757": 565, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 565, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 565, "\u7684\u6784\u5efa\u8fc7\u7a0b": 565, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 565, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 565, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 565, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 565, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 565, "\u4e3a": [565, 566, 567], "shortsha": 565, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 565, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 565, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 565, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 565, "\u90a3\u4e48": 565, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 565, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 565, "\u5ba2\u6237\u7aef\u5373\u53ef": 565, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 565, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 565, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 565, "\u4e0b\u7684": 565, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 565, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 565, "\u4e0b\u5206\u522b\u6784\u5efa": 565, "\u7531\u4e8e": 565, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 565, "\u975edocker": 565, "\u4e2d\u8fdb\u884c": 565, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 565, "\u7684\u4f9d\u8d56": 565, "\u57fa\u4e8e\u5f53\u524d": 565, "\u73af\u5883\u4e0b\u7684": 565, "\u7248\u672c\u6784\u5efa": 565, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [565, 567], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 565, "\u7248\u672c": [565, 570], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 565, "conda": 565, "pyenv": 565, "\u5b89\u88c5\u591a\u4e2a": 565, "\u7684\u7248\u672c": 565, "\u98ce\u683c": 565, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 565, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 565, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 565, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 566, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 566, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 566, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 566, "\u6216\u8005\u5728": 566, "\u4e0e\u6211\u4eec\u8054\u7cfb": 566, "\u8fd0\u884c": 566, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 566, "\u5728\u901a\u8fc7": 566, "\u5ba2\u6237\u7aef\u4f7f\u7528": 566, "\u8fc7\u7a0b\u4e2d": 566, "\u9700\u8981\u7684\u6700\u4f4e": 566, "\u7248\u672c\u662f3": 566, "\u6700\u4f4epip\u7248\u672c\u662f": 566, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 566, "\u5355\u673a\u60c5\u51b5\u4e0b": 566, "\u8d44\u6e90\u9700\u6c42": 566, "\u6838": 566, "\u5185\u5b58": 566, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 566, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 566, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 566, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 566, "\u662f\u5426\u5f3a\u4f9d\u8d56": 566, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 566, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 566, "\u7684\u5f62\u5f0f\u5206\u53d1": 566, "\u53ef\u4ee5\u7528": 566, "\u5feb\u901f\u5b89\u88c5": 566, "\u5982\u4f55\u5982\u67e5\u770b": 566, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 566, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 566, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 566, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 566, "\u53ef\u4ee5\u4f7f\u7528": [566, 572], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 566, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 566, "\u7684\u78c1\u76d8": 566, "\u4e5f\u53ef\u5728": 566, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 566, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 566, "\u547d\u4ee4\u65f6": 566, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 566, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 566, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 566, "\u8fdb\u884c\u5220\u9664": 566, "\u901a\u5e38\u60c5\u51b5\u4e0b": 566, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 566, "\u90e8\u7f72": [566, 569], "\u65f6": [566, 567], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 566, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 566, "\u7b49\u6743\u9650": 566, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 566, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 566, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 566, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 566, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 566, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 566, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 566, "\u76ee\u524d": [566, 573], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 566, "\u53ef\u901a\u8fc7": 566, "\u8be5\u6587\u6863": 566, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 566, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 566, "\u5982\u679c": 566, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 566, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 566, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 566, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 566, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 566, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 566, "\u8f7d\u56fe\u9636\u6bb5": 566, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 566, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 566, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 566, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 566, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 566, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 566, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 566, "\u53ef\u89c1": 566, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 566, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 566, "\u90e8\u7f72\u7684": 566, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 566, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 566, "\u865a\u62df\u7684": 566, "\u6709\u4ec0\u4e48\u533a\u522b": 566, "\u5982\u4f55\u8bbe\u7f6e": 566, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 566, "\u5b83\u5b58\u50a8\u7531": 566, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 566, "\u7684\u5143\u4fe1\u606f": 566, "\u4f8b\u5982\u5f62\u72b6": 566, "\u540d\u79f0\u7b49": 566, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 566, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 566, "\u5b83\u76f8\u5f53\u4e8e": 566, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 566, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 566, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 566, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 566, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 566, "\u7684\u540c\u6837\u5927\u5c0f": 566, "\u5bfc\u81f4\u5728": 566, "\u73af\u5883\u4e0b\u5b89\u88c5": 566, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 566, "\u7f16\u8bd1": 566, "\u5931\u8d25": 566, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 566, "\u8be6\u60c5\u53ef\u53c2\u8003": 566, "\u4f60\u53ef\u4ee5\u6839\u636e": 566, "\u6b64\u6559\u7a0b": 566, "\u6765\u6e90\u7801\u7f16\u8bd1": 566, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 566, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 566, "\u4e0a\u5206\u914d": 566, "\u65f6\u9047\u5230\u4e86": 566, "\u95ee\u9898": 566, "\u5982\u4f55\u89e3\u51b3": 566, "\u901a\u5e38\u5f53\u4f7f\u7528": 566, "\u7684\u65b9\u5f0f\u5b89\u88c5": 566, "\u4f1a\u62a5": 566, "\u9519\u8bef": [566, 568], "\u6211\u4eec\u901a\u8fc7": 566, "\u6765\u67e5\u770b\u65e5\u5fd7": 566, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 566, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 566, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 566, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 566, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 566, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 566, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 566, "\u7136\u540e\u5c06": 566, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 566, "\u4e3a\u4ec0\u4e48\u5728": 566, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 566, "\u5b9e\u4f8b\u65f6": 566, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 566, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 566, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 566, "\u96c6\u7fa4\u62c9\u8d77": 566, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 566, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 566, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 566, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 566, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 566, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 566, "\u6216\u5bb9\u5668": 566, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 566, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 566, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 566, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 566, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 566, "\u4ee5\u53ca": [566, 573], "\u8bf7\u6ce8\u610f": 566, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 566, "stackexchang": 566, "23452": 566, "\u5176\u4ed6\u95ee\u9898": 566, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 566, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 566, "\u540c\u65f6": [566, 571], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 566, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 567, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 567, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 567, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 567, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 567, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 567, "\u4f7f\u7528": [567, 569, 572, 573, 574], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 567, "\u6570\u636e\u96c6": 567, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 567, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 567, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 567, "\u5373\u8bba\u6587": 567, "\u4f5c\u8005": 567, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 567, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 567, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 567, "\u7ed9\u51fa\u5f02\u6784\u7684": 567, "\u6570\u636e": 567, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 567, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 567, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 567, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 567, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 567, "\u5728\u8be5\u6570\u636e\u4e2d": 567, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 567, "\u6458\u8981\u62bd\u53d6\u7684": 567, "\u7ef4": 567, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 567, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 567, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 567, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 567, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 567, "\u5ba2\u6237\u7aef\u8c03\u7528": 567, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 567, "\u6b65\u9aa4": 567, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 567, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 567, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 567, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 567, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 567, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 567, "\u7684\u7b2c\u4e00\u6b65": 567, "\u6211\u4eec\u9700\u8981\u5728": 567, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 567, "\u5bf9\u4e8e": [567, 570], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 567, "\u670d\u52a1\u7c7b\u578b": 567, "\u9ed8\u8ba4\u662f": 567, "\u53e6\u5916": [567, 573], "\u6ce8\u610f": [567, 570], "\u662f": 567, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 567, "\u5f53\u5728": 567, "\u4e0a\u4f7f\u7528": 567, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 567, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 567, "\u901a\u5e38\u4e3a": 567, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 567, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 567, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 567, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 567, "\u8be5": 567, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 567, "\u6240\u6709\u8d44\u6e90": 567, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 567, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 567, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 567, "\u90fd\u6709\u4e00\u4e2a": 567, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 567, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 567, "\u8f7d\u56fe": [567, 568, 569], "\u4ee5\u5c5e\u6027\u56fe": 567, "\u5efa\u6a21\u56fe\u6570\u636e": [567, 573], "\u5c5e\u6027\u56fe\u4e2d": 567, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 567, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 567, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 567, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 567, "\u5206\u522b\u6807\u8bb0\u4e3a": 567, "\u8bba\u6587": 567, "\u673a\u6784": 567, "\u7814\u7a76\u9886\u57df": 567, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 567, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 567, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 567, "\u5f15\u7528": 567, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 567, "\u9876\u70b9": 567, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 567, "\u64b0\u5199": 567, "\u7684\u8fb9": [567, 573], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 567, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 567, "\u6240\u6709\u7684\u9876\u70b9": 567, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 567, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 567, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 567, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 567, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 567, "\u6570\u636e\u6587\u4ef6": 567, "\u7ed3\u5408\u4f7f\u7528": 567, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 567, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 567, "author_affiliated_with_institut": 567, "paper_has_topic_field_of_studi": 567, "hastop": 567, "paper_cites_pap": 567, "author_writes_pap": 567, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 567, "\u8fd9\u91cc\u7684": 567, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 567, "\u4e2d\u7684\u56fe": 567, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 567, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 567, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 567, "\u63a2\u7d22\u6027": 567, "\u65b9\u5f0f\u6765\u63a2\u7d22": 567, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 567, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 567, "\u91c7\u7528\u79f0\u4e3a": 567, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 567, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 567, "\u5728\u6b64\u793a\u4f8b\u4e2d": 567, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 567, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 567, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 567, "\u552f\u4e00\u6807\u8bc6": 567, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 567, "\u4e8b\u5b9e\u8bc1\u660e": 567, "\u8bb8\u591a\u7b97\u6cd5": 567, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 567, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 567, "\u96c6\u4e2d\u6027": 567, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 567, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 567, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 567, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 567, "\u80cc\u540e\u57fa\u4e8e": 567, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 567, "\u7136\u540e\u8fd0\u884c": 567, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 567, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 567, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 567, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 567, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 567, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 567, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 567, "\u5f53\u524d": 567, "\u652f\u6301\u7528\u6237\u4ee5": 567, "\u6a21\u578b\u548c": 567, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 567, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 567, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 567, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 567, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 567, "\u6211\u4eec\u8bad\u7ec3\u4e86": 567, "\u6a21\u578b": 567, "\u5c06\u8282\u70b9": 567, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 567, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 567, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 567, "\u4e3a\u6b64": 567, "\u63a5\u7740\u4e0a\u4e00\u6b65": 567, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 567, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 567, "train_gcn": 567, "\u6700\u540e": [567, 568, 571], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 567, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 567, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 567, "\u548c\u5f15\u64ce": 567, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 567, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 568, "\u6295\u5f71\u7684\u65b9\u6cd5": 568, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 568, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 568, "\u5177\u4f53\u800c\u8a00": 568, "\u56fe": 568, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 568, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 568, "\u6211\u4eec\u5df2\u7ecf\u5728": 568, "\u4e00\u8282\u89c1\u5230\u8fc7": 568, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 568, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 568, "\u8fdb\u4e00\u6b65\u7684": 568, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 568, "\u4e2d\u4e4b\u540e": 568, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 568, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 568, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 568, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 568, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 568, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 568, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 568, "pathlib": 568, "\u5230\u8fd9\u91cc": 568, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 568, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 568, "graph1": 568, "graph2": 568, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 568, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 568, "\u5728\u5e95\u5c42": 568, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 568, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 568, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 568, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 568, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 568, "\u6765\u5b8c\u6210": 568, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 568, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 568, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 568, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 568, "\u503c\u53ef\u4ee5\u4e3a": 568, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 568, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 568, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 568, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 568, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 568, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 568, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 568, "sub_graph2": 568, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 568, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 568, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 568, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 568, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 568, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 568, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 568, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 568, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 568, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 568, "\u8fb9\u6807\u7b7e": 568, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 568, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 568, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 568, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 568, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 568, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 568, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 568, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 569, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 569, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 569, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 569, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 569, "\u63d0\u4f9b\u4e86": 569, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 569, "\u5177\u6709\u4e00\u7ad9\u5f0f": 569, "\u5f00\u53d1\u4fbf\u6377": 569, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 569, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 569, "\u5305\u62ec": [569, 572], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 569, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 569, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 569, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 569, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 569, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 569, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 569, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 569, "\u5982\u98ce\u63a7": 569, "\u7535\u5546\u63a8\u8350": 569, "\u5e7f\u544a": 569, "\u7f51\u7edc\u5b89\u5168": [569, 572], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 569, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 569, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 569, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 569, "\u6700\u4f73\u8bba\u6587\u5956": 569, "vldb2017": 569, "\u6700\u4f73\u6f14\u793a\u5956": 569, "vldb2020": 569, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 569, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 569, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 569, "2021\u5f55\u7528": 569, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 569, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 569, "kdd\u7b49": 569, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 569, "\u57fa\u4e8e": [569, 574], "\u793a\u4f8b": 569, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 569, "\u521b\u5efa\u4f1a\u8bdd": 569, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 569, "\u56fe\u5206\u6790": 569, "\u56fe\u795e\u7ecf\u7f51\u7edc": 569, "\u5173\u95ed\u4f1a\u8bdd": 569, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 569, "\u5728aw": 569, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 569, "\u672c\u5730\u90e8\u7f72graphscop": 569, "\u5165\u95e8\u6559\u7a0b": 569, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [569, 574], "\u4f7f\u7528\u517c\u5bb9": [569, 574], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [569, 574], "\u7528": [569, 571, 574], "\u50cf": [569, 574], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [569, 574], "\u8f7d\u5165\u56fe\u6570\u636e": [569, 574], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [569, 574], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [569, 574], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [569, 574], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [569, 574], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [569, 574], "bipartitegraphsag": [569, 574], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [569, 574], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [569, 574], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [569, 574], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 569, "\u624b\u52a8\u914d\u7f6e\u56fe": 569, "\u9ad8\u7ea7\u7528\u6cd5": 569, "\u4ece": [569, 571], "\u4e2d\u8f7d\u56fe": 569, "\u7684\u53d8\u79cd": 569, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 569, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 569, "\u6295\u5f71": 569, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 569, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 569, "\u5185\u7f6e\u7b97\u6cd5": 569, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 569, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 569, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 569, "\u4e2d\u7684\u51fd\u6570": 569, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 569, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 569, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 569, "\u5229\u7528python": 569, "\u8fde\u63a5graphscop": 569, "\u5229\u7528java": 569, "\u5f00\u53d1\u63a7\u5236\u53f0": 569, "gremlin\u7f16\u7a0b\u5165\u95e8": 569, "gremlin\u517c\u5bb9\u6027": 569, "\u5bf9\u6bd4tinkerpop": 569, "\u56fe\u5b66\u4e60\u6a21\u578b": 569, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 569, "\u5e38\u89c1\u95ee\u9898": 569, "\u5f00\u53d1\u8005\u6307\u5357": 569, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 569, "\u6784\u5efa": 569, "\u4ee3\u7801\u98ce\u683c": 569, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 570, "monterei": 570, "\u7a0b\u5e8f\u5305": 570, "\u7684\u5f62\u5f0f\u53d1\u5e03": 570, "\u53ef\u76f4\u63a5\u901a\u8fc7": 570, "\u9700\u8981\u6ee1\u8db3": 570, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 570, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 570, "\u73af\u5883\u4e0b\u8fd0\u884c": 570, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 570, "\u7684\u7528\u6237": 570, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 570, "\u5e76\u5728": 570, "\u4e2d\u5f00\u542f": 570, "\u529f\u80fd": 570, "\u53d1\u884c\u7248\u7528\u6237": 570, "\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528": 570, "\u90e8\u7f72\u4e00\u4e2a\u672c\u5730\u7684": 570, "\u7684\u5b89\u88c5\u548c\u90e8\u7f72\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684": 570, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 570, "\u4e0a\u5b89\u88c5": 570, "wsl2": 570, "\u6765\u6a21\u62df": 570, "\u73af\u5883": [570, 574], "\u63a5\u4e0b\u6765": [570, 571, 572], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 570, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 571, "\u7b80\u79f0gie": 571, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 571, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 571, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 571, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 571, "\u8be5\u5f15\u64ce\u652f\u6301": 571, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 571, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 571, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 571, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 571, "\u63a5\u53e3": [571, 572], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 571, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 571, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 571, "\u5982\u4e0b\u6240\u793a": 571, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 571, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 571, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 571, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 571, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 571, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 571, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 571, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 571, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 571, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 571, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 571, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 571, "\u683c\u5f0f": 571, "\u7684\u8f93\u51fa": 571, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 571, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 571, "python\u8bbf\u95ee\u56fe\u6570\u636e": 571, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 571, "\u5b98\u65b9\u6587\u6863": 571, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 571, "\u8be6\u89c1gremlin": 571, "java\u7684": 571, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 571, "\u4e5f\u53eb\u505arepl\u73af\u5883": 571, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 571, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 571, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 571, "\u5b89\u88c5gremlin": 571, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 571, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 571, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 571, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 571, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 571, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 571, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 571, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 571, "\u5176\u4e2d\u7684": 571, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 571, "\u6216ip": 571, "\u548c\u7aef\u53e3": 571, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 571, "\u63d0\u793a\u7b26\u4e0b": 571, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 571, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 571, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 571, "\u8fdc\u7a0b": 571, "graphscope\u6267\u884c": 571, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 571, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 571, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 571, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 571, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 571, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 571, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 571, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 571, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 571, "hoc": 571, "\u904d\u5386\u67e5\u8be2": 571, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 571, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 571, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 571, "\u70b9\u6216\u8fb9": 571, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 571, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 571, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 571, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 571, "\u952e": 571, "\u503c": 571, "\u5bf9": 571, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 571, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 571, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 571, "\u5b83\u5305\u542b": 571, "\u7528\u6237": 571, "\u5546\u54c1": 571, "\u5730\u5740": 571, "\u4e09\u7c7b\u70b9": 571, "\u5b83\u4eec\u901a\u8fc7": 571, "\u8d2d\u4e70": 571, "\u9012\u9001": 571, "belongs_to": 571, "\u5c5e\u4e8e": 571, "home_of": 571, "\u5bb6\u5ead\u5730\u5740": 571, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 571, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 571, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 571, "\u8def\u5f841": 571, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 571, "\u4e70\u5bb6": 571, "tom": 571, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 571, "jack": 571, "\u63d0\u4f9b\u7684\u6807\u4ef7": 571, "\u7684\u5546\u54c1": 571, "gift": 571, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 571, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 571, "\u904d\u5386\u5668": 571, "\u6807\u8bc6": 571, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 571, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 571, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 571, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 571, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 571, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 571, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 571, "\u8fb9\u6216\u5c5e\u6027": 571, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 571, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 571, "\u5d4c\u5957\u904d\u5386": 571, "\u7684\u652f\u6301": 571, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 571, "\u5b50": 571, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 571, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 571, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 571, "\u8fc7\u6ee4": 571, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 571, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 571, "\u800c": 571, "\u6620\u5c04": 571, "\u6392\u5e8f": 571, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 571, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 571, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 571, "\u5728gremlin\u4e2d\u901a\u8fc7": 571, "\u5faa\u73af": 571, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 571, "\u7ec8\u6b62\u6761\u4ef6": 571, "\u8868\u8fbe": 571, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 571, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 571, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 571, "\u6761\u4ef6\u7ec8\u6b62": 571, "\u64cd\u4f5c\u7c7b\u4f3c": 571, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 571, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 571, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 571, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 571, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 571, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 571, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 571, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 571, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 571, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 571, "\u7684\u6709\u5411\u73af\u8def": 571, "\u9996\u5148": [571, 573], "\u8f93\u5165\u56fe\u64cd\u4f5c": 571, "\u5305\u542b\u4e00\u4e2a": 571, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 571, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 571, "\u70b9": 571, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 571, "\u7684\u70b9": 571, "\u7d27\u968f\u5176\u540e\u7684": 571, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 571, "\u4fee\u9970\u7b26": 571, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 571, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 571, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 571, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 571, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 571, "\u67e5\u8be2\u6cbf\u7740": 571, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 571, "\u6b21": 571, "\u8f93\u51fahops\u5728": 571, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 571, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 571, "\u901a\u8fc7\u5728": 571, "\u5185\u914d\u7f6e": 571, "\u9009\u9879\u5b9e\u73b0": 571, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 571, "\u6307\u4ee3": 571, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 571, "\u7684\u73af": 571, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 571, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 571, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 571, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 571, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 571, "\u5982\u679c\u6709\u7684\u8bdd": 571, "gie\u652f\u6301apach": 571, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 571, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 571, "3\u548c3": 571, "4\u7248\u672c\u517c\u5bb9\u7684": 571, "\u670d\u52a1\u63a5\u53e3": 571, "\u9664\u6b64\u4e4b\u5916": 571, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 571, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 571, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 571, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 571, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 571, "\u76ee\u524d\u7684": 571, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 571, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 571, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 571, "\u4e0d\u53ef\u4fee\u6539": 571, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 571, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 571, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 571, "\u7ea6\u675f": 571, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 571, "\u5305\u62ec\u70b9": 571, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 571, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 571, "\u4e3b\u952e\u7ea6\u675f": 571, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 571, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 571, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 571, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 571, "id\u7f16\u7801\u4e86\u7c7b\u578b": 571, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 571, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 571, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 571, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 571, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 571, "\u56fe\u4fee\u6539\u64cd\u4f5c": 571, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 571, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 571, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 571, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 571, "\u4e8b\u52a1": 571, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 571, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 571, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 571, "\u548c\u793a\u4f8b\u7528\u6cd5": 571, "\u8f93\u5165\u56fe": 571, "labelname1": 571, "labelname2": 571, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 571, "\u8bed\u6cd5\u7cd6": 571, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 571, "\u4ee3\u8868": 571, "\u8282\u70b9\u7684age\u5c5e\u6027": 571, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 571, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 571, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 571, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 571, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 571, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 571, "dedup": 571, "aaa": 571, "otherv": 571, "flatmap": 571, "\u591a\u91cd\u6620\u5c04": 571, "bothv": 571, "\u627e\u5230\u6240\u6709\u4ece": 571, "\u5f00\u59cb\u901a\u8fc7": 571, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 571, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 571, "\u70b9\u4e0d\u91cd\u590d": 571, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 571, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 571, "\u70b9\u53ef\u91cd\u590d": 571, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 571, "\u805a\u5408": 571, "groupbi": 571, "groupby\u591a\u4e2akei": 571, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 571, "groupby\u591a\u4e2avalu": 571, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 571, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 571, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 571, "\u4f1a\u9010\u6b65\u652f\u6301": 571, "\u53ef\u4ee5\u901a\u8fc7path": 571, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 571, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 571, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 571, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 571, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 571, "\u8ba1\u7b97\u5b50\u56fe": 571, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 571, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 571, "cap": 571, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 571, "\u4f8b\u5982pagerank\u548cshortestpath": 571, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 571, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 572, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 572, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 572, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 572, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 572, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 572, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 572, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 572, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 572, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 572, "\u57fa\u4e8egl": 572, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 572, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 572, "\u4f8b\u5982\u56fe\u91c7\u6837": 572, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 572, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 572, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 572, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 572, "\u539f\u59cb\u7684gcn": 572, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 572, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 572, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 572, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 572, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 572, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 572, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 572, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 572, "graphsaint\u7b49": 572, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 572, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 572, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 572, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 572, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 572, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 572, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 572, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 572, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 572, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 572, "\u5305\u62ectensorflow": 572, "\u548cpytorch": 572, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 572, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 572, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 572, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 572, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 572, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 572, "\u79f0\u4e3a": 572, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 572, "\u611f\u53d7\u91ce": 572, "\u591a\u8df3\u90bb\u5c45": 572, "\u7ec4\u6210": 572, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 572, "\u6211\u4eec\u5b9e\u73b0": 572, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 572, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 572, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 572, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 572, "\u7136\u540e\u7528": 572, "\u7ba1\u7406": 572, "\u5230": 572, "\u7684\u8f6c\u6362": 572, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 572, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 572, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 572, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 572, "\u5411\u91cf": 572, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 572, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 572, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 572, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 572, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 572, "\u56fe\u7f16\u7801\u5668": 572, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 572, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 572, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 572, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 572, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 572, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 572, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 572, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 572, "\u5982tensorflow": 572, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 572, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 572, "\u901a\u5e38\u6765\u8bf4": 572, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 572, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 572, "\u7528\u56fe\u91c7\u6837": 572, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 572, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 572, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 572, "\u4ee5\u8fd9\u4e9b": 572, "\u4e3a\u8f93\u5165\u4ea7\u751f": 572, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 572, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 572, "\u4ea7\u751f\u8d1f\u6837\u672c": 572, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 572, "\u6211\u4eec\u62bd\u8c61\u4e86": 572, "\u6765\u91c7\u6837\u90bb\u5c45": 572, "\u6700\u540e\u5c06": 572, "\u4ea7\u751f\u7684": 572, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 572, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 572, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 572, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 572, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 572, "\u624d\u80fd\u4f7f\u7528": 572, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 572, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 572, "\u5b9a\u4e49\u7f16\u7801\u5668": 572, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 572, "\u5f97\u5230": 572, "\u540e": 572, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 572, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 572, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 572, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 572, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 572, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 572, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 572, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 572, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 572, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 572, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 572, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 572, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 572, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 572, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 572, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 572, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 572, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 572, "\u6765": 572, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 572, "\u9700\u8981\u7684\u683c\u5f0f": 572, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 572, "\u5206\u522b\u662f\u70b9\u8868": 572, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 572, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 572, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 572, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 572, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 572, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 572, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 572, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 572, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 572, "\u56de\u4e00\u8df3\u90bb\u5c45": 572, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 572, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 572, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 572, "\u56e0\u6b64\u9009\u62e9": 572, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 572, "\u6210": 572, "\u8fd4\u56de": 572, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 572, "\u6765\u628a": 572, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 572, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 572, "\u4f60\u53ef\u4ee5\u4ece": 572, "\u83b7\u53d6\u548c\u524d\u9762": 572, "\u5bf9\u5e94\u7684": 572, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 572, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 572, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 572, "\u56e0\u4e3a": 572, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 572, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 572, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 572, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 572, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 572, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 572, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 572, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 572, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 572, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 572, "\u7136\u540e\u5728": 572, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 572, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 572, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 572, "\u6765\u8fdb\u884c\u8bad\u7ec3": 572, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 572, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 572, "\u76ee\u5f55": 572, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 572, "gat\u7b49\u6a21\u578b": 572, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 572, "\u5c5e\u6027\u56fe": 573, "\u56fe\u4e0a\u7684\u70b9": 573, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 573, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 573, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 573, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 573, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 573, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 573, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 573, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 573, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 573, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 573, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 573, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 573, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 573, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 573, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 573, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 573, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 573, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 573, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 573, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 573, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 573, "\u7684\u672c\u5730\u8def\u5f84": 573, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 573, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 573, "\u662f\u6211\u4eec\u901a\u8fc7": 573, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 573, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 573, "\u4f60\u53ef\u4ee5\u5728": 573, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 573, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 573, "\u7136\u800c": 573, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 573, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 573, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 573, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 573, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 573, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 573, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 573, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 573, "\u6211\u4eec\u5c06\u4f7f\u7528": 573, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 573, "\u627e\u5230\u6e90\u6570\u636e": 573, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 573, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 573, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 573, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 573, "\u4ee3\u8868\u6570\u636e\u6e90": 573, "\u6307\u793a": 573, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 573, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 573, "\u6570\u7ec4\u7b49": 573, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 573, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 573, "\u8f7d\u5165\u6570\u636e": 573, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 573, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 573, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 573, "\u9ed8\u8ba4\u4e3a": 573, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 573, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 573, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 573, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 573, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 573, "\u4e3e\u4e2a\u4f8b\u5b50": 573, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 573, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 573, "\u53ef\u9009\u9879": 573, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 573, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 573, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 573, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 573, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 573, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 573, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 573, "\u6bd4\u5982\u8bf4": 573, "\u5217\u7684\u5217\u540d": 573, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 573, "\u6216\u76ee\u6807\u70b9": 573, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 573, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 573, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 573, "\u4ee3\u8868\u7b2c\u51e0\u5217": 573, "\u4ece0\u5f00\u59cb": 573, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 573, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 573, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 573, "\u7c7b\u4f3c": 573, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 573, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 573, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 573, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 573, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 573, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 573, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 573, "\u8fb9\u7684\u6807\u7b7e\u540d": 573, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 573, "\u4e00\u5217\u5c5e\u6027": 573, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 573, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 573, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 573, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 573, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 573, "\u4e3e\u4f8b\u6765\u8bf4": 573, "\u8d77\u70b9\u7684": 573, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 573, "\u5217\u540d": 573, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 573, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 573, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 573, "\u4e00\u5217\u4e3a\u8d77\u70b9": 573, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 573, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 573, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 573, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 573, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 573, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 573, "\u5982\u679c\u7528\u6237\u7684": 573, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 573, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 573, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 573, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 573, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 573, "\u6709\u4e00\u4e2a\u540d\u4e3a": 573, "\u7684\u8fb9\u6807\u7b7e": 573, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 573, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 573, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 573, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 573, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 573, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 573, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 573, "\u50cf\u8fd9\u6837": 573, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 573, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 573, "\u5728\u8fd9\u91cc": 573, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 573, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 573, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 573, "\u7b49\u7c7b\u578b": 573, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 573, "\u5206\u522b\u4e3a": 573, "\u53ef\u4ee5\u4e3a": 573, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 573, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 573, "\u5f53id\u4e0d\u80fd\u7528": 573, "\u8868\u793a\u65f6": 573, "\u624d\u5e94\u8be5\u4f7f\u7528": 573, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 573, "\u5efa\u8bae\u4f7f\u7528": 573, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 573, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 573, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 573, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 573, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 573, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 573, "\u5c5e\u6027\u56fe\u7684": 573, "\u4f8b\u5b50": 573, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 573, "\u7684\u7c7b": 573, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 573, "\u652f\u6301\u4ece": 573, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 573, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 573, "\u9664\u4e86": 573, "\u5916": 573, "\u5176\u4ed6\u5c5e\u6027": 573, "id\u5217": 573, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 573, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 573, "\u6211\u4eec\u5c06\u5176\u4ee5": 573, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 573, "\u5f53": 573, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 573, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 573, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 573, "\u6807\u51c6": 573, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 573, "\u5c06\u4f1a\u89e3\u6790": 573, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 573, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 573, "\u672c\u5730": 573, "\u6570\u636e\u7531": 573, "\u8d1f\u8d23\u8f7d\u5165": 573, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 573, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 573, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 573, "\u4e4b\u4e8e": 573, "\u6216\u8005\u662f": 573, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 573, "\u6bd4\u5982\u53c2\u7167": 573, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 573, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 573, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 573, "abstractbufferedfil": 573, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 573, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 573, "write\u529f\u80fd": 573, "\u6700\u540e\u901a\u8fc7": 573, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 573, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 574, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 574, "\u5982\u4f55\u8f7d\u56fe": 574, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 574, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 574, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 574, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 574, "\u6211\u4eec\u7528jupyt": 574, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 574, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 574, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 574, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 574, "lab": 574, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 574, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 574}, "objects": {"": [[330, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [330, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [330, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [330, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [330, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [330, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [330, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [330, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [330, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [330, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [330, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [330, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [330, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [330, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [330, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [330, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [330, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [330, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [330, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [330, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [330, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [330, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [330, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [330, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [330, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [330, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [330, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [330, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [330, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [330, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [330, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [330, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [330, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [330, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [330, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [330, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [330, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [330, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [330, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::frag_id"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::label_id"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::frag_id"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::label_id"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::extend_type"], [330, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::frag_id"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [330, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [330, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [330, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [330, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [330, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [330, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [330, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [330, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [330, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment11IEDestsSizeEv", "gs::ArrowProjectedFragment::IEDestsSize"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12IOEDestsSizeEv", "gs::ArrowProjectedFragment::IOEDestsSize"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment11OEDestsSizeEv", "gs::ArrowProjectedFragment::OEDestsSize"], [330, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [330, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [330, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [330, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [330, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [330, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [330, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [330, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [330, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [330, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [330, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [330, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [330, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [330, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [330, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [330, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [330, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [330, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [330, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [330, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [330, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [330, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [330, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [330, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [330, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [330, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [330, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [330, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [330, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [330, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [330, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [330, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [330, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [330, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [330, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [330, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [330, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [330, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [330, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [330, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [330, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [330, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [330, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [330, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [330, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [330, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [330, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [330, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [330, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [330, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [330, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [330, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [330, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [330, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [330, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [330, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [330, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [330, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [330, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [330, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [330, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [330, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [330, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [330, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [330, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [330, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [330, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [330, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [330, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [330, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [330, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [330, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [330, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [330, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [330, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [330, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [330, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [330, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [330, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [330, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [330, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [330, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [330, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [330, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [330, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [330, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [330, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [330, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [330, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [330, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [330, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [330, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [330, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [330, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [330, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [330, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [330, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [330, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [330, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [330, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [330, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [330, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [330, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [330, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [330, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [330, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [330, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [330, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [330, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [330, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [330, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [330, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [330, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [330, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [330, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [330, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [330, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [330, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [330, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [330, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [330, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [330, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [330, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [330, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [330, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [330, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [330, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [330, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [330, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [330, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [330, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [330, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [330, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [330, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [330, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [330, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [330, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [330, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [330, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [330, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [330, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [330, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [330, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [330, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [330, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [330, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [330, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [330, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [330, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [330, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [330, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [330, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [330, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [330, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [330, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [330, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [330, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [330, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [330, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [330, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [330, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [330, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [330, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [330, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [330, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [330, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [330, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [330, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [330, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [330, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [330, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [330, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [330, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [330, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [330, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [330, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [330, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [330, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [330, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [330, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [330, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [330, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [330, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [330, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [330, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [330, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [330, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [330, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [330, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [330, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [330, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [330, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [330, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [330, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [330, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [330, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [330, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [330, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [330, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [330, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [330, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [330, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [330, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [330, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [330, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [330, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [330, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [330, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [330, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [330, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [330, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [330, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [330, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [330, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [330, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [330, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [330, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [330, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [330, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [330, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [330, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [330, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [330, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [330, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [330, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [330, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [330, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [330, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [330, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [330, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [330, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [330, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [330, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [330, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [330, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [330, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [330, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [330, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [330, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [330, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [330, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [330, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [330, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [330, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [330, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [330, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [330, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [330, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [330, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [330, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [330, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [330, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [330, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [330, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [330, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [330, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [330, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [330, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [330, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [330, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [330, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [330, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [330, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [330, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [330, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [330, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [330, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [330, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [330, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [330, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [330, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [330, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [330, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [330, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [330, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [330, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [330, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [330, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [330, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [330, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [330, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [330, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [330, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [330, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [330, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [330, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [330, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [330, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [330, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [330, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [330, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [330, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [330, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [330, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [330, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [330, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [330, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [330, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [330, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [330, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [330, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [330, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [330, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [330, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [330, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [330, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [330, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [330, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [330, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [330, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[547, 9, 1, "", "Session"], [337, 12, 1, "", "Vertex"], [331, 8, 1, "", "attribute_assortativity_coefficient"], [331, 8, 1, "", "average_degree_connectivity"], [331, 8, 1, "", "average_shortest_path_length"], [331, 8, 1, "", "avg_clustering"], [331, 8, 1, "", "bfs"], [331, 8, 1, "", "cdlp"], [331, 8, 1, "", "clustering"], [338, 8, 1, "", "declare"], [331, 8, 1, "", "degree_assortativity_coefficient"], [331, 8, 1, "", "degree_centrality"], [331, 8, 1, "", "eigenvector_centrality"], [381, 8, 1, "", "g"], [382, 8, 1, "", "get_default_session"], [383, 8, 1, "", "graphlearn"], [384, 8, 1, "", "gremlin"], [385, 8, 1, "", "has_default_session"], [331, 8, 1, "", "hits"], [331, 8, 1, "", "is_simple_path"], [331, 8, 1, "", "k_core"], [331, 8, 1, "", "k_shell"], [331, 8, 1, "", "katz_centrality"], [331, 8, 1, "", "louvain"], [331, 8, 1, "", "lpa"], [331, 8, 1, "", "lpa_u2i"], [331, 8, 1, "", "numeric_assortativity_coefficient"], [331, 8, 1, "", "pagerank"], [331, 8, 1, "", "pagerank_nx"], [386, 14, 1, "", "session"], [387, 8, 1, "", "set_option"], [331, 8, 1, "", "sssp"], [331, 8, 1, "", "triangles"], [331, 8, 1, "", "voterank"], [331, 8, 1, "", "wcc"]], "graphscope.Session": [[547, 10, 1, "", "__enter__"], [547, 10, 1, "", "__exit__"], [547, 10, 1, "", "__init__"], [547, 10, 1, "", "add_lib"], [547, 10, 1, "", "as_default"], [547, 10, 1, "", "close"], [547, 10, 1, "", "connected"], [547, 11, 1, "", "engine_config"], [547, 10, 1, "", "g"], [547, 10, 1, "", "get_config"], [547, 10, 1, "", "get_vineyard_object_mapping_table"], [547, 10, 1, "", "graphlearn"], [547, 11, 1, "", "info"], [547, 10, 1, "", "interactive"], [547, 10, 1, "", "load_from"], [547, 10, 1, "", "restore_from_pvc"], [547, 10, 1, "", "run_fetches"], [547, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[331, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[331, 10, 1, "", "__call__"], [331, 10, 1, "", "__init__"], [331, 10, 1, "", "is_compatible"], [331, 10, 1, "", "signature"]], "graphscope.framework.app": [[331, 9, 1, "", "App"], [331, 9, 1, "", "AppAssets"], [331, 9, 1, "", "AppDAGNode"], [339, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[331, 10, 1, "", "__del__"], [331, 10, 1, "", "__init__"], [331, 11, 1, "", "key"], [331, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[331, 10, 1, "", "__init__"], [331, 11, 1, "", "algo"], [331, 11, 1, "", "context_type"], [331, 11, 1, "", "gar"], [331, 10, 1, "", "is_compatible"], [331, 11, 1, "", "signature"], [331, 11, 1, "", "type"]], "graphscope.framework.context": [[332, 9, 1, "", "BaseContextDAGNode"], [332, 9, 1, "", "Context"], [332, 9, 1, "", "DynamicVertexDataContext"], [332, 9, 1, "", "LabeledVertexDataContextDAGNode"], [332, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [332, 9, 1, "", "ResultDAGNode"], [332, 9, 1, "", "TensorContextDAGNode"], [332, 9, 1, "", "VertexDataContextDAGNode"], [332, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[332, 10, 1, "", "to_dataframe"], [332, 10, 1, "", "to_numpy"], [332, 10, 1, "", "to_vineyard_dataframe"], [332, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[544, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[340, 8, 1, "", "add_column"], [341, 8, 1, "", "add_labels_to_graph"], [342, 8, 1, "", "arrow_to_dynamic"], [343, 8, 1, "", "bind_app"], [344, 8, 1, "", "clear_edges"], [345, 8, 1, "", "clear_graph"], [346, 8, 1, "", "context_to_dataframe"], [347, 8, 1, "", "context_to_numpy"], [348, 8, 1, "", "copy_graph"], [349, 8, 1, "", "create_app"], [350, 8, 1, "", "create_graph"], [351, 8, 1, "", "create_graph_view"], [352, 8, 1, "", "create_loader"], [353, 8, 1, "", "create_subgraph"], [354, 8, 1, "", "create_unload_op"], [355, 8, 1, "", "dynamic_to_arrow"], [356, 8, 1, "", "get_context_data"], [357, 8, 1, "", "graph_to_dataframe"], [358, 8, 1, "", "graph_to_numpy"], [359, 8, 1, "", "gremlin_to_subgraph"], [360, 8, 1, "", "modify_edges"], [361, 8, 1, "", "modify_vertices"], [362, 8, 1, "", "output"], [363, 8, 1, "", "project_arrow_property_graph"], [364, 8, 1, "", "project_to_simple"], [365, 8, 1, "", "report_graph"], [366, 8, 1, "", "run_app"], [367, 8, 1, "", "to_data_sink"], [368, 8, 1, "", "to_directed"], [369, 8, 1, "", "to_undirected"], [370, 8, 1, "", "to_vineyard_dataframe"], [371, 8, 1, "", "to_vineyard_tensor"], [372, 8, 1, "", "unload_app"], [373, 8, 1, "", "unload_context"], [374, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[402, 9, 1, "", "Graph"], [402, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[402, 10, 1, "", "__init__"], [402, 10, 1, "", "add_column"], [402, 10, 1, "", "add_edges"], [402, 10, 1, "", "add_vertices"], [402, 10, 1, "", "consolidate_columns"], [402, 10, 1, "", "detach"], [402, 11, 1, "", "key"], [402, 10, 1, "", "load_from"], [402, 10, 1, "", "loaded"], [402, 10, 1, "", "project"], [402, 10, 1, "", "save_to"], [402, 11, 1, "", "schema"], [402, 11, 1, "", "schema_path"], [402, 11, 1, "", "session_id"], [402, 10, 1, "", "to_dataframe"], [402, 10, 1, "", "to_directed"], [402, 10, 1, "", "to_numpy"], [402, 10, 1, "", "to_undirected"], [402, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[402, 10, 1, "", "__init__"], [402, 10, 1, "", "add_column"], [402, 10, 1, "", "add_edges"], [402, 10, 1, "", "add_vertices"], [402, 10, 1, "", "consolidate_columns"], [402, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[402, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[402, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[402, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[544, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[375, 10, 1, "", "__init__"], [376, 10, 1, "", "as_op_def"], [377, 10, 1, "", "eval"], [378, 11, 1, "", "evaluated"], [379, 11, 1, "", "key"], [380, 11, 1, "", "signature"]], "graphscope.interactive.query": [[403, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[403, 10, 1, "", "__init__"], [403, 10, 1, "", "close"], [403, 11, 1, "", "cypher_driver"], [403, 11, 1, "", "cypher_url"], [403, 10, 1, "", "execute"], [403, 11, 1, "", "graph_url"], [403, 11, 1, "", "gremlin_client"], [403, 11, 1, "", "gremlin_url"], [403, 11, 1, "", "object_id"], [403, 11, 1, "", "session"], [403, 11, 1, "", "session_id"], [403, 10, 1, "", "subgraph"], [403, 10, 1, "", "submit"], [403, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[404, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[404, 10, 1, "", "E"], [404, 10, 1, "", "V"], [404, 10, 1, "", "__init__"], [404, 10, 1, "", "get_handle"]], "graphscope.nx": [[540, 9, 1, "", "DiGraph"], [540, 9, 1, "", "Graph"], [542, 8, 1, "", "read_adjlist"], [542, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[540, 10, 1, "", "__contains__"], [540, 10, 1, "", "__getitem__"], [540, 10, 1, "", "__init__"], [540, 10, 1, "", "__iter__"], [540, 10, 1, "", "__len__"], [540, 10, 1, "", "add_edge"], [540, 10, 1, "", "add_edges_from"], [540, 10, 1, "", "add_node"], [540, 10, 1, "", "add_nodes_from"], [540, 10, 1, "", "add_weighted_edges_from"], [540, 11, 1, "", "adj"], [540, 10, 1, "", "adjacency"], [540, 14, 1, "", "adjlist_inner_dict_factory"], [540, 14, 1, "", "adjlist_outer_dict_factory"], [540, 10, 1, "", "clear"], [540, 10, 1, "", "clear_edges"], [540, 10, 1, "", "copy"], [540, 11, 1, "", "degree"], [540, 14, 1, "", "edge_attr_dict_factory"], [540, 10, 1, "", "edge_subgraph"], [540, 11, 1, "", "edges"], [540, 10, 1, "", "get_edge_data"], [540, 14, 1, "", "graph_attr_dict_factory"], [540, 14, 1, "", "graph_cache_factory"], [540, 11, 1, "", "graph_type"], [540, 10, 1, "", "has_edge"], [540, 10, 1, "", "has_node"], [540, 10, 1, "", "has_predecessor"], [540, 10, 1, "", "has_successor"], [540, 11, 1, "", "in_degree"], [540, 11, 1, "", "in_edges"], [540, 10, 1, "", "is_directed"], [540, 10, 1, "", "is_multigraph"], [540, 11, 1, "", "key"], [540, 11, 1, "", "name"], [540, 10, 1, "", "nbunch_iter"], [540, 10, 1, "", "neighbors"], [540, 14, 1, "", "node_attr_dict_factory"], [540, 14, 1, "", "node_dict_factory"], [540, 11, 1, "", "nodes"], [540, 10, 1, "", "number_of_edges"], [540, 10, 1, "", "number_of_nodes"], [540, 11, 1, "", "op"], [540, 10, 1, "", "order"], [540, 11, 1, "", "out_degree"], [540, 11, 1, "", "out_edges"], [540, 11, 1, "", "pred"], [540, 10, 1, "", "predecessors"], [540, 10, 1, "", "remove_edge"], [540, 10, 1, "", "remove_edges_from"], [540, 10, 1, "", "remove_node"], [540, 10, 1, "", "remove_nodes_from"], [540, 10, 1, "", "reverse"], [540, 11, 1, "", "schema"], [540, 11, 1, "", "session"], [540, 11, 1, "", "session_id"], [540, 10, 1, "", "set_edge_data"], [540, 10, 1, "", "set_node_data"], [540, 11, 1, "", "signature"], [540, 10, 1, "", "size"], [540, 10, 1, "", "subgraph"], [540, 11, 1, "", "succ"], [540, 10, 1, "", "successors"], [540, 10, 1, "", "to_directed"], [540, 10, 1, "", "to_undirected"], [540, 10, 1, "", "to_undirected_class"], [540, 10, 1, "", "update"]], "graphscope.nx.Graph": [[540, 10, 1, "", "__contains__"], [540, 10, 1, "", "__getitem__"], [543, 8, 1, "", "__init__"], [540, 10, 1, "", "__iter__"], [540, 10, 1, "", "__len__"], [543, 8, 1, "", "_convert_arrow_to_dynamic"], [540, 10, 1, "", "add_edge"], [540, 10, 1, "", "add_edges_from"], [540, 10, 1, "", "add_node"], [540, 10, 1, "", "add_nodes_from"], [540, 10, 1, "", "add_weighted_edges_from"], [540, 11, 1, "", "adj"], [540, 10, 1, "", "adjacency"], [540, 14, 1, "", "adjlist_inner_dict_factory"], [540, 14, 1, "", "adjlist_outer_dict_factory"], [540, 10, 1, "", "clear"], [540, 10, 1, "", "clear_edges"], [540, 10, 1, "", "copy"], [540, 11, 1, "", "degree"], [540, 14, 1, "", "edge_attr_dict_factory"], [540, 10, 1, "", "edge_subgraph"], [540, 11, 1, "", "edges"], [540, 10, 1, "", "get_edge_data"], [540, 14, 1, "", "graph_attr_dict_factory"], [540, 14, 1, "", "graph_cache_factory"], [540, 11, 1, "", "graph_type"], [540, 10, 1, "", "has_edge"], [540, 10, 1, "", "has_node"], [540, 10, 1, "", "is_directed"], [540, 10, 1, "", "is_multigraph"], [540, 11, 1, "", "key"], [540, 11, 1, "", "name"], [540, 10, 1, "", "nbunch_iter"], [540, 10, 1, "", "neighbors"], [540, 14, 1, "", "node_attr_dict_factory"], [540, 14, 1, "", "node_dict_factory"], [540, 11, 1, "", "nodes"], [540, 10, 1, "", "number_of_edges"], [540, 10, 1, "", "number_of_nodes"], [540, 11, 1, "", "op"], [540, 10, 1, "", "order"], [540, 10, 1, "", "remove_edge"], [540, 10, 1, "", "remove_edges_from"], [540, 10, 1, "", "remove_node"], [540, 10, 1, "", "remove_nodes_from"], [540, 11, 1, "", "schema"], [540, 11, 1, "", "session"], [540, 11, 1, "", "session_id"], [540, 10, 1, "", "set_edge_data"], [540, 10, 1, "", "set_node_data"], [540, 11, 1, "", "signature"], [540, 10, 1, "", "size"], [540, 10, 1, "", "subgraph"], [540, 10, 1, "", "to_directed"], [540, 10, 1, "", "to_undirected"], [540, 10, 1, "", "to_undirected_class"], [540, 10, 1, "", "update"]], "graphscope.nx.builtin": [[405, 8, 1, "", "average_clustering"], [405, 8, 1, "", "average_shortest_path_length"], [405, 8, 1, "", "bfs_edges"], [405, 8, 1, "", "clustering"], [405, 8, 1, "", "degree_centrality"], [405, 8, 1, "", "eigenvector_centrality"], [405, 8, 1, "", "has_path"], [405, 8, 1, "", "hits"], [405, 8, 1, "", "in_degree_centrality"], [405, 8, 1, "", "k_core"], [405, 8, 1, "", "katz_centrality"], [405, 8, 1, "", "out_degree_centrality"], [405, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[406, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[407, 8, 1, "", "add_cycle"], [408, 8, 1, "", "add_path"], [409, 8, 1, "", "add_star"], [410, 8, 1, "", "all_neighbors"], [411, 8, 1, "", "common_neighbors"], [412, 8, 1, "", "create_empty_copy"], [413, 8, 1, "", "degree"], [414, 8, 1, "", "degree_histogram"], [415, 8, 1, "", "density"], [416, 8, 1, "", "edge_subgraph"], [417, 8, 1, "", "edges"], [418, 8, 1, "", "freeze"], [419, 8, 1, "", "induced_subgraph"], [420, 8, 1, "", "info"], [421, 8, 1, "", "is_directed"], [422, 8, 1, "", "is_empty"], [423, 8, 1, "", "is_frozen"], [424, 8, 1, "", "is_negatively_weighted"], [425, 8, 1, "", "is_weighted"], [426, 8, 1, "", "neighbors"], [427, 8, 1, "", "nodes"], [428, 8, 1, "", "nodes_with_selfloops"], [429, 8, 1, "", "non_edges"], [430, 8, 1, "", "non_neighbors"], [431, 8, 1, "", "number_of_edges"], [432, 8, 1, "", "number_of_nodes"], [433, 8, 1, "", "number_of_selfloops"], [434, 8, 1, "", "selfloop_edges"], [435, 8, 1, "", "subgraph"], [436, 8, 1, "", "to_directed"], [437, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[539, 13, 0, "-", "atlas"], [539, 13, 0, "-", "classic"], [539, 13, 0, "-", "community"], [539, 13, 0, "-", "degree_seq"], [539, 13, 0, "-", "directed"], [539, 13, 0, "-", "duplication"], [539, 13, 0, "-", "ego"], [539, 13, 0, "-", "expanders"], [539, 13, 0, "-", "geometric"], [539, 13, 0, "-", "harary_graph"], [539, 13, 0, "-", "intersection"], [539, 13, 0, "-", "joint_degree_seq"], [539, 13, 0, "-", "mycielski"], [539, 13, 0, "-", "nonisomorphic_trees"], [539, 13, 0, "-", "small"], [539, 13, 0, "-", "social"], [539, 13, 0, "-", "spectral_graph_forge"], [539, 13, 0, "-", "sudoku"], [539, 13, 0, "-", "trees"], [539, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[438, 8, 1, "", "graph_atlas"], [439, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[440, 8, 1, "", "balanced_tree"], [441, 8, 1, "", "barbell_graph"], [442, 8, 1, "", "binomial_tree"], [443, 8, 1, "", "circulant_graph"], [444, 8, 1, "", "circular_ladder_graph"], [445, 8, 1, "", "complete_graph"], [446, 8, 1, "", "complete_multipartite_graph"], [447, 8, 1, "", "cycle_graph"], [448, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [449, 8, 1, "", "empty_graph"], [450, 8, 1, "", "full_rary_tree"], [451, 8, 1, "", "ladder_graph"], [452, 8, 1, "", "lollipop_graph"], [453, 8, 1, "", "null_graph"], [454, 8, 1, "", "path_graph"], [455, 8, 1, "", "star_graph"], [456, 8, 1, "", "trivial_graph"], [457, 8, 1, "", "turan_graph"], [458, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[459, 8, 1, "", "LFR_benchmark_graph"], [460, 8, 1, "", "caveman_graph"], [461, 8, 1, "", "connected_caveman_graph"], [462, 8, 1, "", "gaussian_random_partition_graph"], [463, 8, 1, "", "planted_partition_graph"], [464, 8, 1, "", "random_partition_graph"], [465, 8, 1, "", "relaxed_caveman_graph"], [466, 8, 1, "", "ring_of_cliques"], [467, 8, 1, "", "stochastic_block_model"], [468, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[469, 8, 1, "", "configuration_model"], [470, 8, 1, "", "degree_sequence_tree"], [471, 8, 1, "", "directed_configuration_model"], [472, 8, 1, "", "directed_havel_hakimi_graph"], [473, 8, 1, "", "expected_degree_graph"], [474, 8, 1, "", "havel_hakimi_graph"], [475, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[476, 8, 1, "", "gn_graph"], [477, 8, 1, "", "gnc_graph"], [478, 8, 1, "", "gnr_graph"], [479, 8, 1, "", "random_k_out_graph"], [480, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[481, 8, 1, "", "duplication_divergence_graph"], [482, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[483, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[484, 8, 1, "", "chordal_cycle_graph"], [485, 8, 1, "", "margulis_gabber_galil_graph"], [486, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[487, 8, 1, "", "geographical_threshold_graph"], [488, 8, 1, "", "random_geometric_graph"], [489, 8, 1, "", "soft_random_geometric_graph"], [490, 8, 1, "", "thresholded_random_geometric_graph"], [491, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[492, 8, 1, "", "hkn_harary_graph"], [493, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[494, 8, 1, "", "general_random_intersection_graph"], [495, 8, 1, "", "k_random_intersection_graph"], [496, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[497, 8, 1, "", "directed_joint_degree_graph"], [498, 8, 1, "", "is_valid_directed_joint_degree"], [499, 8, 1, "", "is_valid_joint_degree"], [500, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[501, 8, 1, "", "mycielski_graph"], [502, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[503, 8, 1, "", "nonisomorphic_trees"], [504, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[505, 8, 1, "", "LCF_graph"], [506, 8, 1, "", "bull_graph"], [507, 8, 1, "", "chvatal_graph"], [508, 8, 1, "", "cubical_graph"], [509, 8, 1, "", "desargues_graph"], [510, 8, 1, "", "diamond_graph"], [511, 8, 1, "", "dodecahedral_graph"], [512, 8, 1, "", "frucht_graph"], [513, 8, 1, "", "heawood_graph"], [514, 8, 1, "", "house_graph"], [515, 8, 1, "", "house_x_graph"], [516, 8, 1, "", "icosahedral_graph"], [517, 8, 1, "", "krackhardt_kite_graph"], [518, 8, 1, "", "make_small_graph"], [519, 8, 1, "", "moebius_kantor_graph"], [520, 8, 1, "", "octahedral_graph"], [521, 8, 1, "", "pappus_graph"], [522, 8, 1, "", "petersen_graph"], [523, 8, 1, "", "sedgewick_maze_graph"], [524, 8, 1, "", "tetrahedral_graph"], [525, 8, 1, "", "truncated_cube_graph"], [526, 8, 1, "", "truncated_tetrahedron_graph"], [527, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[528, 8, 1, "", "davis_southern_women_graph"], [529, 8, 1, "", "florentine_families_graph"], [530, 8, 1, "", "karate_club_graph"], [531, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[532, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[533, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[534, 8, 1, "", "prefix_tree"], [535, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[536, 8, 1, "", "triad_graph"]], "networkx.generators": [[539, 13, 0, "-", "internet_as_graphs"], [539, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[537, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[538, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 127, 309, 319, 400, 553, 555], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 309, 388, 405, 555, 557], "all": [0, 31, 32, 36, 41], "pair": 0, "shortest": 0, "path": [0, 297, 302, 304, 306], "length": 0, "attribut": [0, 20, 389, 406], "assort": 0, "averag": 0, "degre": [0, 413, 539], "connect": [0, 29, 30, 121, 127, 203, 277, 280, 298, 305, 553, 560], "between": [0, 302, 549], "central": [0, 17], "breadth": 0, "first": [0, 293], "search": 0, "cdlp": 0, "close": [0, 121, 280, 560], "cluster": [0, 27, 30, 33, 41, 293, 315, 317], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": [0, 297], "shell": [0, 280, 298], "label": [0, 304, 306, 319, 389, 552, 573], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 123, 125, 304, 313, 325, 388, 392, 394, 397, 400], "singl": [0, 290], "sourc": [0, 17, 31, 32, 124, 125, 127, 304, 335, 389, 395, 398, 399], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 123, 124, 127, 296, 553], "aggreg": [1, 302, 304, 306, 310], "local": [1, 7, 32, 36, 38, 41, 45, 129, 295, 296, 297, 304, 311, 312, 316, 318, 552, 553], "vertex": [1, 10, 24, 125, 306, 319, 337, 546, 552, 573], "map": [1, 125, 286, 549], "support": [1, 11, 23, 125, 300, 304, 309], "deploy": [2, 27, 38, 127, 292, 293, 297], "gae": [2, 322, 557, 561], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 282, 293, 553], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 46, 120, 277, 279, 298, 305, 309, 329, 545, 553, 557, 565], "sdk": [2, 16, 34, 46, 120, 203, 277, 279, 284, 305, 333], "helm": [2, 29, 127], "execut": [2, 34, 299, 320], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 45, 124, 125, 126, 129, 203, 277, 279, 283, 289, 290, 292, 297, 299, 302, 306, 309, 310, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 388, 390, 391, 392, 393, 394, 396, 400, 402, 404, 406, 539, 540, 542, 543, 549, 551, 552, 553, 554, 555, 561], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 34, 289, 292, 309, 320, 321, 323, 328, 330, 331, 561], "uninstal": [2, 29, 553], "design": [3, 9, 34, 294, 297, 309, 310, 320, 398, 552], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 34, 36, 129, 279, 292, 296, 309, 311, 312, 316, 317, 318, 320, 328, 330, 552, 561], "dev": [4, 32, 36, 41, 45, 129, 295, 311], "test": [4, 36, 37, 41, 45, 46, 129, 277, 295, 311, 317, 318, 395], "setup": [4, 32, 297], "understand": [4, 45, 129], "codebas": [4, 45, 129], "make": [4, 20], "modif": 4, "build": [4, 17, 32, 36, 41, 45, 129, 295, 311, 335, 388, 395, 553, 573], "faq": [5, 302], "program": [6, 12, 14, 34, 279, 290, 398], "model": [6, 12, 14, 15, 16, 17, 24, 34, 46, 126, 283, 310, 315, 316, 317, 318, 322, 325, 388, 396, 400, 552, 553], "flash": [6, 15, 322], "motiv": [6, 9, 294, 297, 320, 552], "The": [6, 19, 30, 283, 294, 551], "overview": [6, 9, 12, 283, 292, 396, 553], "api": [6, 9, 12, 19, 20, 46, 122, 203, 277, 278, 299, 330, 333, 334, 389, 400, 541, 545, 569], "strong": 6, "express": [6, 304, 306], "implement": [6, 15, 17, 37, 398, 552], "architectur": [6, 12, 294, 549], "optim": [6, 13, 297, 302, 318], "get": [7, 17, 37, 46, 121, 203, 277, 279, 280, 288, 296, 297, 304, 312, 321, 395, 550], "start": [7, 46, 121, 124, 129, 203, 277, 279, 280, 288, 295, 296, 297, 306, 312, 321, 400, 550], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 45, 46, 129, 203, 277, 280, 282, 292, 296, 297, 311, 312, 395, 553, 560], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 41, 45, 280, 290, 296, 304, 312, 317, 395], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 41, 47, 67, 75, 92, 93, 104, 108, 118, 279, 285, 290, 292, 296, 312, 320, 323, 325, 326, 327, 330, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 549, 551, 561, 565, 569, 570], "what": [7, 14, 296, 302, 312, 323, 325, 326, 560], "": [7, 296, 302, 312, 330, 560], "next": [7, 296, 312, 326, 560], "guid": [8, 35, 36, 44, 128, 303, 314, 553, 557, 558], "exampl": [8, 17, 22, 23, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 147, 166, 167, 173, 176, 182, 196, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 303, 304, 314, 557, 558], "ingress": [9, 322], "increment": [9, 12], "messag": [9, 310], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 290, 390, 398], "runtim": [9, 34, 398], "kei": [10, 283, 299, 302, 309, 379], "concept": [10, 552], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 125, 306, 319, 406, 417, 542, 552, 573], "cut": [10, 552], "vertic": [10, 306, 319, 573], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 20, 537, 538, 541], "compat": [11, 302], "convert": 11, "nx": [11, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536], "oper": [11, 20, 28, 300, 306, 375, 376, 377, 378, 379, 380, 398, 544], "storag": [12, 33, 34, 292, 320, 549, 552], "layer": [12, 320], "grape": [12, 17, 322, 335], "ffi": 12, "comput": [12, 290, 292, 320, 552], "applic": [12, 15, 22, 23, 306, 320, 555], "perform": [13, 19, 34, 302, 309, 328], "tune": 13, "memori": [13, 319, 554], "footprint": 13, "properti": [13, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 283, 300, 302, 304, 306, 319, 551, 552, 573], "data": [13, 45, 124, 125, 126, 203, 277, 290, 293, 297, 300, 302, 319, 389, 396, 399, 400, 551, 553], "structur": [13, 203, 277, 300, 335, 406], "usag": [13, 46, 277, 302, 319], "estim": [13, 548], "pie": [14, 16, 17, 18, 322, 333, 563], "i": [14, 304, 323, 325, 326], "workflow": [14, 309, 549], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 297, 306, 308, 315, 316, 317, 318, 329], "develop": [15, 16, 17, 18, 22, 23, 36, 44, 45, 128, 129, 292, 388, 400, 553, 557], "your": [15, 16, 17, 18, 22, 37, 123, 127, 293, 316, 318, 319, 388, 398, 557], "c": [15, 16, 35, 279, 557], "defin": [15, 16, 279, 284, 316, 317, 318, 398, 549], "A": [15, 124, 283, 292, 297], "function": [15, 18, 317, 318, 331, 333, 388, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 547], "integr": [15, 37, 290, 297, 399], "client": [15, 27, 30, 36, 317, 390, 560], "step": [16, 124, 297, 304, 306, 325], "1": [16, 124, 286, 299, 389, 390, 392, 400], "context": [16, 330, 332, 546], "class": [16, 398, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "2": [16, 124, 286, 299, 389, 390, 400, 553], "3": [16, 124, 286, 299, 389, 390, 400, 553], "packag": [16, 31, 32, 317, 395], "4": [16, 124, 286, 299, 389, 400], "gar": 16, "file": [16, 27, 31, 125, 399, 551], "github": [16, 17, 25, 37], "templat": [16, 17], "java": [17, 35, 39, 203, 279, 305, 308, 336, 553, 557], "jar": 17, "own": [17, 18, 22, 127, 293, 319, 388, 398], "prepar": [17, 27, 30, 41, 45, 121, 280, 400], "jdk": [17, 335], "from": [17, 19, 20, 31, 32, 33, 125, 127, 292, 299, 306, 319, 335, 395, 549, 553], "maven": [17, 203], "repositori": 17, "submit": [17, 22, 23, 37, 40, 203, 277, 280], "javasdk": 17, "write": [18, 317, 553], "pregel": [18, 24, 333, 563], "us": [18, 20, 27, 32, 124, 127, 293, 299, 302, 309, 326, 395, 398, 400, 546, 549, 553, 554], "math": [18, 563], "h": [18, 563], "how": [19, 37, 39, 40, 41, 291, 302, 311, 388, 398, 400, 561], "doe": 19, "analysi": [19, 320], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 45, 124, 203, 277, 279, 284, 315, 318], "an": [20, 299, 398], "empti": 20, "ad": [20, 319], "node": [20, 310, 315, 316, 317, 318, 406, 427, 553], "examin": 20, "element": 20, "remov": [20, 293], "constructor": 20, "access": [20, 282], "neighbor": [20, 318, 426], "deepcopi": 20, "subgraph": [20, 302, 304, 310, 313, 325, 435], "edge_subgraph": [20, 416], "copi": [20, 31], "direct": [20, 476, 477, 478, 479, 480, 539], "analyz": [20, 297], "object": [20, 331, 332, 390, 402, 544, 547], "transform": [20, 543], "builtin": [21, 331, 405, 544], "giraph": 22, "try": [22, 124, 400], "some": [22, 306], "app": [22, 23, 330, 331, 339], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 123, 127, 282, 293, 553], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 129, 395], "toward": 23, "centric": [24, 310], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 309, 389], "k8": [27, 315, 317, 561], "kubernet": [27, 30, 33, 38, 41, 315, 565, 570], "launch": [27, 45, 316, 317, 318], "default": 27, "paramet": [27, 47, 67, 75, 92, 93, 97, 104, 108, 118, 147, 166, 167, 171, 173, 176, 182, 196, 221, 240, 241, 246, 248, 250, 256, 270, 317, 319], "frequent": [27, 287], "imag": [27, 32, 41, 395, 553], "uri": 27, "specifi": [27, 319], "number": 27, "worker": [27, 330], "provid": 27, "kubeconfig": 27, "other": [27, 124, 203, 293, 319, 399, 553], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36, 43, 45, 46, 120, 121, 122], "configur": [28, 29, 123, 125, 293, 296, 297, 317, 401, 553], "releas": [29, 37], "offlin": [29, 31, 553], "exist": 30, "vineyard": [30, 295, 322, 554], "lifecycl": 30, "load": [30, 124, 125, 299, 306, 315, 316, 317, 318, 319, 549, 551, 553, 554], "dataset": [30, 299, 319, 553], "anoth": 30, "session": [30, 315, 386, 547], "environ": [31, 32, 36, 41, 45, 129, 295, 299, 311], "wheel": [31, 395, 565], "download": [31, 280, 299], "destin": 31, "extract": [31, 306], "them": [31, 319], "locat": 31, "basic": [31, 306, 389], "gcc": 31, "g": [31, 381], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 565], "maco": [32, 565], "persist": [33, 553], "pv": 33, "pvc": 33, "store": [33, 203, 277, 279, 281, 284, 295, 553], "retor": 33, "framework": [34, 297, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "multi": [34, 546], "languag": [34, 283, 394], "high": [34, 309, 320, 553], "librari": [34, 309, 395], "code": [35, 37, 42, 127, 129, 398, 559], "style": [35, 37, 541, 552], "rust": 35, "script": [35, 45, 317, 560], "linter": 35, "checker": 35, "contain": [36, 45, 129, 311], "dep": [36, 45, 129, 311], "target": [36, 41, 319], "compon": 36, "individu": 36, "gsctl": [36, 45, 121, 123, 279, 560], "contribut": 37, "conduct": 37, "commun": [37, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 539], "report": [37, 291], "bug": [37, 291], "request": [37, 40, 47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270], "featur": [37, 283, 297, 309, 551, 553], "improv": 37, "document": [37, 46, 203, 277], "chang": [37, 560], "pre": 37, "commit": [37, 553], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 304], "suit": 37, "format": [37, 389, 551, 553], "right": 37, "keep": 37, "pull": [37, 40], "updat": [37, 560], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 561], "log": [38, 549, 553, 561], "command": [38, 560], "techniqu": [38, 319], "instrument": 39, "automat": 39, "error": [42, 78, 129, 559], "interact": [45, 121, 123, 127, 129, 278, 279, 280, 282, 284, 285, 289, 292, 296, 321, 324, 328, 403, 561], "manual": [45, 129, 295, 319], "via": [45, 121, 284, 298, 305], "new": [45, 124, 203, 277, 398], "import": [45, 124, 125, 203, 277, 297, 317, 553], "refer": [46, 203, 277, 292, 330, 334, 336, 545, 552], "requir": [46, 203, 277], "pip": [46, 277, 395], "setuptool": [46, 277], "endpoint": [46, 299], "For": [46, 277, 301, 307, 552], "author": [46, 47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 203, 221, 240, 241, 248, 250, 256, 270, 277], "flex": [47, 67, 75, 92, 93, 104, 108, 118, 120, 292, 334], "rest": [47, 67, 75, 92, 93, 104, 108, 118, 122, 278], "alertapi": 47, "create_alert_receiv": 47, "return": [47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270], "type": [47, 67, 75, 92, 93, 104, 108, 118, 126, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270, 300, 319, 327, 333, 389, 540, 551], "http": [47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270], "header": [47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270], "respons": [47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270], "detail": [47, 67, 75, 92, 93, 104, 108, 118, 147, 166, 167, 173, 176, 182, 196, 221, 240, 241, 248, 250, 256, 270, 297, 552], "delete_alert_message_in_batch": 47, "delete_alert_receiver_by_id": 47, "delete_alert_rule_by_id": 47, "list_alert_messag": 47, "list_alert_receiv": 47, "list_alert_rul": 47, "update_alert_message_in_batch": 47, "update_alert_receiver_by_id": 47, "update_alert_rule_by_id": 47, "baseedgetyp": [48, 131, 205], "baseedgetypevertextypepairrelationsinn": [49, 132, 206], "baseedgetypevertextypepairrelationsinnerxcsrparam": [50, 133, 207], "basepropertymeta": [51, 134, 208], "basevertextyp": [52, 135, 209], "basevertextypexcsrparam": [53, 136, 210], "columnmap": [54, 137, 211], "columnmappingcolumn": 55, "createalertreceiverrequest": 56, "createalertrulerequest": 57, "createdataloadingjobrespons": 58, "createedgetyp": [59, 138, 212], "creategraphrequest": [60, 139, 213], "creategraphrespons": [61, 140, 214], "creategraphschemarequest": [62, 141, 215], "createpropertymeta": [63, 144, 218], "createstoredprocrequest": 64, "createstoredprocrespons": 65, "createvertextyp": [66, 145, 219], "datasourceapi": 67, "bind_datasource_in_batch": 67, "get_datasource_by_id": 67, "unbind_edge_datasourc": 67, "unbind_vertex_datasourc": 67, "dataloadingjobconfig": 68, "dataloadingjobconfigedgesinn": 69, "dataloadingjobconfigloadingconfig": 70, "dataloadingjobconfigloadingconfigformat": 71, "dataloadingjobconfigverticesinn": 72, "dataloadingmrjobconfig": 73, "datetyp": [74, 146, 220], "deploymentapi": 75, "get_deployment_info": 75, "get_deployment_pod_log": 75, "get_deployment_resource_usag": 75, "get_deployment_statu": 75, "get_storage_usag": 75, "edgemap": [76, 149, 223], "edgemappingtypetriplet": [77, 153, 227], "gsdatatyp": [79, 158, 232], "getalertmessagerespons": 80, "getalertreceiverrespons": 81, "getalertrulerespons": 82, "getedgetyp": [83, 159, 233], "getgraphrespons": [84, 160, 234], "getgraphschemarespons": [85, 161, 235], "getpodlogrespons": 86, "getpropertymeta": [87, 164, 238], "getresourceusagerespons": 88, "getstorageusagerespons": 89, "getstoredprocrespons": 90, "getvertextyp": [91, 165, 239], "graphapi": 92, "create_edge_typ": 92, "create_graph": [92, 350], "create_vertex_typ": 92, "delete_edge_type_by_nam": 92, "delete_graph_by_id": 92, "delete_vertex_type_by_nam": 92, "get_graph_by_id": 92, "get_schema_by_id": 92, "import_schema_by_id": 92, "list_graph": 92, "jobapi": 93, "delete_job_by_id": 93, "get_dataloading_job_config": 93, "get_job_by_id": 93, "list_job": 93, "submit_dataloading_job": 93, "jobstatu": [94, 169, 243], "longtext": [95, 170, 244], "nodestatu": 96, "podstatu": 98, "primitivetyp": [99, 172, 247], "resourceusag": 100, "runningdeploymentinfo": 101, "runningdeploymentstatu": 102, "schemamap": [103, 177, 251], "serviceapi": 104, "get_service_status_by_id": 104, "list_service_statu": 104, "restart_servic": 104, "start_servic": 104, "stop_servic": 104, "servicestatu": [105, 183, 257], "servicestatussdkendpoint": 106, "startservicerequest": [107, 184, 258], "storedprocedureapi": 108, "create_stored_procedur": 108, "delete_stored_procedure_by_id": 108, "get_stored_procedure_by_id": 108, "list_stored_procedur": 108, "update_stored_procedure_by_id": 108, "storedproceduremeta": [109, 185, 259], "stringtyp": [110, 186, 260], "stringtypestr": [111, 187, 261], "temporaltyp": [112, 188, 262], "temporaltypetempor": [113, 189, 263], "timestamptyp": [114, 190, 264], "updatealertmessagestatusrequest": 115, "updatestoredprocrequest": 116, "uploadfilerespons": [117, 193, 267], "utilsapi": 118, "upload_fil": 118, "vertexmap": [119, 199, 273], "servic": [121, 123, 124, 129, 203, 277, 280, 282, 293, 295, 297, 553], "check": [121, 280], "statu": [121, 280], "destroi": [121, 280, 553], "instanc": [121, 280, 296, 553], "item": 123, "port": [123, 127], "avail": [123, 553], "todo": 123, "bind": [124, 555], "job": 124, "more": 124, "complic": 124, "movi": 124, "option": [124, 129], "movie_graph": 124, "yaml": 124, "job_config": 124, "column": 125, "csv": 125, "odp": 125, "tabl": [125, 286, 292, 389], "modern": 125, "breakdown": 125, "entiti": 126, "primit": 126, "string": 126, "tempor": 126, "arrai": [126, 552], "docker": [127, 129, 297, 311, 395, 565], "pack": 127, "push": 127, "registri": 127, "queri": [129, 203, 277, 279, 280, 283, 284, 289, 294, 297, 299, 302, 306, 320, 321, 391, 403, 553], "compil": [129, 281, 395, 398], "cmake": 129, "enabl": 129, "adminservic": 129, "apiresponsewithcod": [130, 204], "enum": [132, 133, 142, 158, 160, 163, 169, 172, 178, 179, 185], "relationenum": 132, "edgestoragestrategyenum": 133, "createprocedurerequest": [142, 216], "typeenum": [142, 163, 185], "createprocedurerespons": [143, 217], "edgeapi": [147, 221], "addedg": 147, "getedg": 147, "updateedg": 147, "edgedata": [148, 222], "edgemappingdestinationvertexmappingsinn": [150, 224], "edgemappingsourcevertexmappingsinn": [151, 225], "edgemappingsourcevertexmappingsinnercolumn": [152, 226], "edgerequest": [154, 228], "edgestatist": [155, 229], "fixedchar": [156, 230], "fixedcharchar": [157, 231], "primitivetypeenum": [158, 172], "storetypeenum": 160, "getgraphstatisticsrespons": [162, 236], "getprocedurerespons": [163, 237], "graphmanagementapi": [166, 240], "listgraph": [166, 240], "creategraph": [166, 240], "bulkload": [166, 240], "deletegraph": [166, 240], "getgraphmeta": [166, 240], "getgraphstatist": [166, 240], "getgraphschema": [166, 240], "jobmanagementapi": 167, "canceljob": [167, 241], "getjobbyid": [167, 241], "listjob": [167, 241], "jobrespons": [168, 242], "statusenum": 169, "proceduremanagementapi": 173, "createprocedur": [173, 248], "deleteprocedur": [173, 248], "getprocedur": [173, 248], "listprocedur": [173, 248], "updateprocedur": [173, 248], "queryrequest": [175, 249], "queryserviceapi": [176, 250], "callprocedur": [176, 250], "callprocedureoncurrentgraph": [176, 250], "schemamappingloadingconfig": [178, 252], "importoptionenum": 178, "schemamappingloadingconfigdatasourc": [179, 253], "schemeenum": 179, "schemamappingloadingconfigformat": [180, 254], "schemamappingloadingconfigxcsrparam": [181, 255], "servicemanagementapi": 182, "getservicestatu": [182, 256], "restartservic": [182, 256], "startservic": [182, 256], "stopservic": [182, 256], "typedvalu": [191, 265], "updateprocedurerequest": [192, 266], "varchar": [194, 268], "varcharvarchar": [195, 269], "vertexapi": [196, 270], "addvertex": 196, "getvertex": 196, "updatevertex": 196, "vertexdata": [197, 271], "vertexedgerequest": [198, 272], "vertexrequest": [200, 274], "vertexstatist": [201, 275], "vertextypepairstatist": [202, 276], "user": [203, 308, 329, 389, 557, 558], "procedur": [203, 277, 279, 281, 284], "cypher": [203, 277, 280, 281, 283, 298, 300, 309, 324], "delet": [203, 277, 284], "add_edg": 221, "get_edg": 221, "update_edg": 221, "gs_interact": [241, 248, 250, 256], "adminservicejobmanagementapi": 241, "modelproperti": 245, "adminserviceproceduremanagementapi": 248, "adminserviceservicemanagementapi": 256, "add_vertex": 270, "get_vertex": 270, "update_vertex": 270, "regist": [279, 398, 399], "call": [279, 284], "databas": [279, 327], "input": 279, "output": [279, 362], "encod": [279, 388, 396], "decod": 279, "interfac": [279, 309, 398, 399, 552], "simpl": 280, "glossari": [281, 322], "solid": 283, "foundat": 283, "limit": [283, 304, 306, 326, 553], "view": [284, 553], "neo4j": [284, 297, 301, 324], "nativ": [284, 297, 309], "tool": [284, 297], "introduct": [286, 297, 304, 392], "arrowfrag": 286, "0": [286, 299], "\u672f\u8bed": 286, "\u8f7d\u56fe": [286, 573], "\u521d\u59cb\u5316partition": 286, "\u6784\u5efa\u539f\u59cbarrow": 286, "shuffl": 286, "vtabl": 286, "\u6784\u5efavertex": 286, "basicarrowvertexmapbuild": 286, "5": [286, 299, 389], "\u6784\u5efafragment\u51c6\u5907": 286, "\u5904\u7406edg": 286, "basicevfragmentload": 286, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 286, "basicarrowfragmentbuild": 286, "6": 286, "fragment\u6784\u5efa": 286, "\u8bbf\u95eefragment": 286, "\u8bbf\u95ee\u9876\u70b9": 286, "\u8bbf\u95ee\u5185\u90e8\u70b9": 286, "\u8303\u56f4\u5916\u90e8\u70b9": 286, "\u8bbf\u95ee\u5168\u90e8\u70b9": 286, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 286, "\u8bbf\u95ee\u8fb9": 286, "\u8bbf\u95ee\u51fa\u8fb9": 286, "\u8bbf\u95ee\u5165\u8fb9": 286, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 286, "ask": 287, "question": [287, 299], "gle": [288, 310, 558, 561], "workload": [289, 323, 324, 325, 327, 549], "learn": [289, 292, 310, 311, 312, 316, 318, 320, 321, 325, 327, 388, 396, 404, 561], "scientist": 290, "challeng": [290, 323, 325], "handl": [290, 327], "solut": 290, "machin": [290, 316, 318], "pydata": 290, "ecosystem": [290, 301, 307], "One": [292, 321, 546], "stop": [292, 321], "larg": [292, 319, 323, 325], "scale": [292, 556], "system": [292, 327, 399, 401], "alibaba": [292, 389], "troubleshoot": [292, 553], "util": [292, 560], "indic": 292, "standalon": 293, "gie": [293, 294, 295, 296, 298, 299, 301, 302, 305, 307, 322, 561], "process": [294, 316, 317, 321, 327, 388, 553], "gopt": 297, "introduc": [297, 326], "why": [297, 326], "quick": [297, 321, 400], "ambigu": [297, 319], "pattern": [297, 306, 324], "match": [297, 304, 306, 324], "hybrid": [297, 556], "relat": [297, 306, 319, 549], "st": 297, "benchmark": [297, 328], "driver": 298, "llm": 299, "assist": 299, "set": [299, 317], "gener": [299, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539], "sentenc": 299, "construct": [300, 400], "claus": 300, "tinkerpop": [301, 302, 307, 324, 571], "gremlin": [302, 304, 305, 306, 309, 324, 384, 571], "constraint": 302, "differ": [302, 546], "inner": 302, "id": [302, 304, 306, 552], "expand": [302, 304, 484, 485, 486, 539], "filter": [302, 304, 306], "like": 302, "sql": 302, "group": [302, 304, 306], "multipl": [302, 306, 319], "valu": [302, 304, 306], "appropri": 302, "index": 302, "standard": [304, 551], "v": 304, "e": 304, "out": [304, 306, 400], "inE": [304, 306], "both": [304, 306], "outv": [304, 306], "inv": [304, 306], "otherv": [304, 306], "bothv": [304, 306], "hasid": [304, 306], "haslabel": 304, "ha": 304, "hasnot": 304, "where": [304, 306], "travers": [304, 306, 309, 313, 324, 393], "predic": 304, "dedup": [304, 306], "project": [304, 306, 335], "constant": [304, 306], "valuemap": [304, 306], "elementmap": 304, "select": [304, 306], "count": 304, "fold": [304, 306], "sum": [304, 306], "min": [304, 306], "max": [304, 306], "mean": [304, 306], "groupcount": [304, 306], "h3": 304, "order": [304, 306, 552], "statist": 304, "coin": 304, "union": 304, "ident": 304, "unfold": 304, "syntact": [304, 306], "sugar": [304, 306], "pathexpand": 304, "endv": 304, "properit": 304, "To": 304, "Will": 304, "Not": 304, "repeat": 304, "sideeffect": 304, "consol": [305, 571], "ldbc": 306, "retriev": [306, 552], "appli": [306, 325], "real": 306, "expans": 306, "mani": 306, "point": 306, "after": 306, "syntax": 306, "complex": 306, "bi2": 306, "bi3": 306, "bi4": 306, "left": 306, "part": 306, "bi11": 306, "bi14": 306, "apach": [307, 571], "eas": 309, "extens": 309, "gnn": [309, 315, 325, 400, 567], "train": [309, 315, 316, 317, 318, 325, 388], "infer": 309, "across": 309, "orchestr": 309, "paradigm": [310, 325], "egograph": 310, "base": 310, "pass": 310, "pipelin": 310, "neighborhood": 313, "neg": [313, 397], "gsl": [313, 394], "classif": [315, 316, 317, 318], "neural": [315, 325], "network": [315, 325, 539], "egographsag": 316, "pyg": [317, 318], "server": [317, 390, 560], "pod": 317, "loader": [317, 319, 402, 573], "main": 317, "evalu": [318, 378], "loaderfor": 318, "valid": 318, "graphsag": 318, "advanc": 319, "deduc": 319, "when": 319, "put": [319, 389], "togeth": [319, 389], "panda": [319, 573], "numpi": [319, 573], "variant": 319, "tip": 319, "reduc": 319, "consumpt": 319, "unifi": [320, 552], "platform": 320, "disaggreg": 320, "divers": 320, "bi": 320, "qp": 320, "task": 321, "gart": [322, 549], "grin": [322, 552], "graphar": [322, 551], "groot": [322, 553, 561], "gum": 322, "maxgraph": 322, "deprec": 322, "v6d": 322, "gaia": 322, "pegasu": 322, "can": [323, 325], "do": [323, 325], "typic": 325, "ar": 326, "case": 326, "posit": 327, "compar": 327, "variou": 327, "result": [328, 546], "gpu": 328, "reproduc": 328, "fragment": 330, "appasset": 331, "javaapp": 331, "cython": 333, "about": 335, "javadoc": 336, "declar": 338, "load_app": 339, "dag_util": [340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "add_column": 340, "add_labels_to_graph": 341, "arrow_to_dynam": 342, "bind_app": 343, "clear_edg": 344, "clear_graph": 345, "context_to_datafram": 346, "context_to_numpi": 347, "copy_graph": 348, "create_app": 349, "create_graph_view": 351, "create_load": 352, "create_subgraph": 353, "create_unload_op": 354, "dynamic_to_arrow": 355, "get_context_data": 356, "graph_to_datafram": 357, "graph_to_numpi": 358, "gremlin_to_subgraph": 359, "modify_edg": 360, "modify_vertic": 361, "project_arrow_property_graph": 363, "project_to_simpl": 364, "report_graph": 365, "run_app": 366, "to_data_sink": 367, "to_direct": [368, 436], "to_undirect": [369, 437], "to_vineyard_datafram": 370, "to_vineyard_tensor": 371, "unload_app": 372, "unload_context": 373, "unload_graph": 374, "__init__": 375, "as_op_def": 376, "eval": 377, "signatur": 380, "get_default_sess": 382, "graphlearn": 383, "has_default_sess": 385, "set_opt": 387, "loss": 388, "weight": 389, "maxcomput": 389, "describ": 390, "topologi": 390, "stand": 390, "alon": 390, "mode": [390, 560], "tensorflow": 395, "git": 395, "clone": 398, "bytestreamaccessfil": 399, "structuredaccessfil": 399, "writablefil": 399, "scheme": 399, "gl": 400, "self": 406, "loop": 406, "freez": [406, 418], "add_cycl": 407, "add_path": 408, "add_star": 409, "all_neighbor": 410, "common_neighbor": 411, "create_empty_copi": 412, "degree_histogram": 414, "densiti": 415, "induced_subgraph": 419, "info": 420, "is_direct": 421, "is_empti": 422, "is_frozen": 423, "is_negatively_weight": 424, "is_weight": 425, "nodes_with_selfloop": 428, "non_edg": 429, "non_neighbor": 430, "number_of_edg": 431, "number_of_nod": 432, "number_of_selfloop": 433, "selfloop_edg": 434, "atla": [438, 439, 539], "graph_atla": 438, "graph_atlas_g": 439, "classic": [440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 539], "balanced_tre": 440, "barbell_graph": 441, "binomial_tre": 442, "circulant_graph": 443, "circular_ladder_graph": 444, "complete_graph": 445, "complete_multipartite_graph": 446, "cycle_graph": 447, "dorogovtsev_goltsev_mendes_graph": 448, "empty_graph": 449, "full_rary_tre": 450, "ladder_graph": 451, "lollipop_graph": 452, "null_graph": 453, "path_graph": 454, "star_graph": 455, "trivial_graph": 456, "turan_graph": 457, "wheel_graph": 458, "lfr_benchmark_graph": 459, "caveman_graph": 460, "connected_caveman_graph": 461, "gaussian_random_partition_graph": 462, "planted_partition_graph": 463, "random_partition_graph": 464, "relaxed_caveman_graph": 465, "ring_of_cliqu": 466, "stochastic_block_model": 467, "windmill_graph": 468, "degree_seq": [469, 470, 471, 472, 473, 474, 475], "configuration_model": 469, "degree_sequence_tre": 470, "directed_configuration_model": 471, "directed_havel_hakimi_graph": 472, "expected_degree_graph": 473, "havel_hakimi_graph": 474, "random_degree_sequence_graph": 475, "gn_graph": 476, "gnc_graph": 477, "gnr_graph": 478, "random_k_out_graph": 479, "scale_free_graph": 480, "duplic": [481, 482, 539], "duplication_divergence_graph": 481, "partial_duplication_graph": 482, "ego": [483, 539], "ego_graph": 483, "chordal_cycle_graph": 484, "margulis_gabber_galil_graph": 485, "paley_graph": 486, "geometr": [487, 488, 489, 490, 491, 539], "geographical_threshold_graph": 487, "random_geometric_graph": 488, "soft_random_geometric_graph": 489, "thresholded_random_geometric_graph": 490, "waxman_graph": 491, "harary_graph": [492, 493], "hkn_harary_graph": 492, "hnm_harary_graph": 493, "intersect": [494, 495, 496, 539], "general_random_intersection_graph": 494, "k_random_intersection_graph": 495, "uniform_random_intersection_graph": 496, "joint_degree_seq": [497, 498, 499, 500], "directed_joint_degree_graph": 497, "is_valid_directed_joint_degre": 498, "is_valid_joint_degre": 499, "joint_degree_graph": 500, "mycielski": [501, 502, 539], "mycielski_graph": 501, "mycielskian": 502, "nonisomorphic_tre": [503, 504], "number_of_nonisomorphic_tre": 504, "small": [505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 539], "lcf_graph": 505, "bull_graph": 506, "chvatal_graph": 507, "cubical_graph": 508, "desargues_graph": 509, "diamond_graph": 510, "dodecahedral_graph": 511, "frucht_graph": 512, "heawood_graph": 513, "house_graph": 514, "house_x_graph": 515, "icosahedral_graph": 516, "krackhardt_kite_graph": 517, "make_small_graph": 518, "moebius_kantor_graph": 519, "octahedral_graph": 520, "pappus_graph": 521, "petersen_graph": 522, "sedgewick_maze_graph": 523, "tetrahedral_graph": 524, "truncated_cube_graph": 525, "truncated_tetrahedron_graph": 526, "tutte_graph": 527, "social": [528, 529, 530, 531, 539], "davis_southern_women_graph": 528, "florentine_families_graph": 529, "karate_club_graph": 530, "les_miserables_graph": 531, "spectral_graph_forg": 532, "sudoku": [533, 539], "sudoku_graph": 533, "tree": [534, 535, 539], "prefix_tre": 534, "random_tre": 535, "triad": [536, 539], "triad_graph": 536, "internet_as_graph": 537, "random_internet_as_graph": 537, "stochast": [538, 539], "stochastic_graph": 538, "diverg": 539, "sequenc": 539, "AS": 539, "spectral": 539, "non": 539, "isomorph": 539, "joint": 539, "harari": 539, "digraph": 540, "read": 542, "list": [542, 552], "adjac": 542, "selector": 546, "tensorcontext": 546, "vertexdatacontext": 546, "labeledvertexdatacontext": 546, "vertexpropertycontext": 546, "labeledvertexpropertycontext": 546, "method": 546, "dimension": 546, "rang": 546, "resourc": 548, "bridg": 549, "gap": 549, "oltp": 549, "inform": 551, "save": 551, "predefin": 552, "macro": 552, "partit": [552, 553, 556], "strategi": 552, "guidelin": 552, "handler": 552, "iter": 552, "master": 552, "mirror": 552, "complet": 552, "natur": 552, "trait": 552, "known": 553, "artifacthub": 553, "directori": 553, "common": 553, "modifi": 553, "j": 553, "realtim": 553, "restart": 553, "secondari": 553, "trace": 553, "In": 554, "immut": 554, "repartit": 556, "fennel": 556, "xtrapulp": 556, "line": 560, "scope": 560, "monitor": 562, "\u56fe\u5206\u6790\u5f15\u64ce": 563, "\u5185\u7f6e\u7b97\u6cd5": 563, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 563, "\u4f7f\u7528": 563, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 563, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 563, "\u4e2d\u7684\u51fd\u6570": 563, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 563, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 563, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 563, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 563, "\u90e8\u7f72": 564, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 564, "\u5728aw": 564, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 564, "\u672c\u5730\u90e8\u7f72graphscop": 564, "\u5f00\u53d1\u8005\u6307\u5357": 565, "\u57fa\u4e8e": [565, 570], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 565, "\u6784\u5efa": 565, "\u4ee3\u7801\u98ce\u683c": 565, "\u5e38\u89c1\u95ee\u9898": 566, "\u5feb\u901f\u4e0a\u624b": 567, "\u793a\u4f8b": 567, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 567, "\u521b\u5efa\u4f1a\u8bdd": 567, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 567, "\u56fe\u5206\u6790": 567, "\u56fe\u795e\u7ecf\u7f51\u7edc": 567, "\u5173\u95ed\u4f1a\u8bdd": 567, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 568, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 568, "\u6295\u5f71": 568, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 568, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 568, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 569, "\u76ee\u5f55": [569, 574], "\u53c2\u8003": 569, "\u7d22\u5f15": 569, "\u5b89\u88c5": 570, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 570, "\u5ba2\u6237\u7aef": 570, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 571, "\u5229\u7528python": 571, "\u8fde\u63a5graphscop": 571, "\u5229\u7528java": 571, "\u5f00\u53d1\u63a7\u5236\u53f0": 571, "gremlin\u7f16\u7a0b\u5165\u95e8": 571, "101": 571, "\u56fe\u6570\u636e\u6a21\u578b": 571, "\u67e5\u8be2\u8bed\u8a00": 571, "\u4e00\u4e2a\u4f8b\u5b50": 571, "gremlin\u517c\u5bb9\u6027": 571, "\u5bf9\u6bd4tinkerpop": 571, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 571, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 571, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 571, "\u5df2\u77e5\u9650\u5236": 571, "\u56fe\u5b66\u4e60\u5f15\u64ce": 572, "\u56fe\u5b66\u4e60\u6a21\u578b": 572, "\u6570\u636e\u6a21\u578b": 572, "\u7f16\u7801\u5668": 572, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 572, "\u91c7\u6837": 572, "\u56fe\u6570\u636e\u6d41": 572, "\u6a21\u578b": 572, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 572, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 573, "\u624b\u52a8\u914d\u7f6e\u56fe": 573, "vid_field": 573, "src_label": 573, "dst_label": 573, "src_field": 573, "dst_field": 573, "\u9ad8\u7ea7\u7528\u6cd5": 573, "\u6ca1\u6709\u6b67\u4e49\u65f6": 573, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 573, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 573, "\u591a\u79cd\u8fb9\u5173\u7cfb": 573, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 573, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 573, "\u5b8c\u6574\u7684\u793a\u4f8b": 573, "\u4ece": 573, "\u6216": 573, "\u4e2d\u8f7d\u56fe": 573, "\u7684\u53d8\u79cd": 573, "\u5165\u95e8\u6559\u7a0b": 574}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [282, "prerequisites"], [293, "prerequisites"], [553, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null], [34, "design-of-analytical-engine"]], "Dev and Test": [[4, "dev-and-test"], [45, "dev-and-test"], [129, "dev-and-test"], [295, "dev-and-test"], [311, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"], [45, "understanding-the-codebase"], [129, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"], [129, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [297, "motivation"], [320, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [283, "overview"], [292, null], [396, "overview"], [553, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [46, "getting-started"], [121, "getting-started"], [203, "getting-started"], [277, "getting-started"], [280, "getting-started"], [296, "getting-started"], [297, "getting-started"], [312, "getting-started"], [321, "getting-started"], [550, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [203, "installation"], [282, "installation"], [296, "installation"], [297, "installation"], [312, "installation"], [553, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [296, "whats-the-next"], [312, "whats-the-next"], [560, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [303, "guide-and-examples"], [314, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with GitHub Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Get from Maven Central Repository": [[17, "get-from-maven-central-repository"]], "Build from source": [[17, "build-from-source"], [395, "build-from-source"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with GitHub Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetworkX APIs": [[19, "tutorial-graph-algorithms-with-networkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetworkX APIs": [[20, "tutorial-graph-operations-with-networkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [319, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on GitHub": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [41, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"], [123, "configuration"], [297, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [41, "dev-environment"], [45, "dev-environment"], [129, "dev-environment"], [295, "dev-environment"], [311, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [45, "install-deps-on-local"], [311, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [41, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "Build gsctl": [[36, "build-gsctl"], [45, "build-gsctl"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [539, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to instrument": [[39, "how-to-instrument"]], "Java": [[39, "java"], [553, "java"], [553, "id2"]], "Automatic instrument": [[39, "automatic-instrument"]], "How to Submit Pull-requests": [[40, "how-to-submit-pull-requests"]], "How to Test": [[41, "how-to-test"], [311, "how-to-test"]], "Test GraphScope on local": [[41, "test-graphscope-on-local"]], "Run tests": [[41, "run-tests"], [41, "id1"]], "Test GraphScope on Kubernetes cluster": [[41, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[41, "build-images"]], "Error Codes": [[42, "error-codes"], [559, "error-codes"]], "Coordinator": [[43, "coordinator"]], "Development guide": [[44, "development-guide"], [128, "development-guide"]], "Develop with dev containers": [[45, "develop-with-dev-containers"]], "Testing with Interactive": [[45, "testing-with-interactive"]], "Preparation": [[45, "preparation"], [121, "preparation"], [280, "preparation"]], "Launching Coordinator": [[45, "launching-coordinator"]], "Run Test Script": [[45, "run-test-script"]], "Running tests manually via gsctl": [[45, "running-tests-manually-via-gsctl"]], "Create a New Graph": [[45, "create-a-new-graph"]], "Import Graph Data": [[45, "import-graph-data"]], "Coordinator Python SDK Reference": [[46, "coordinator-python-sdk-reference"]], "Requirements.": [[46, "requirements"], [277, "requirements"]], "Installation & Usage": [[46, "installation-usage"], [277, "installation-usage"]], "pip install": [[46, "pip-install"], [277, "pip-install"]], "Setuptools": [[46, "setuptools"], [277, "setuptools"]], "Tests": [[46, "tests"], [277, "tests"]], "Documentation for API Endpoints": [[46, "documentation-for-api-endpoints"]], "Documentation For Models": [[46, "documentation-for-models"]], "Documentation For Authorization": [[46, "documentation-for-authorization"], [277, "documentation-for-authorization"]], "Author": [[46, "author"]], "graphscope.flex.rest.AlertApi": [[47, "graphscope-flex-rest-alertapi"]], "create_alert_receiver": [[47, "create-alert-receiver"]], "Example": [[47, "example"], [47, "id1"], [47, "id7"], [47, "id13"], [47, "id19"], [47, "id25"], [47, "id31"], [47, "id37"], [47, "id43"], [47, "id49"], [48, "example"], [49, "example"], [50, "example"], [51, "example"], [52, "example"], [53, "example"], [54, "example"], [55, "example"], [56, "example"], [57, "example"], [58, "example"], [59, "example"], [60, "example"], [61, "example"], [62, "example"], [63, "example"], [64, "example"], [65, "example"], [66, "example"], [67, "example"], [67, "id1"], [67, "id7"], [67, "id13"], [68, "example"], [69, "example"], [70, "example"], [71, "example"], [72, "example"], [73, "example"], [74, "example"], [75, "example"], [75, "id1"], [75, "id7"], [75, "id13"], [75, "id19"], [76, "example"], [77, "example"], [78, "example"], [79, "example"], [80, "example"], [81, "example"], [82, "example"], [83, "example"], [84, "example"], [85, "example"], [86, "example"], [87, "example"], [88, "example"], [89, "example"], [90, "example"], [91, "example"], [92, "example"], [92, "id1"], [92, "id7"], [92, "id13"], [92, "id19"], [92, "id25"], [92, "id31"], [92, "id37"], [92, "id43"], [92, "id49"], [93, "example"], [93, "id1"], [93, "id7"], [93, "id13"], [93, "id19"], [94, "example"], [95, "example"], [96, "example"], [97, "example"], [98, "example"], [99, "example"], [100, "example"], [101, "example"], [102, "example"], [103, "example"], [104, "example"], [104, "id1"], [104, "id7"], [104, "id13"], [104, "id19"], [105, "example"], [106, "example"], [107, "example"], [108, "example"], [108, "id1"], [108, "id7"], [108, "id13"], [108, "id19"], [109, "example"], [110, "example"], [111, "example"], [112, "example"], [113, "example"], [114, "example"], [115, "example"], [116, "example"], [117, "example"], [118, "example"], [119, "example"], [147, "example"], [147, "id1"], [147, "id7"], [166, "example"], [166, "id1"], [166, "id7"], [166, "id13"], [166, "id19"], [166, "id25"], [166, "id31"], [167, "example"], [167, "id1"], [167, "id7"], [173, "example"], [173, "id1"], [173, "id7"], [173, "id13"], [173, "id19"], [176, "example"], [176, "id1"], [182, "example"], [182, "id1"], [182, "id7"], [182, "id13"], [196, "example"], [196, "id1"], [196, "id7"], [204, "example"], [205, "example"], [206, "example"], [207, "example"], [208, "example"], [209, "example"], [210, "example"], [211, "example"], [212, "example"], [213, "example"], [214, "example"], [215, "example"], [216, "example"], [217, "example"], [218, "example"], [219, "example"], [220, "example"], [221, "example"], [221, "id1"], [221, "id7"], [222, "example"], [223, "example"], [224, "example"], [225, "example"], [226, "example"], [227, "example"], [228, "example"], [229, "example"], [230, "example"], [231, "example"], [232, "example"], [233, "example"], [234, "example"], [235, "example"], [236, "example"], [237, "example"], [238, "example"], [239, "example"], [240, "example"], [240, "id1"], [240, "id7"], [240, "id13"], [240, "id19"], [240, "id25"], [240, "id31"], [241, "example"], [241, "id1"], [241, "id7"], [242, "example"], [243, "example"], [244, "example"], [245, "example"], [246, "example"], [247, "example"], [248, "example"], [248, "id1"], [248, "id7"], [248, "id13"], [248, "id19"], [249, "example"], [250, "example"], [250, "id1"], [251, "example"], [252, "example"], [253, "example"], [254, "example"], [255, "example"], [256, "example"], [256, "id1"], [256, "id7"], [256, "id13"], [257, "example"], [258, "example"], [259, "example"], [260, "example"], [261, "example"], [262, "example"], [263, "example"], [264, "example"], [265, "example"], [266, "example"], [267, "example"], [268, "example"], [269, "example"], [270, "example"], [270, "id1"], [270, "id7"], [271, "example"], [272, "example"], [273, "example"], [274, "example"], [275, "example"], [276, "example"]], "Parameters": [[47, "parameters"], [47, "id2"], [47, "id8"], [47, "id14"], [47, "id20"], [47, "id26"], [47, "id32"], [47, "id38"], [47, "id44"], [47, "id50"], [67, "parameters"], [67, "id2"], [67, "id8"], [67, "id14"], [75, "parameters"], [75, "id2"], [75, "id8"], [75, "id14"], [75, "id20"], [92, "parameters"], [92, "id2"], [92, "id8"], [92, "id14"], [92, "id20"], [92, "id26"], [92, "id32"], [92, "id38"], [92, "id44"], [92, "id50"], [93, "parameters"], [93, "id2"], [93, "id8"], [93, "id14"], [93, "id20"], [104, "parameters"], [104, "id2"], [104, "id8"], [104, "id14"], [104, "id20"], [108, "parameters"], [108, "id2"], [108, "id8"], [108, "id14"], [108, "id20"], [118, "parameters"], [147, "parameters"], [147, "id2"], [147, "id8"], [166, "parameters"], [166, "id2"], [166, "id8"], [166, "id14"], [166, "id20"], [166, "id26"], [166, "id32"], [167, "parameters"], [167, "id2"], [167, "id8"], [173, "parameters"], [173, "id2"], [173, "id8"], [173, "id14"], [173, "id20"], [176, "parameters"], [176, "id2"], [182, "parameters"], [182, "id2"], [182, "id8"], [182, "id14"], [196, "parameters"], [196, "id2"], [196, "id8"], [221, "parameters"], [221, "id2"], [221, "id8"], [240, "parameters"], [240, "id2"], [240, "id8"], [240, "id14"], [240, "id20"], [240, "id26"], [240, "id32"], [241, "parameters"], [241, "id2"], [241, "id8"], [248, "parameters"], [248, "id2"], [248, "id8"], [248, "id14"], [248, "id20"], [250, "parameters"], [250, "id2"], [256, "parameters"], [256, "id2"], [256, "id8"], [256, "id14"], [270, "parameters"], [270, "id2"], [270, "id8"]], "Return type": [[47, "return-type"], [47, "id3"], [47, "id9"], [47, "id15"], [47, "id21"], [47, "id27"], [47, "id33"], [47, "id39"], [47, "id45"], [47, "id51"], [67, "return-type"], [67, "id3"], [67, "id9"], [67, "id15"], [75, "return-type"], [75, "id3"], [75, "id9"], [75, "id15"], [75, "id21"], [92, "return-type"], [92, "id3"], [92, "id9"], [92, "id15"], [92, "id21"], [92, "id27"], [92, "id33"], [92, "id39"], [92, "id45"], [92, "id51"], [93, "return-type"], [93, "id3"], [93, "id9"], [93, "id15"], [93, "id21"], [104, "return-type"], [104, "id3"], [104, "id9"], [104, "id15"], [104, "id21"], [108, "return-type"], [108, "id3"], [108, "id9"], [108, "id15"], [108, "id21"], [118, "return-type"], [147, "return-type"], [147, "id3"], [147, "id9"], [166, "return-type"], [166, "id3"], [166, "id9"], [166, "id15"], [166, "id21"], [166, "id27"], [166, "id33"], [167, "return-type"], [167, "id3"], [167, "id9"], [173, "return-type"], [173, "id3"], [173, "id9"], [173, "id15"], [173, "id21"], [176, "return-type"], [176, "id3"], [182, "return-type"], [182, "id3"], [182, "id9"], [182, "id15"], [196, "return-type"], [196, "id3"], [196, "id9"], [221, "return-type"], [221, "id3"], [221, "id9"], [240, "return-type"], [240, "id3"], [240, "id9"], [240, "id15"], [240, "id21"], [240, "id27"], [240, "id33"], [241, "return-type"], [241, "id3"], [241, "id9"], [248, "return-type"], [248, "id3"], [248, "id9"], [248, "id15"], [248, "id21"], [250, "return-type"], [250, "id3"], [256, "return-type"], [256, "id3"], [256, "id9"], [256, "id15"], [270, "return-type"], [270, "id3"], [270, "id9"]], "Authorization": [[47, "authorization"], [47, "id4"], [47, "id10"], [47, "id16"], [47, "id22"], [47, "id28"], [47, "id34"], [47, "id40"], [47, "id46"], [47, "id52"], [67, "authorization"], [67, "id4"], [67, "id10"], [67, "id16"], [75, "authorization"], [75, "id4"], [75, "id10"], [75, "id16"], [75, "id22"], [92, "authorization"], [92, "id4"], [92, "id10"], [92, "id16"], [92, "id22"], [92, "id28"], [92, "id34"], [92, "id40"], [92, "id46"], [92, "id52"], [93, "authorization"], [93, "id4"], [93, "id10"], [93, "id16"], [93, "id22"], [104, "authorization"], [104, "id4"], [104, "id10"], [104, "id16"], [104, "id22"], [108, "authorization"], [108, "id4"], [108, "id10"], [108, "id16"], [108, "id22"], [118, "authorization"], [147, "authorization"], [147, "id4"], [147, "id10"], [166, "authorization"], [166, "id4"], [166, "id10"], [166, "id16"], [166, "id22"], [166, "id28"], [166, "id34"], [167, "authorization"], [167, "id4"], [167, "id10"], [173, "authorization"], [173, "id4"], [173, "id10"], [173, "id16"], [173, "id22"], [176, "authorization"], [176, "id4"], [182, "authorization"], [182, "id4"], [182, "id10"], [182, "id16"], [196, "authorization"], [196, "id4"], [196, "id10"], [221, "authorization"], [221, "id4"], [221, "id10"], [240, "authorization"], [240, "id4"], [240, "id10"], [240, "id16"], [240, "id22"], [240, "id28"], [240, "id34"], [241, "authorization"], [241, "id4"], [241, "id10"], [248, "authorization"], [248, "id4"], [248, "id10"], [248, "id16"], [248, "id22"], [250, "authorization"], [250, "id4"], [256, "authorization"], [256, "id4"], [256, "id10"], [256, "id16"], [270, "authorization"], [270, "id4"], [270, "id10"]], "HTTP request headers": [[47, "http-request-headers"], [47, "id5"], [47, "id11"], [47, "id17"], [47, "id23"], [47, "id29"], [47, "id35"], [47, "id41"], [47, "id47"], [47, "id53"], [67, "http-request-headers"], [67, "id5"], [67, "id11"], [67, "id17"], [75, "http-request-headers"], [75, "id5"], [75, "id11"], [75, "id17"], [75, "id23"], [92, "http-request-headers"], [92, "id5"], [92, "id11"], [92, "id17"], [92, "id23"], [92, "id29"], [92, "id35"], [92, "id41"], [92, "id47"], [92, "id53"], [93, "http-request-headers"], [93, "id5"], [93, "id11"], [93, "id17"], [93, "id23"], [104, "http-request-headers"], [104, "id5"], [104, "id11"], [104, "id17"], [104, "id23"], [108, "http-request-headers"], [108, "id5"], [108, "id11"], [108, "id17"], [108, "id23"], [118, "http-request-headers"], [147, "http-request-headers"], [147, "id5"], [147, "id11"], [166, "http-request-headers"], [166, "id5"], [166, "id11"], [166, "id17"], [166, "id23"], [166, "id29"], [166, "id35"], [167, "http-request-headers"], [167, "id5"], [167, "id11"], [173, "http-request-headers"], [173, "id5"], [173, "id11"], [173, "id17"], [173, "id23"], [176, "http-request-headers"], [176, "id5"], [182, "http-request-headers"], [182, "id5"], [182, "id11"], [182, "id17"], [196, "http-request-headers"], [196, "id5"], [196, "id11"], [221, "http-request-headers"], [221, "id5"], [221, "id11"], [240, "http-request-headers"], [240, "id5"], [240, "id11"], [240, "id17"], [240, "id23"], [240, "id29"], [240, "id35"], [241, "http-request-headers"], [241, "id5"], [241, "id11"], [248, "http-request-headers"], [248, "id5"], [248, "id11"], [248, "id17"], [248, "id23"], [250, "http-request-headers"], [250, "id5"], [256, "http-request-headers"], [256, "id5"], [256, "id11"], [256, "id17"], [270, "http-request-headers"], [270, "id5"], [270, "id11"]], "HTTP response details": [[47, "http-response-details"], [47, "id6"], [47, "id12"], [47, "id18"], [47, "id24"], [47, "id30"], [47, "id36"], [47, "id42"], [47, "id48"], [47, "id54"], [67, "http-response-details"], [67, "id6"], [67, "id12"], [67, "id18"], [75, "http-response-details"], [75, "id6"], [75, "id12"], [75, "id18"], [75, "id24"], [92, "http-response-details"], [92, "id6"], [92, "id12"], [92, "id18"], [92, "id24"], [92, "id30"], [92, "id36"], [92, "id42"], [92, "id48"], [92, "id54"], [93, "http-response-details"], [93, "id6"], [93, "id12"], [93, "id18"], [93, "id24"], [104, "http-response-details"], [104, "id6"], [104, "id12"], [104, "id18"], [104, "id24"], [108, "http-response-details"], [108, "id6"], [108, "id12"], [108, "id18"], [108, "id24"], [118, "http-response-details"], [147, "http-response-details"], [147, "id6"], [147, "id12"], [166, "http-response-details"], [166, "id6"], [166, "id12"], [166, "id18"], [166, "id24"], [166, "id30"], [166, "id36"], [167, "http-response-details"], [167, "id6"], [167, "id12"], [173, "http-response-details"], [173, "id6"], [173, "id12"], [173, "id18"], [173, "id24"], [176, "http-response-details"], [176, "id6"], [182, "http-response-details"], [182, "id6"], [182, "id12"], [182, "id18"], [196, "http-response-details"], [196, "id6"], [196, "id12"], [221, "http-response-details"], [221, "id6"], [221, "id12"], [240, "http-response-details"], [240, "id6"], [240, "id12"], [240, "id18"], [240, "id24"], [240, "id30"], [240, "id36"], [241, "http-response-details"], [241, "id6"], [241, "id12"], [248, "http-response-details"], [248, "id6"], [248, "id12"], [248, "id18"], [248, "id24"], [250, "http-response-details"], [250, "id6"], [256, "http-response-details"], [256, "id6"], [256, "id12"], [256, "id18"], [270, "http-response-details"], [270, "id6"], [270, "id12"]], "delete_alert_message_in_batch": [[47, "delete-alert-message-in-batch"]], "delete_alert_receiver_by_id": [[47, "delete-alert-receiver-by-id"]], "delete_alert_rule_by_id": [[47, "delete-alert-rule-by-id"]], "list_alert_messages": [[47, "list-alert-messages"]], "list_alert_receivers": [[47, "list-alert-receivers"]], "list_alert_rules": [[47, "list-alert-rules"]], "update_alert_message_in_batch": [[47, "update-alert-message-in-batch"]], "update_alert_receiver_by_id": [[47, "update-alert-receiver-by-id"]], "update_alert_rule_by_id": [[47, "update-alert-rule-by-id"]], "BaseEdgeType": [[48, "baseedgetype"], [131, "baseedgetype"], [205, "baseedgetype"]], "Properties": [[48, "properties"], [49, "properties"], [50, "properties"], [51, "properties"], [52, "properties"], [53, "properties"], [54, "properties"], [55, "properties"], [56, "properties"], [57, "properties"], [58, "properties"], [59, "properties"], [60, "properties"], [61, "properties"], [62, "properties"], [63, "properties"], [64, "properties"], [65, "properties"], [66, "properties"], [68, "properties"], [69, "properties"], [70, "properties"], [71, "properties"], [72, "properties"], [73, "properties"], [74, "properties"], [76, "properties"], [77, "properties"], [78, "properties"], [79, "properties"], [80, "properties"], [81, "properties"], [82, "properties"], [83, "properties"], [84, "properties"], [85, "properties"], [86, "properties"], [87, "properties"], [88, "properties"], [89, "properties"], [90, "properties"], [91, "properties"], [94, "properties"], [95, "properties"], [96, "properties"], [97, "properties"], [98, "properties"], [99, "properties"], [100, "properties"], [101, "properties"], [102, "properties"], [103, "properties"], [105, "properties"], [106, "properties"], [107, "properties"], [109, "properties"], [110, "properties"], [111, "properties"], [112, "properties"], [113, "properties"], [114, "properties"], [115, "properties"], [116, "properties"], [117, "properties"], [119, "properties"], [130, "properties"], [131, "properties"], [132, "properties"], [133, "properties"], [134, "properties"], [135, "properties"], [136, "properties"], [137, "properties"], [138, "properties"], [139, "properties"], [140, "properties"], [141, "properties"], [142, "properties"], [143, "properties"], [144, "properties"], [145, "properties"], [146, "properties"], [148, "properties"], [149, "properties"], [150, "properties"], [151, "properties"], [152, "properties"], [153, "properties"], [154, "properties"], [155, "properties"], [156, "properties"], [157, "properties"], [158, "properties"], [159, "properties"], [160, "properties"], [161, "properties"], [162, "properties"], [163, "properties"], [164, "properties"], [165, "properties"], [168, "properties"], [169, "properties"], [170, "properties"], [171, "properties"], [172, "properties"], [174, "properties"], [175, "properties"], [177, "properties"], [178, "properties"], [179, "properties"], [180, "properties"], [181, "properties"], [183, "properties"], [184, "properties"], [185, "properties"], [186, "properties"], [187, "properties"], [188, "properties"], [189, "properties"], [190, "properties"], [191, "properties"], [192, "properties"], [193, "properties"], [194, "properties"], [195, "properties"], [197, "properties"], [198, "properties"], [199, "properties"], [200, "properties"], [201, "properties"], [202, "properties"], [204, "properties"], [205, "properties"], [206, "properties"], [207, "properties"], [208, "properties"], [209, "properties"], [210, "properties"], [211, "properties"], [212, "properties"], [213, "properties"], [214, "properties"], [215, "properties"], [216, "properties"], [217, "properties"], [218, "properties"], [219, "properties"], [220, "properties"], [222, "properties"], [223, "properties"], [224, "properties"], [225, "properties"], [226, "properties"], [227, "properties"], [228, "properties"], [229, "properties"], [230, "properties"], [231, "properties"], [232, "properties"], [233, "properties"], [234, "properties"], [235, "properties"], [236, "properties"], [237, "properties"], [238, "properties"], [239, "properties"], [242, "properties"], [243, "properties"], [244, "properties"], [245, "properties"], [246, "properties"], [247, "properties"], [249, "properties"], [251, "properties"], [252, "properties"], [253, "properties"], [254, "properties"], [255, "properties"], [257, "properties"], [258, "properties"], [259, "properties"], [260, "properties"], [261, "properties"], [262, "properties"], [263, "properties"], [264, "properties"], [265, "properties"], [266, "properties"], [267, "properties"], [268, "properties"], [269, "properties"], [271, "properties"], [272, "properties"], [273, "properties"], [274, "properties"], [275, "properties"], [276, "properties"]], "BaseEdgeTypeVertexTypePairRelationsInner": [[49, "baseedgetypevertextypepairrelationsinner"], [132, "baseedgetypevertextypepairrelationsinner"], [206, "baseedgetypevertextypepairrelationsinner"]], "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams": [[50, "baseedgetypevertextypepairrelationsinnerxcsrparams"], [133, "baseedgetypevertextypepairrelationsinnerxcsrparams"], [207, "baseedgetypevertextypepairrelationsinnerxcsrparams"]], "BasePropertyMeta": [[51, "basepropertymeta"], [134, "basepropertymeta"], [208, "basepropertymeta"]], "BaseVertexType": [[52, "basevertextype"], [135, "basevertextype"], [209, "basevertextype"]], "BaseVertexTypeXCsrParams": [[53, "basevertextypexcsrparams"], [136, "basevertextypexcsrparams"], [210, "basevertextypexcsrparams"]], "ColumnMapping": [[54, "columnmapping"], [137, "columnmapping"], [211, "columnmapping"]], "ColumnMappingColumn": [[55, "columnmappingcolumn"]], "CreateAlertReceiverRequest": [[56, "createalertreceiverrequest"]], "CreateAlertRuleRequest": [[57, "createalertrulerequest"]], "CreateDataloadingJobResponse": [[58, "createdataloadingjobresponse"]], "CreateEdgeType": [[59, "createedgetype"], [138, "createedgetype"], [212, "createedgetype"]], "CreateGraphRequest": [[60, "creategraphrequest"], [139, "creategraphrequest"], [213, "creategraphrequest"]], "CreateGraphResponse": [[61, "creategraphresponse"], [140, "creategraphresponse"], [214, "creategraphresponse"]], "CreateGraphSchemaRequest": [[62, "creategraphschemarequest"], [141, "creategraphschemarequest"], [215, "creategraphschemarequest"]], "CreatePropertyMeta": [[63, "createpropertymeta"], [144, "createpropertymeta"], [218, "createpropertymeta"]], "CreateStoredProcRequest": [[64, "createstoredprocrequest"]], "CreateStoredProcResponse": [[65, "createstoredprocresponse"]], "CreateVertexType": [[66, "createvertextype"], [145, "createvertextype"], [219, "createvertextype"]], "graphscope.flex.rest.DataSourceApi": [[67, "graphscope-flex-rest-datasourceapi"]], "bind_datasource_in_batch": [[67, "bind-datasource-in-batch"]], "get_datasource_by_id": [[67, "get-datasource-by-id"]], "unbind_edge_datasource": [[67, "unbind-edge-datasource"]], "unbind_vertex_datasource": [[67, "unbind-vertex-datasource"]], "DataloadingJobConfig": [[68, "dataloadingjobconfig"]], "DataloadingJobConfigEdgesInner": [[69, "dataloadingjobconfigedgesinner"]], "DataloadingJobConfigLoadingConfig": [[70, "dataloadingjobconfigloadingconfig"]], "DataloadingJobConfigLoadingConfigFormat": [[71, "dataloadingjobconfigloadingconfigformat"]], "DataloadingJobConfigVerticesInner": [[72, "dataloadingjobconfigverticesinner"]], "DataloadingMRJobConfig": [[73, "dataloadingmrjobconfig"]], "DateType": [[74, "datetype"], [146, "datetype"], [220, "datetype"]], "graphscope.flex.rest.DeploymentApi": [[75, "graphscope-flex-rest-deploymentapi"]], "get_deployment_info": [[75, "get-deployment-info"]], "get_deployment_pod_log": [[75, "get-deployment-pod-log"]], "get_deployment_resource_usage": [[75, "get-deployment-resource-usage"]], "get_deployment_status": [[75, "get-deployment-status"]], "get_storage_usage": [[75, "get-storage-usage"]], "EdgeMapping": [[76, "edgemapping"], [149, "edgemapping"], [223, "edgemapping"]], "EdgeMappingTypeTriplet": [[77, "edgemappingtypetriplet"], [153, "edgemappingtypetriplet"], [227, "edgemappingtypetriplet"]], "Error": [[78, "error"]], "GSDataType": [[79, "gsdatatype"], [158, "gsdatatype"], [232, "gsdatatype"]], "GetAlertMessageResponse": [[80, "getalertmessageresponse"]], "GetAlertReceiverResponse": [[81, "getalertreceiverresponse"]], "GetAlertRuleResponse": [[82, "getalertruleresponse"]], "GetEdgeType": [[83, "getedgetype"], [159, "getedgetype"], [233, "getedgetype"]], "GetGraphResponse": [[84, "getgraphresponse"], [160, "getgraphresponse"], [234, "getgraphresponse"]], "GetGraphSchemaResponse": [[85, "getgraphschemaresponse"], [161, "getgraphschemaresponse"], [235, "getgraphschemaresponse"]], "GetPodLogResponse": [[86, "getpodlogresponse"]], "GetPropertyMeta": [[87, "getpropertymeta"], [164, "getpropertymeta"], [238, "getpropertymeta"]], "GetResourceUsageResponse": [[88, "getresourceusageresponse"]], "GetStorageUsageResponse": [[89, "getstorageusageresponse"]], "GetStoredProcResponse": [[90, "getstoredprocresponse"]], "GetVertexType": [[91, "getvertextype"], [165, "getvertextype"], [239, "getvertextype"]], "graphscope.flex.rest.GraphApi": [[92, "graphscope-flex-rest-graphapi"]], "create_edge_type": [[92, "create-edge-type"]], "create_graph": [[92, "create-graph"]], "create_vertex_type": [[92, "create-vertex-type"]], "delete_edge_type_by_name": [[92, "delete-edge-type-by-name"]], "delete_graph_by_id": [[92, "delete-graph-by-id"]], "delete_vertex_type_by_name": [[92, "delete-vertex-type-by-name"]], "get_graph_by_id": [[92, "get-graph-by-id"]], "get_schema_by_id": [[92, "get-schema-by-id"]], "import_schema_by_id": [[92, "import-schema-by-id"]], "list_graphs": [[92, "list-graphs"]], "graphscope.flex.rest.JobApi": [[93, "graphscope-flex-rest-jobapi"]], "delete_job_by_id": [[93, "delete-job-by-id"]], "get_dataloading_job_config": [[93, "get-dataloading-job-config"]], "get_job_by_id": [[93, "get-job-by-id"]], "list_jobs": [[93, "list-jobs"]], "submit_dataloading_job": [[93, "submit-dataloading-job"]], "JobStatus": [[94, "jobstatus"], [169, "jobstatus"], [243, "jobstatus"]], "LongText": [[95, "longtext"], [170, "longtext"], [244, "longtext"]], "NodeStatus": [[96, "nodestatus"]], "Parameter": [[97, "parameter"], [171, "parameter"], [246, "parameter"]], "PodStatus": [[98, "podstatus"]], "PrimitiveType": [[99, "primitivetype"], [172, "primitivetype"], [247, "primitivetype"]], "ResourceUsage": [[100, "resourceusage"]], "RunningDeploymentInfo": [[101, "runningdeploymentinfo"]], "RunningDeploymentStatus": [[102, "runningdeploymentstatus"]], "SchemaMapping": [[103, "schemamapping"], [177, "schemamapping"], [251, "schemamapping"]], "graphscope.flex.rest.ServiceApi": [[104, "graphscope-flex-rest-serviceapi"]], "get_service_status_by_id": [[104, "get-service-status-by-id"]], "list_service_status": [[104, "list-service-status"]], "restart_service": [[104, "restart-service"]], "start_service": [[104, "start-service"]], "stop_service": [[104, "stop-service"]], "ServiceStatus": [[105, "servicestatus"], [183, "servicestatus"], [257, "servicestatus"]], "ServiceStatusSdkEndpoints": [[106, "servicestatussdkendpoints"]], "StartServiceRequest": [[107, "startservicerequest"], [184, "startservicerequest"], [258, "startservicerequest"]], "graphscope.flex.rest.StoredProcedureApi": [[108, "graphscope-flex-rest-storedprocedureapi"]], "create_stored_procedure": [[108, "create-stored-procedure"]], "delete_stored_procedure_by_id": [[108, "delete-stored-procedure-by-id"]], "get_stored_procedure_by_id": [[108, "get-stored-procedure-by-id"]], "list_stored_procedures": [[108, "list-stored-procedures"]], "update_stored_procedure_by_id": [[108, "update-stored-procedure-by-id"]], "StoredProcedureMeta": [[109, "storedproceduremeta"], [185, "storedproceduremeta"], [259, "storedproceduremeta"]], "StringType": [[110, "stringtype"], [186, "stringtype"], [260, "stringtype"]], "StringTypeString": [[111, "stringtypestring"], [187, "stringtypestring"], [261, "stringtypestring"]], "TemporalType": [[112, "temporaltype"], [188, "temporaltype"], [262, "temporaltype"]], "TemporalTypeTemporal": [[113, "temporaltypetemporal"], [189, "temporaltypetemporal"], [263, "temporaltypetemporal"]], "TimeStampType": [[114, "timestamptype"], [190, "timestamptype"], [264, "timestamptype"]], "UpdateAlertMessageStatusRequest": [[115, "updatealertmessagestatusrequest"]], "UpdateStoredProcRequest": [[116, "updatestoredprocrequest"]], "UploadFileResponse": [[117, "uploadfileresponse"], [193, "uploadfileresponse"], [267, "uploadfileresponse"]], "graphscope.flex.rest.UtilsApi": [[118, "graphscope-flex-rest-utilsapi"]], "upload_file": [[118, "upload-file"]], "VertexMapping": [[119, "vertexmapping"], [199, "vertexmapping"], [273, "vertexmapping"]], "FLEX Coordinator Python SDK": [[120, "flex-coordinator-python-sdk"]], "Connect to Coordinator Service(Interactive) via gsctl": [[121, "connect-to-coordinator-service-interactive-via-gsctl"]], "Check Service Status": [[121, "check-service-status"], [280, "check-service-status"]], "Close the connection": [[121, "close-the-connection"], [280, "close-the-connection"]], "Destroy the Interactive Instance": [[121, "destroy-the-interactive-instance"], [280, "destroy-the-interactive-instance"]], "Coordinator RESTFul API": [[122, "coordinator-restful-api"]], "Configurable Items for Deploying Interactive with gsctl": [[123, "configurable-items-for-deploying-interactive-with-gsctl"]], "Ports": [[123, "ports"]], "Service Configuration": [[123, "service-configuration"]], "Customizing Your Service Configuration": [[123, "customizing-your-service-configuration"]], "Sample Configuration": [[123, "sample-configuration"]], "Available Configurations": [[123, "available-configurations"]], "TODOs": [[123, "todos"]], "Using Custom Graph": [[124, "using-custom-graph"]], "Step 1: Create a New Graph": [[124, "step-1-create-a-new-graph"]], "Step 2: Import Graph Data": [[124, "step-2-import-graph-data"]], "Bind Data Source": [[124, "bind-data-source"]], "Create Data Loading Job": [[124, "create-data-loading-job"]], "Step 3: Start the Service with the New Graph": [[124, "step-3-start-the-service-with-the-new-graph"]], "Step 4: A More Complicated Movies Graph(optional)": [[124, "step-4-a-more-complicated-movies-graph-optional"]], "movie_graph.yaml": [[124, "movie-graph-yaml"]], "import.yaml": [[124, "import-yaml"]], "job_config.yaml": [[124, "job-config-yaml"]], "Try other graphs": [[124, "try-other-graphs"]], "Data Import Configuration": [[125, "data-import-configuration"]], "Supported data source": [[125, "supported-data-source"]], "Column mapping": [[125, "column-mapping"]], "Import from CSV": [[125, "import-from-csv"]], "Import from ODPS Table": [[125, "import-from-odps-table"]], "Sample Configuration for loading \u201cModern\u201d Graph from csv files": [[125, "sample-configuration-for-loading-modern-graph-from-csv-files"]], "Sample configuration for loading \u201cModern Graph\u201d from odps tables": [[125, "sample-configuration-for-loading-modern-graph-from-odps-tables"]], "Configuration Breakdown": [[125, "configuration-breakdown"]], "Loading Configurations": [[125, "loading-configurations"]], "Vertex Mappings": [[125, "vertex-mappings"]], "Edge Mappings": [[125, "edge-mappings"]], "Data Model": [[126, "data-model"]], "Graph Data": [[126, "graph-data"]], "Entity Data": [[126, "entity-data"]], "Primitive Types": [[126, "primitive-types"]], "String Types": [[126, "string-types"]], "Temporal types": [[126, "temporal-types"]], "Array Types": [[126, "array-types"]], "Deployment": [[127, "deployment"], [297, "deployment"]], "Deploy with Docker": [[127, "deploy-with-docker"]], "Customizing Ports": [[127, "customizing-ports"]], "Deploy with Helm": [[127, "deploy-with-helm"]], "Deploy from Source Code": [[127, "deploy-from-source-code"]], "Packing Interactive from Source": [[127, "packing-interactive-from-source"]], "Deploying Customized Built Interactive": [[127, "deploying-customized-built-interactive"]], "Pushing to Your Own Registry": [[127, "pushing-to-your-own-registry"]], "Connecting and Using": [[127, "connecting-and-using"]], "Install Deps on Local": [[129, "install-deps-on-local"]], "Develop on Docker Container": [[129, "develop-on-docker-container"]], "Interactive Query Engine": [[129, "interactive-query-engine"]], "Dependency Graph": [[129, "dependency-graph"]], "Compiler": [[129, "compiler"]], "Build Interactive": [[129, "build-interactive"]], "CMake options": [[129, "cmake-options"]], "Starting Service Manually": [[129, "starting-service-manually"]], "Enable AdminService": [[129, "enable-adminservice"]], "Start Compiler Service": [[129, "start-compiler-service"]], "Error Code": [[129, "error-code"]], "APIResponseWithCode": [[130, "apiresponsewithcode"], [204, "apiresponsewithcode"]], "Enum: RelationEnum": [[132, "enum-relationenum"]], "Enum: EdgeStorageStrategyEnum": [[133, "enum-edgestoragestrategyenum"]], "CreateProcedureRequest": [[142, "createprocedurerequest"], [216, "createprocedurerequest"]], "Enum: TypeEnum": [[142, "enum-typeenum"], [163, "enum-typeenum"], [185, "enum-typeenum"]], "CreateProcedureResponse": [[143, "createprocedureresponse"], [217, "createprocedureresponse"]], "EdgeAPi": [[147, "edgeapi"]], "addEdge": [[147, "addedge"]], "getEdge": [[147, "getedge"]], "updateEdge": [[147, "updateedge"]], "EdgeData": [[148, "edgedata"], [222, "edgedata"]], "EdgeMappingDestinationVertexMappingsInner": [[150, "edgemappingdestinationvertexmappingsinner"], [224, "edgemappingdestinationvertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInner": [[151, "edgemappingsourcevertexmappingsinner"], [225, "edgemappingsourcevertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInnerColumn": [[152, "edgemappingsourcevertexmappingsinnercolumn"], [226, "edgemappingsourcevertexmappingsinnercolumn"]], "EdgeRequest": [[154, "edgerequest"], [228, "edgerequest"]], "EdgeStatistics": [[155, "edgestatistics"], [229, "edgestatistics"]], "FixedChar": [[156, "fixedchar"], [230, "fixedchar"]], "FixedCharChar": [[157, "fixedcharchar"], [231, "fixedcharchar"]], "Enum: PrimitiveTypeEnum": [[158, "enum-primitivetypeenum"], [172, "enum-primitivetypeenum"]], "Enum: StoreTypeEnum": [[160, "enum-storetypeenum"]], "GetGraphStatisticsResponse": [[162, "getgraphstatisticsresponse"], [236, "getgraphstatisticsresponse"]], "GetProcedureResponse": [[163, "getprocedureresponse"], [237, "getprocedureresponse"]], "GraphManagementApi": [[166, "graphmanagementapi"], [240, "graphmanagementapi"]], "ListGraphs": [[166, "listgraphs"], [240, "listgraphs"]], "CreateGraph": [[166, "creategraph"], [240, "creategraph"]], "BulkLoading": [[166, "bulkloading"], [240, "bulkloading"]], "DeleteGraph": [[166, "deletegraph"], [240, "deletegraph"]], "GetGraphMeta": [[166, "getgraphmeta"], [240, "getgraphmeta"]], "GetGraphStatistic": [[166, "getgraphstatistic"]], "GetGraphSchema": [[166, "getgraphschema"], [240, "getgraphschema"]], "JobManagementApi": [[167, "jobmanagementapi"]], "CancelJob": [[167, "canceljob"], [241, "canceljob"]], "GetJobById": [[167, "getjobbyid"], [241, "getjobbyid"]], "ListJobs": [[167, "listjobs"], [241, "listjobs"]], "JobResponse": [[168, "jobresponse"], [242, "jobresponse"]], "Enum: StatusEnum": [[169, "enum-statusenum"]], "ProcedureManagementApi": [[173, "proceduremanagementapi"]], "CreateProcedure": [[173, "createprocedure"], [248, "createprocedure"]], "DeleteProcedure": [[173, "deleteprocedure"], [248, "deleteprocedure"]], "GetProcedure": [[173, "getprocedure"], [248, "getprocedure"]], "ListProcedures": [[173, "listprocedures"], [248, "listprocedures"]], "UpdateProcedure": [[173, "updateprocedure"], [248, "updateprocedure"]], "Property": [[174, "property"], [552, "property"]], "QueryRequest": [[175, "queryrequest"], [249, "queryrequest"]], "QueryServiceApi": [[176, "queryserviceapi"]], "CallProcedure": [[176, "callprocedure"], [250, "callprocedure"]], "CallProcedureOnCurrentGraph": [[176, "callprocedureoncurrentgraph"], [250, "callprocedureoncurrentgraph"]], "SchemaMappingLoadingConfig": [[178, "schemamappingloadingconfig"], [252, "schemamappingloadingconfig"]], "Enum: ImportOptionEnum": [[178, "enum-importoptionenum"]], "SchemaMappingLoadingConfigDataSource": [[179, "schemamappingloadingconfigdatasource"], [253, "schemamappingloadingconfigdatasource"]], "Enum: SchemeEnum": [[179, "enum-schemeenum"]], "SchemaMappingLoadingConfigFormat": [[180, "schemamappingloadingconfigformat"], [254, "schemamappingloadingconfigformat"]], "SchemaMappingLoadingConfigXCsrParams": [[181, "schemamappingloadingconfigxcsrparams"], [255, "schemamappingloadingconfigxcsrparams"]], "ServiceManagementApi": [[182, "servicemanagementapi"]], "GetServiceStatus": [[182, "getservicestatus"], [256, "getservicestatus"]], "RestartService": [[182, "restartservice"], [256, "restartservice"]], "StartService": [[182, "startservice"], [256, "startservice"]], "StopService": [[182, "stopservice"], [256, "stopservice"]], "TypedValue": [[191, "typedvalue"], [265, "typedvalue"]], "UpdateProcedureRequest": [[192, "updateprocedurerequest"], [266, "updateprocedurerequest"]], "VarChar": [[194, "varchar"], [268, "varchar"]], "VarCharVarChar": [[195, "varcharvarchar"], [269, "varcharvarchar"]], "VertexApi": [[196, "vertexapi"], [270, "vertexapi"]], "addVertex": [[196, "addvertex"]], "getVertex": [[196, "getvertex"]], "updateVertex": [[196, "updatevertex"]], "VertexData": [[197, "vertexdata"], [271, "vertexdata"]], "VertexEdgeRequest": [[198, "vertexedgerequest"], [272, "vertexedgerequest"]], "VertexRequest": [[200, "vertexrequest"], [274, "vertexrequest"]], "VertexStatistics": [[201, "vertexstatistics"], [275, "vertexstatistics"]], "VertexTypePairStatistics": [[202, "vertextypepairstatistics"], [276, "vertextypepairstatistics"]], "Java SDK Reference": [[203, "java-sdk-reference"]], "Requirements": [[203, "requirements"]], "Maven users": [[203, "maven-users"]], "Others": [[203, "others"]], "Connect and submit a query": [[203, "connect-and-submit-a-query"], [277, "connect-and-submit-a-query"]], "Create a new graph": [[203, "create-a-new-graph"], [277, "create-a-new-graph"]], "Import data to the graph": [[203, "import-data-to-the-graph"], [277, "import-data-to-the-graph"]], "Create a stored procedure": [[203, "create-a-stored-procedure"], [277, "create-a-stored-procedure"]], "Start the query service on the new graph": [[203, "start-the-query-service-on-the-new-graph"], [277, "start-the-query-service-on-the-new-graph"]], "Submit queries to the new graph": [[203, "submit-queries-to-the-new-graph"], [277, "submit-queries-to-the-new-graph"]], "Submit cypher queries": [[203, "submit-cypher-queries"], [277, "submit-cypher-queries"]], "Query the stored procedure": [[203, "query-the-stored-procedure"]], "Delete the graph": [[203, "delete-the-graph"], [277, "delete-the-graph"]], "Documentation for Service APIs": [[203, "documentation-for-service-apis"], [277, "documentation-for-service-apis"]], "Documentation for Data Structures": [[203, "documentation-for-data-structures"], [277, "documentation-for-data-structures"]], "Documentation for Authorization": [[203, "documentation-for-authorization"]], "EdgeApi": [[221, "edgeapi"]], "add_edge": [[221, "add-edge"]], "get_edge": [[221, "get-edge"]], "update_edge": [[221, "update-edge"]], "GetGraphStatistics": [[240, "getgraphstatistics"]], "gs_interactive.AdminServiceJobManagementApi": [[241, "gs-interactive-adminservicejobmanagementapi"]], "ModelProperty": [[245, "modelproperty"]], "gs_interactive.AdminServiceProcedureManagementApi": [[248, "gs-interactive-adminserviceproceduremanagementapi"]], "gs_interactive.QueryServiceApi": [[250, "gs-interactive-queryserviceapi"]], "gs_interactive.AdminServiceServiceManagementApi": [[256, "gs-interactive-adminserviceservicemanagementapi"]], "add_vertex": [[270, "add-vertex"]], "get_vertex": [[270, "get-vertex"]], "update_vertex": [[270, "update-vertex"]], "Python SDK Reference": [[277, "python-sdk-reference"]], "Interactive RESTFul API": [[278, "interactive-restful-api"]], "Create c++ Stored Procedures on GraphScope Interactive": [[279, "create-c-stored-procedures-on-graphscope-interactive"]], "Getting Started.": [[279, "getting-started"]], "Define a C++ Stored Procedure": [[279, "define-a-c-stored-procedure"]], "Register and Call the stored procedure": [[279, "register-and-call-the-stored-procedure"]], "Python SDK": [[279, "python-sdk"]], "Java SDK": [[279, "java-sdk"]], "gsctl": [[279, "gsctl"]], "Graph Database Engine": [[279, "graph-database-engine"]], "Query Input and Output": [[279, "query-input-and-output"]], "Encoder/Decoder": [[279, "encoder-decoder"]], "Programming Interface": [[279, "programming-interface"], [398, "programming-interface"]], "Install Interactive": [[280, "install-interactive"]], "Connect to Interactive Service": [[280, "connect-to-interactive-service"]], "Submit Cypher Queries": [[280, "submit-cypher-queries"]], "Download cypher-shell": [[280, "download-cypher-shell"]], "Connect to the Service": [[280, "connect-to-the-service"]], "Run a Simple Query": [[280, "run-a-simple-query"]], "Glossary": [[281, "glossary"], [322, "glossary"]], "Stored Procedure.": [[281, "stored-procedure"]], "Cypher.": [[281, "cypher"]], "Compile.": [[281, "compile"]], "Install and Deploy Interactive": [[282, "install-and-deploy-interactive"]], "Service Accessibility": [[282, "service-accessibility"]], "A Solid Foundation": [[283, "a-solid-foundation"]], "Key Features": [[283, "key-features"], [309, "key-features"]], "Property Graph Model and Graph Queries": [[283, "property-graph-model-and-graph-queries"]], "The Cypher Query Language": [[283, "the-cypher-query-language"]], "Limitations": [[283, "limitations"], [304, "limitations"]], "Stored Procedures": [[284, "stored-procedures"]], "Define a Stored Procedure": [[284, "define-a-stored-procedure"]], "Create a Stored Procedure": [[284, "create-a-stored-procedure"]], "Delete a Stored Procedures": [[284, "delete-a-stored-procedures"]], "Viewing Stored Procedures": [[284, "viewing-stored-procedures"]], "Querying Stored Procedures": [[284, "querying-stored-procedures"]], "Call the Stored Procedure via Interactive SDK": [[284, "call-the-stored-procedure-via-interactive-sdk"]], "Call the Stored Procedure via Neo4j-native Tools": [[284, "call-the-stored-procedure-via-neo4j-native-tools"]], "GraphScope Interactive": [[285, "graphscope-interactive"]], "Introduction to ArrowFragment": [[286, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[286, "id1"]], "1. \u8f7d\u56fe": [[286, "id2"]], "1.1 \u521d\u59cb\u5316partitioner": [[286, "partitioner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[286, "arrow-table"]], "1.3. Shuffle vtable": [[286, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[286, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[286, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[286, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[286, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[286, "id3"]], "2. \u8bbf\u95eeFragment": [[286, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[286, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[286, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[286, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[286, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[286, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[286, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[286, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[286, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[286, "id13"]], "Frequently Asked Questions": [[287, "frequently-asked-questions"]], "Getting Started for GLE": [[288, "getting-started-for-gle"]], "Graph Workloads": [[289, "graph-workloads"]], "Graph Analytics": [[289, "graph-analytics"]], "Graph Interactive Query": [[289, "graph-interactive-query"]], "Graph Learning": [[289, "graph-learning"], [404, "graph-learning"]], "GraphScope for Data Scientists": [[290, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[290, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[290, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[290, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[290, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[291, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[292, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[292, null]], "GraphScope Flex": [[292, null]], "Graph Analytical Engine": [[292, null], [328, "graph-analytical-engine"]], "Graph Interactive Engine": [[292, null], [328, "graph-interactive-engine"]], "Graph Learning Engine": [[292, null]], "Storage Engine": [[292, null]], "Troubleshooting & Utilities": [[292, null]], "Development": [[292, null]], "Reference": [[292, null], [552, "reference"]], "Indices and tables": [[292, "indices-and-tables"]], "Standalone Deployment for GIE": [[293, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[293, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[293, "remove-the-gie-service"]], "Using Your Own Data": [[293, "using-your-own-data"]], "Deploy on a Cluster": [[293, "deploy-on-a-cluster"]], "Other Useful Configurations": [[293, "other-useful-configurations"]], "Design of GIE": [[294, "design-of-gie"]], "The Motivations": [[294, "the-motivations"]], "The Architecture": [[294, "the-architecture"]], "Query Processing": [[294, "query-processing"]], "Build GIE with Vineyard Store on Local": [[295, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[295, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[295, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[296, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[296, "customize-configurations-for-gie-instance"]], "GOpt: A Graph-Native Query Optimization Framework": [[297, "gopt-a-graph-native-query-optimization-framework"]], "Introducing GOpt": [[297, "introducing-gopt"]], "Core Features": [[297, "core-features"]], "Why GOpt": [[297, "why-gopt"]], "Quick Start": [[297, "quick-start"], [400, "quick-start"]], "Local Setup": [[297, "local-setup"]], "Docker Setup": [[297, "docker-setup"]], "Importing Data": [[297, "importing-data"]], "Starting Neo4j Service": [[297, "starting-neo4j-service"]], "Analyzing Queries": [[297, "analyzing-queries"]], "Ambiguous Pattern": [[297, "ambiguous-pattern"]], "Graph Pattern Matching": [[297, "graph-pattern-matching"]], "Hybrid Graph Relational": [[297, "hybrid-graph-relational"]], "ST Path": [[297, "st-path"]], "Tutorial": [[297, "tutorial"]], "Benchmark Tools": [[297, "benchmark-tools"]], "Steps": [[297, "steps"]], "Integration of GOpt": [[297, "integration-of-gopt"]], "Design of GOpt": [[297, "design-of-gopt"]], "Detailed Introduction": [[297, "detailed-introduction"]], "GIE for Cypher": [[298, "gie-for-cypher"]], "Connecting via Python Driver": [[298, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[298, "connecting-via-cypher-shell"]], "Using LLM as an Assistant in GIE": [[299, "using-llm-as-an-assistant-in-gie"]], "0. Environment": [[299, "environment"]], "1. Download Datasets": [[299, "download-datasets"]], "2. Load the Graph": [[299, "load-the-graph"]], "3. Set Endpoint and API Key": [[299, "set-endpoint-and-api-key"]], "4. Generate Graph Query Sentence from Questions": [[299, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[299, "execute-generated-query-sentence-with-gie"]], "Cypher Support": [[300, "cypher-support"]], "Data Types": [[300, "data-types"], [551, "data-types"]], "Property Types": [[300, "property-types"]], "Structural types": [[300, "structural-types"]], "Constructed Types": [[300, "constructed-types"]], "Operators": [[300, "operators"]], "Clause": [[300, "clause"]], "Neo4j Ecosystem": [[301, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[301, null], [307, null]], "FAQs for GIE Gremlin Usage": [[302, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[302, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[302, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[302, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[302, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[302, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[302, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[302, "group-by-multiple-keys"]], "group by multiple values:": [[302, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[302, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[302, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[302, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[304, "supported-gremlin-steps"]], "Introduction": [[304, "introduction"]], "Standard Steps": [[304, "standard-steps"]], "Source": [[304, "source"]], "V()": [[304, "v"]], "E()": [[304, "e"]], "Expand": [[304, "expand"]], "outE()": [[304, "oute"]], "inE()": [[304, "ine"]], "bothE()": [[304, "bothe"]], "out()": [[304, "out"], [304, "id7"]], "in()": [[304, "in"], [304, "id8"]], "both()": [[304, "both"], [304, "id9"]], "outV()": [[304, "outv"]], "inV()": [[304, "inv"]], "otherV()": [[304, "otherv"]], "bothV()": [[304, "bothv"]], "Filter": [[304, "filter"]], "hasId()": [[304, "hasid"], [306, "hasid"]], "hasLabel()": [[304, "haslabel"]], "has()": [[304, "has"]], "hasNot()": [[304, "hasnot"]], "is()": [[304, "is"]], "where(traversal)": [[304, "where-traversal"]], "where(predicate)": [[304, "where-predicate"]], "not(traversal)": [[304, "not-traversal"]], "dedup()": [[304, "dedup"], [306, "dedup"]], "Project": [[304, "project"]], "id()": [[304, "id"]], "label()": [[304, "label"]], "constant()": [[304, "constant"], [306, "constant"]], "valueMap()": [[304, "valuemap"], [306, "valuemap"]], "values()": [[304, "values"]], "elementMap()": [[304, "elementmap"]], "select()": [[304, "select"], [306, "select"]], "Aggregate": [[304, "aggregate"]], "count()": [[304, "count"]], "fold()": [[304, "fold"], [306, "fold"]], "sum()": [[304, "sum"]], "min()": [[304, "min"]], "max()": [[304, "max"]], "mean()": [[304, "mean"]], "group()": [[304, "group"], [306, "group"]], "groupCount()": [[304, "groupcount"], [306, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[304, "order"]], "order()": [[304, "id1"]], "Statistics": [[304, "statistics"]], "limit()": [[304, "limit"]], "coin()": [[304, "coin"]], "sample()": [[304, "sample"]], "Union": [[304, "union"]], "union()": [[304, "id2"]], "Match": [[304, "match"]], "match()": [[304, "id3"]], "Subgraph": [[304, "subgraph"]], "subgraph()": [[304, "id4"]], "Identity": [[304, "identity"]], "identity()": [[304, "id5"]], "Unfold": [[304, "unfold"]], "unfold()": [[304, "id6"], [304, "id10"]], "Syntactic Sugars": [[304, "syntactic-sugars"]], "PathExpand": [[304, "pathexpand"]], "endV()": [[304, "endv"]], "Getting Properites": [[304, "getting-properites"]], "Expression": [[304, "expression"]], "Running Examples": [[304, "running-examples"]], "Aggregate (Group)": [[304, "aggregate-group"]], "To be Supported": [[304, "to-be-supported"]], "path()": [[304, "path"]], "local()": [[304, "local"]], "Will Not be Supported": [[304, "will-not-be-supported"]], "repeat()": [[304, "repeat"]], "properties()": [[304, "properties"]], "sideEffect": [[304, "sideeffect"]], "branch": [[304, "branch"]], "GIE for Gremlin": [[305, "gie-for-gremlin"]], "Connecting via Python SDK": [[305, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[305, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[305, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[306, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[306, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[306, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[306, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[306, "apply-some-filters"]], "Extract Property Values": [[306, "extract-property-values"]], "Real Applications": [[306, "real-applications"], [306, "id1"]], "Basic Traversal Query": [[306, "basic-traversal-query"]], "Expansion": [[306, "expansion"]], "out(), in() and both()": [[306, "out-in-and-both"]], "outE(), inE() and bothE()": [[306, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[306, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[306, "multiple-expansion-steps"]], "Expansion from many starting points": [[306, "expansion-from-many-starting-points"]], "Filter & Expansion": [[306, "filter-expansion"]], "Apply filters after expansion": [[306, "apply-filters-after-expansion"]], "Expansion as filters": [[306, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[306, "path-expansion-syntactic-sugar"]], "Pattern Match": [[306, "pattern-match"]], "Relational Operations": [[306, "relational-operations"]], "Filter Steps": [[306, "filter-steps"]], "where()": [[306, "where"]], "Project Steps": [[306, "project-steps"]], "id() and label()": [[306, "id-and-label"]], "Aggregate Steps": [[306, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[306, "sum-min-max-and-mean"]], "Order Step": [[306, "order-step"]], "Limit Step": [[306, "limit-step"]], "Expression(Syntax Sugar)": [[306, "expression-syntax-sugar"]], "Complex Queries": [[306, "complex-queries"]], "LDBC BI2": [[306, "ldbc-bi2"]], "LDBC BI3": [[306, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[306, "ldbc-bi4-left-part"]], "LDBC BI11": [[306, "ldbc-bi11"]], "LDBC BI14": [[306, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[307, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[308, "tutorials-for-java-users"]], "Ease-of-use: Python Interface": [[309, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[309, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[309, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[309, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[309, "gnn-training-inference"]], "Cloud Native Design": [[309, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[309, "across-engine-workflow-orchestration"]], "Design of GLE": [[310, "design-of-gle"]], "Model Paradigms": [[310, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[310, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[310, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[310, "pipeline-for-learning"]], "Dev on docker container": [[311, "dev-on-docker-container"]], "Build Learning Engine": [[311, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[312, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[313, "graph-sampling"], [392, "graph-sampling"]], "Graph Traversal": [[313, "graph-traversal"], [324, "graph-traversal"], [393, "graph-traversal"]], "Neighborhood Sampling": [[313, "neighborhood-sampling"]], "Subgraph Sampling": [[313, "subgraph-sampling"], [325, "subgraph-sampling"]], "Negative Sampling": [[313, "negative-sampling"], [397, "negative-sampling"]], "GSL": [[313, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[315, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[315, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[315, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[316, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[316, "load-graph"], [318, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[316, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[316, "launch-the-learning-engine"], [318, "launch-the-learning-engine"]], "Train the Model": [[316, "train-the-model"]], "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster": [[317, "tutorial-training-a-node-classification-model-pyg-on-a-k8s-cluster"]], "Set parameters & load graph": [[317, "set-parameters-load-graph"]], "Launch the Server Engine": [[317, "launch-the-server-engine"]], "Configure the parameters for client pods": [[317, "configure-the-parameters-for-client-pods"]], "Write training and testing script": [[317, "write-training-and-testing-script"]], "Import packages": [[317, "import-packages"]], "Define test function": [[317, "define-test-function"]], "Define the loader and training process": [[317, "define-the-loader-and-training-process"]], "main function": [[317, "main-function"]], "Run the script": [[317, "run-the-script"]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[318, "tutorial-training-a-node-classification-model-pyg-on-your-local-machine"]], "Define the evaluation function": [[318, "define-the-evaluation-function"]], "Create neighbor loaderfor training, testing and validation": [[318, "create-neighbor-loaderfor-training-testing-and-validation"]], "Define the PyG GraphSage Model and optimizer": [[318, "define-the-pyg-graphsage-model-and-optimizer"]], "Train and test": [[318, "train-and-test"]], "Loading Graphs": [[319, "loading-graphs"]], "Load Built-in Datasets": [[319, "load-built-in-datasets"]], "Loading Your Own Datasets": [[319, "loading-your-own-datasets"]], "Adding Vertices": [[319, "adding-vertices"]], "Advanced Usages": [[319, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[319, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[319, "deduce-vertex-from-edges"]], "Multiple relations": [[319, "multiple-relations"]], "Specify data types of properties manually": [[319, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[319, "other-parameters-of-graph"]], "Putting them Together": [[319, "putting-them-together"]], "Loading From Pandas or Numpy": [[319, "loading-from-pandas-or-numpy"]], "From Pandas": [[319, "from-pandas"]], "From Numpy": [[319, "from-numpy"]], "Loader Variants": [[319, "loader-variants"]], "Techniques targeting at large graph": [[319, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[319, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[320, "design-of-graphscope"]], "Unified Graph Computing Platform": [[320, "unified-graph-computing-platform"]], "Application layer": [[320, "application-layer"]], "Execution engine layer": [[320, "execution-engine-layer"]], "Storage layer": [[320, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[320, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[320, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[320, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[320, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[320, "graphscope-for-learning"]], "One-stop Graph Processing": [[321, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[321, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[321, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[321, "graph-learning-quick-start"]], "FLASH": [[322, "flash"]], "GRAPE": [[322, "grape"]], "GAE": [[322, "gae"]], "GART": [[322, "gart"]], "GRIN": [[322, "grin"]], "GraphAr": [[322, "graphar"]], "Groot": [[322, "groot"]], "GUM": [[322, "gum"]], "MaxGraph (deprecated)": [[322, "maxgraph-deprecated"]], "Vineyard, or v6d": [[322, "vineyard-or-v6d"]], "GIE": [[322, "gie"]], "GAIA": [[322, "gaia"]], "Pegasus": [[322, "pegasus"]], "Ingress": [[322, "ingress"]], "PIE-model": [[322, "pie-model"]], "Graph Analytics Workloads": [[323, "graph-analytics-workloads"]], "What is Graph Analytics": [[323, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[323, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[323, "what-can-graphscope-do"], [325, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[324, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[324, "tinkerpop-and-gremlin"]], "Pattern Matching": [[324, "pattern-matching"], [324, "id1"]], "Neo4j and Cypher": [[324, "neo4j-and-cypher"]], "Graph Learning Workloads": [[325, "graph-learning-workloads"]], "What is Graph Neural Network": [[325, "what-is-graph-neural-network"]], "Typical GNN Models": [[325, "typical-gnn-models"]], "Paradigm of Model Training": [[325, "paradigm-of-model-training"]], "Steps of Model Training": [[325, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[325, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[326, "introducing-graphscope"]], "What is GraphScope": [[326, "what-is-graphscope"]], "Why use GraphScope": [[326, "why-use-graphscope"]], "What are the Use Cases": [[326, "what-are-the-use-cases"]], "What are the Limitations": [[326, "what-are-the-limitations"]], "What are the Next": [[326, "what-are-the-next"]], "Positioning of GraphScope": [[327, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[327, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[327, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[327, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[327, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[328, "performance-and-benchmark"]], "Results": [[328, "results"]], "Performance on GPUs": [[328, "performance-on-gpus"]], "Reproducing the results": [[328, "reproducing-the-results"]], "Tutorials for Python Users": [[329, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[330, "analytical-engine-api-reference"]], "Analytical Engine": [[330, "analytical-engine"]], "Fragments in GraphScope": [[330, "fragments-in-graphscope"]], "Analytical Apps": [[330, "analytical-apps"]], "Analytical Workers": [[330, "analytical-workers"]], "App\u2019s Context": [[330, "app-s-context"]], "Analytical App": [[331, "analytical-app"]], "AppAssets": [[331, "appassets"]], "JavaApp": [[331, "javaapp"]], "App object": [[331, "app-object"]], "Functions": [[331, "functions"], [333, "functions"], [406, "functions"]], "BuiltIn apps": [[331, "builtin-apps"]], "Context": [[332, "context"]], "Context object": [[332, "context-object"]], "Cython SDK API": [[333, "cython-sdk-api"]], "Pregel": [[333, "pregel"]], "PIE": [[333, "pie"]], "GraphScope types": [[333, "graphscope-types"]], "Flex API Reference": [[334, "flex-api-reference"]], "About Grape JDK": [[335, "about-grape-jdk"]], "Project Structure": [[335, "project-structure"]], "Building from source": [[335, "building-from-source"]], "Java Reference (javadoc)": [[336, "java-reference-javadoc"]], "graphscope.Vertex": [[337, "graphscope-vertex"]], "graphscope.declare": [[338, "graphscope-declare"]], "graphscope.framework.app.load_app": [[339, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[340, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[341, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[342, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[343, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[344, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[345, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[346, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[347, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[348, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[349, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[350, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[351, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[352, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[353, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[354, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[355, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[356, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[357, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[358, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[359, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[360, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[361, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[362, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[363, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[364, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[365, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[366, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[367, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[368, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[369, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[370, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[371, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[372, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[373, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[374, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[375, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[376, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[377, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[378, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[379, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[380, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[381, "graphscope-g"]], "graphscope.get_default_session": [[382, "graphscope-get-default-session"]], "graphscope.graphlearn": [[383, "graphscope-graphlearn"]], "graphscope.gremlin": [[384, "graphscope-gremlin"]], "graphscope.has_default_session": [[385, "graphscope-has-default-session"]], "graphscope.session": [[386, "graphscope-session"]], "graphscope.set_option": [[387, "graphscope-set-option"]], "Developing Your Own Model": [[388, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[388, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[388, "sampling"]], "Encoder": [[388, "encoder"], [396, "encoder"]], "Loss Function and Training Process": [[388, "loss-function-and-training-process"]], "Data Source": [[389, "data-source"]], "1 Data format": [[389, "data-format"]], "1.1 Basic format": [[389, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[389, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[389, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[389, "label-format-labeled"]], "1.5 Putting together": [[389, "putting-together"]], "2 Data source type": [[389, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[389, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[389, "user-api"]], "Graph Object": [[390, "graph-object"]], "2 Describe the Topology": [[390, "describe-the-topology"]], "3.1 Stand-alone Mode": [[390, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[390, "distributed-mode-client-server-mode"]], "Graph Query": [[391, "graph-query"]], "1 Introduction": [[392, "introduction"]], "Graph Sampling Language\uff08GSL)": [[394, "graph-sampling-language-gsl"]], "Install from pip": [[395, "install-from-pip"]], "Get wheel package": [[395, "get-wheel-package"]], "Install using pip": [[395, "install-using-pip"]], "Install TensorFlow": [[395, "install-tensorflow"]], "Install git": [[395, "install-git"]], "Install dependent libraries": [[395, "install-dependent-libraries"]], "Compile": [[395, "compile"], [398, "compile"]], "Install": [[395, "install"]], "Run test": [[395, "run-test"]], "Docker image": [[395, "docker-image"]], "Graph Learning Model": [[396, "graph-learning-model"]], "Data model": [[396, "data-model"]], "Defining Your Own Operator": [[398, "defining-your-own-operator"]], "Distributed Runtime Design": [[398, "distributed-runtime-design"]], "Implement a New Operator": [[398, "implement-a-new-operator"]], "Clone source code": [[398, "clone-source-code"]], "Implement your operator class": [[398, "implement-your-operator-class"]], "Register Operator": [[398, "register-operator"]], "How to Use an Operator": [[398, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[399, "integrating-other-data-sources"]], "File System Interface": [[399, "file-system-interface"]], "ByteStreamAccessFile": [[399, "bytestreamaccessfile"]], "StructuredAccessFile": [[399, "structuredaccessfile"]], "WritableFile": [[399, "writablefile"]], "Register with Scheme": [[399, "register-with-scheme"]], "1 Trying out the built-in models": [[400, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[400, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[400, "developing-a-gnn-model"]], "3.1 Data Preparation": [[400, "data-preparation"]], "3.2 Graph Construction": [[400, "graph-construction"]], "3.3 Graph Sampling": [[400, "graph-sampling"]], "3.4 GNN Model": [[400, "gnn-model"]], "System configuration": [[401, "system-configuration"]], "Graph": [[402, "graph"], [406, "graph"], [540, "graph"]], "Graph object": [[402, "graph-object"]], "Loader object": [[402, "loader-object"]], "Graph Functions": [[402, "graph-functions"]], "Interactive Query": [[403, "interactive-query"]], "Builtin algorithms": [[405, "builtin-algorithms"]], "Nodes": [[406, "nodes"]], "Edges": [[406, "edges"]], "Self loops": [[406, "self-loops"]], "Attributes": [[406, "attributes"]], "Freezing graph structure": [[406, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[407, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[408, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[409, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[410, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[411, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[412, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[413, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[414, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[415, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[416, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[417, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[418, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[419, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[420, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[421, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[422, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[423, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[424, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[425, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[426, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[427, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[428, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[429, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[430, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[431, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[432, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[433, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[434, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[435, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[436, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[437, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[438, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[439, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[440, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[441, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[442, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[443, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[444, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[445, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[446, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[447, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[448, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[449, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[450, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[451, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[452, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[453, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[454, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[455, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[456, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[457, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[458, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[459, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[460, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[461, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[462, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[463, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[464, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[465, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[466, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[467, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[468, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[469, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[470, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[471, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[472, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[473, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[474, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[475, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[476, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[477, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[478, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[479, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[480, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[481, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[482, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[483, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[484, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[485, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[486, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[487, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[488, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[489, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[490, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[491, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[492, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[493, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[494, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[495, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[496, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[497, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[498, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[499, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[500, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[501, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[502, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[503, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[504, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[505, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[506, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[507, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[508, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[509, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[510, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[511, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[512, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[513, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[514, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[515, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[516, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[517, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[518, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[519, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[520, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[521, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[522, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[523, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[524, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[525, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[526, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[527, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[528, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[529, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[530, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[531, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[532, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[533, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[534, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[535, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[536, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[537, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[538, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[539, "graph-generators"]], "Atlas": [[539, "module-graphscope.nx.generators.atlas"]], "Classic": [[539, "module-graphscope.nx.generators.classic"]], "Expanders": [[539, "module-graphscope.nx.generators.expanders"]], "Small": [[539, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[539, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[539, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[539, "module-graphscope.nx.generators.directed"]], "Geometric": [[539, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[539, "module-graphscope.nx.generators.ego"]], "Stochastic": [[539, "module-networkx.generators.stochastic"]], "AS graph": [[539, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[539, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[539, "module-graphscope.nx.generators.social"]], "Spectral": [[539, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[539, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[539, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[539, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[539, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[539, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[539, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[539, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[540, "graph-types"]], "DiGraph": [[540, "digraph"]], "NetworkX-style API": [[541, "networkx-style-api"]], "Reading graphs": [[542, "reading-graphs"]], "Edge List": [[542, "edge-list"]], "Adjacency List": [[542, "adjacency-list"]], "Graph Transformation": [[543, "graph-transformation"]], "Operation": [[544, "operation"]], "Operation object": [[544, "operation-object"]], "BuiltIn operations": [[544, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[545, "python-api-reference"]], "Selector": [[546, "selector"]], "Selectors in different context": [[546, "selectors-in-different-context"]], "TensorContext": [[546, "tensorcontext"]], "VertexDataContext": [[546, "vertexdatacontext"]], "LabeledVertexDataContext": [[546, "labeledvertexdatacontext"]], "VertexPropertyContext": [[546, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[546, "labeledvertexpropertycontext"]], "Methods that use selectors": [[546, "methods-that-use-selectors"]], "One-dimensional results": [[546, "one-dimensional-results"]], "Multi-dimensional results": [[546, "multi-dimensional-results"]], "Vertex Range": [[546, "vertex-range"]], "Session": [[547, "session"]], "Session object": [[547, "session-object"]], "Session Functions": [[547, "session-functions"]], "Resources Estimator": [[548, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[549, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[549, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[549, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[549, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[549, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[551, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[551, "the-graphar-file-format"]], "Features": [[551, "features"]], "File Format": [[551, "file-format"]], "Information files": [[551, "information-files"]], "Data files": [[551, "data-files"]], "Property Data Types": [[551, "property-data-types"]], "GraphAr in GraphScope": [[551, "graphar-in-graphscope"]], "Saving Graph Data in GraphAr": [[551, "saving-graph-data-in-graphar"]], "Loading GraphAr Data into GraphScope": [[551, "loading-graphar-data-into-graphscope"]], "GRIN: Graph Retrieval INterface": [[552, "grin-graph-retrieval-interface"]], "Motivations": [[552, "motivations"]], "Unified Graph Retrieval": [[552, "unified-graph-retrieval"]], "GRIN Concepts": [[552, "grin-concepts"]], "Predefined Macros": [[552, "predefined-macros"]], "Partition Strategy": [[552, "partition-strategy"]], "Edge-cut Partition Strategy": [[552, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[552, "vertex-cut-partition-strategy"]], "Property Graph Model": [[552, "property-graph-model"]], "Implementation Guideline": [[552, "implementation-guideline"]], "For computing engine": [[552, "for-computing-engine"]], "For storage engine": [[552, "for-storage-engine"]], "Design Details": [[552, "design-details"]], "Handler": [[552, "handler"]], "Edge": [[552, "edge"]], "List": [[552, "list"]], "Array-style Retrieval": [[552, "array-style-retrieval"]], "List Iterator": [[552, "list-iterator"]], "Label": [[552, "label"], [573, "label"]], "Order": [[552, "order"]], "Master and Mirror": [[552, "master-and-mirror"]], "Local Complete": [[552, "local-complete"]], "Natural ID Trait": [[552, "natural-id-trait"]], "Groot: Persistent Graph Store": [[553, "groot-persistent-graph-store"]], "Known Limitation": [[553, "known-limitation"]], "Deploy Groot": [[553, "deploy-groot"]], "Install from ArtifactHub": [[553, "install-from-artifacthub"]], "Installing from a local directory": [[553, "installing-from-a-local-directory"]], "Common Configurations": [[553, "common-configurations"]], "Connecting to Groot": [[553, "connecting-to-groot"]], "Connection": [[553, "connection"]], "Building and Modifying Graph Models": [[553, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[553, "using-built-in-datasets"]], "Customizing Models and Datasets": [[553, "customizing-models-and-datasets"]], "Querying Data": [[553, "querying-data"]], "Python": [[553, "python"], [553, "id1"]], "Node.js": [[553, "node-js"]], "Data Import": [[553, "data-import"]], "Offline Import": [[553, "offline-import"]], "Prerequisite": [[553, "prerequisite"]], "Data Format": [[553, "data-format"]], "Loading Process": [[553, "loading-process"]], "Build: Building a partitioned graph": [[553, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[553, "loading-graph-partitions"]], "3. Commit to store service": [[553, "commit-to-store-service"]], "Realtime Write": [[553, "realtime-write"]], "Other features": [[553, "other-features"]], "Uninstalling and Restarting": [[553, "uninstalling-and-restarting"]], "Uninstall Groot": [[553, "uninstall-groot"]], "Restart Groot": [[553, "restart-groot"]], "Destroy Groot": [[553, "destroy-groot"]], "Developing Guide": [[553, "developing-guide"]], "Build image": [[553, "build-image"]], "Persistence": [[553, "persistence"]], "Troubleshooting": [[553, "troubleshooting"]], "Viewing logs": [[553, "viewing-logs"]], "Configuring logs": [[553, "configuring-logs"]], "Secondary Instance": [[553, "secondary-instance"]], "Traces": [[553, "traces"]], "Write High-availability": [[553, "write-high-availability"]], "In-memory immutable graphs on Vineyard": [[554, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[554, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[554, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[554, "using-loaded-graphs"]], "Applications and algorithms": [[555, "applications-and-algorithms"]], "Bind application to graph": [[555, "bind-application-to-graph"]], "Built-in algorithms": [[555, "built-in-algorithms"]], "Scaling and repartitioning": [[556, "scaling-and-repartitioning"]], "Fennel": [[556, "fennel"]], "XtraPuLP": [[556, "xtrapulp"]], "Hybrid partitioning": [[556, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[557, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[557, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[557, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[557, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[558, "user-guide-and-examples-of-gle"]], "Command-line Utility gsctl": [[560, "command-line-utility-gsctl"]], "Install/Update gsctl": [[560, "install-update-gsctl"]], "Commands": [[560, "commands"]], "Utility Scripts": [[560, "utility-scripts"]], "Client/Server Mode": [[560, "client-server-mode"]], "Change Scope": [[560, "change-scope"]], "Close the Connection": [[560, "close-the-connection"]], "How to Find logs": [[561, "how-to-find-logs"]], "Find logs in k8s": [[561, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[561, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[561, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[561, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[561, "find-logs-for-groot"]], "Monitoring": [[562, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[563, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[563, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[563, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[563, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[563, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[563, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[563, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[563, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[563, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[563, "id7"]], "\u90e8\u7f72": [[564, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[564, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[564, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[564, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[565, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[565, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[565, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[565, "python-wheels"]], "Linux": [[565, "linux"]], "macOS": [[565, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[565, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[566, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[567, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[567, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[567, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[567, "id6"]], "\u56fe\u5206\u6790": [[567, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[567, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[567, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[568, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[568, "id2"]], "\u6295\u5f71": [[568, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[568, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[568, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[569, "graphscope"]], "\u76ee\u5f55": [[569, null], [574, null]], "API \u53c2\u8003": [[569, null]], "\u7d22\u5f15": [[569, "id1"]], "\u5b89\u88c5": [[570, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[570, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[570, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[571, "id1"]], "Apache TinkerPop": [[571, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[571, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[571, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[571, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[571, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[571, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[571, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[571, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[571, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[571, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[571, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[571, "id13"]], "\u5df2\u77e5\u9650\u5236": [[571, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[572, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[572, "id2"]], "\u6570\u636e\u6a21\u578b": [[572, "id3"]], "\u7f16\u7801\u5668": [[572, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[572, "id5"]], "\u91c7\u6837": [[572, "id6"]], "\u56fe\u6570\u636e\u6d41": [[572, "id7"]], "\u6a21\u578b": [[572, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[572, "id9"]], "\u8f7d\u56fe": [[573, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[573, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[573, "id4"]], "Build Vertex": [[573, "build-vertex"]], "vertices": [[573, "vertices"]], "properties": [[573, "properties"], [573, "id7"]], "vid_field": [[573, "vid-field"]], "Build Edge": [[573, "build-edge"]], "edges": [[573, "edges"]], "label": [[573, "id6"]], "src_label and dst_label": [[573, "src-label-and-dst-label"]], "src_field and dst_field": [[573, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[573, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[573, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[573, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[573, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[573, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[573, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[573, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[573, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[573, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[573, "numpy"]], "Loader \u7684\u53d8\u79cd": [[573, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[574, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[330, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[330, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[330, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[330, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[330, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[330, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[330, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[330, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[330, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[330, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[330, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[330, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[330, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[330, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[330, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[330, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[330, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[330, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::adddatatoexistedelabel (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::adddatatoexistedvlabel (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [330, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::extendlabeldata (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[330, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[330, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[330, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [330, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [330, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[330, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[330, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[330, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [330, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [330, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[330, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[330, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [330, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::iedestssize (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment11IEDestsSizeEv"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedestssize (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment12IOEDestsSizeEv"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oedestssize (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment11OEDestsSizeEv"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [330, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [330, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[330, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[330, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[330, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[330, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[330, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[330, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[330, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[330, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[330, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[330, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[330, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[330, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[330, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[330, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [330, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[330, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[330, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[330, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[330, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[330, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[330, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[330, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[330, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[330, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[330, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[330, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[330, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[330, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[330, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[330, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[330, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[330, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[330, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[330, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[330, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[330, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[330, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[330, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[330, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[330, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[330, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[330, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[330, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[330, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[330, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[330, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[330, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[330, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[330, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[330, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[330, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[330, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[330, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[330, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[330, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [330, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[330, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[330, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[330, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[330, "_CPPv4N2gs14DispatchResult9graph_defEv"], [330, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[330, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[330, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[330, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [330, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[330, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[330, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[330, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[330, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[330, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[330, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[330, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[330, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[330, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[330, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[330, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[330, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[330, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[330, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[330, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[330, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[330, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[330, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[330, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[330, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[330, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[330, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[330, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[330, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[330, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [330, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[330, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[330, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[330, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[330, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[330, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[330, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[330, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[330, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[330, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [330, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[330, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[330, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[330, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[330, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[330, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[330, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[330, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[330, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[330, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[330, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[330, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[330, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[330, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[330, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[330, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[330, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[330, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[330, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[330, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[330, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[330, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[330, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[330, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[330, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[330, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[330, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[330, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[330, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[330, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[330, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[330, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[330, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[330, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[330, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[330, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[330, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[330, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[330, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[330, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[330, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[330, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[330, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[330, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[330, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[330, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [330, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[330, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[330, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[330, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[330, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[330, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[330, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[330, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[330, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[330, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[330, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[330, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[330, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[330, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[330, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[330, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[330, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[330, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[330, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[330, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[330, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[330, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[330, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[330, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[330, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[330, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[330, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[330, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[330, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[330, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [330, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[330, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [330, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[330, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[330, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[330, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[330, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[330, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[330, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[330, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[330, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[330, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[331, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[331, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[331, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[331, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[331, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[331, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[331, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[331, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[331, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[331, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[331, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[331, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[331, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[331, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[331, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[331, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[331, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[331, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[331, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[331, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[331, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[331, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[331, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[331, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[331, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[331, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[331, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[331, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[331, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[331, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[331, "graphscope.louvain"]], "lpa() (in module graphscope)": [[331, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[331, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[331, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[331, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[331, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[331, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[331, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[331, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[331, "graphscope.sssp"]], "triangles() (in module graphscope)": [[331, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[331, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[331, "graphscope.voterank"]], "wcc() (in module graphscope)": [[331, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[332, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[332, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[332, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[332, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[332, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[332, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[332, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[332, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[332, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[332, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[332, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[332, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[332, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[337, "graphscope.Vertex"]], "declare() (in module graphscope)": [[338, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[339, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[340, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[341, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[342, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[343, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[344, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[345, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[346, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[347, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[348, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[349, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[350, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[351, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[352, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[353, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[354, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[355, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[356, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[357, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[358, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[359, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[360, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[361, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[362, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[363, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[364, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[365, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[366, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[367, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[368, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[369, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[370, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[371, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[372, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[373, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[374, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[375, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[376, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[377, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[378, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[379, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[380, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[381, "graphscope.g"]], "get_default_session() (in module graphscope)": [[382, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[383, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[384, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[385, "graphscope.has_default_session"]], "session (in module graphscope)": [[386, "graphscope.session"]], "set_option() (in module graphscope)": [[387, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[402, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[402, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[402, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[402, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[402, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[402, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[402, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[402, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[402, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[402, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[402, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[402, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[402, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[402, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[402, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[402, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[402, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[402, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[403, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[403, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[403, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[403, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[403, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[403, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[403, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[403, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[403, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[403, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[403, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[403, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[403, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[403, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[403, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[404, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[404, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[404, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[404, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[404, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[405, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[406, "module-graphscope.nx.classes.function"]], "module": [[406, "module-graphscope.nx.classes.function"], [539, "module-graphscope.nx.generators.atlas"], [539, "module-graphscope.nx.generators.classic"], [539, "module-graphscope.nx.generators.community"], [539, "module-graphscope.nx.generators.degree_seq"], [539, "module-graphscope.nx.generators.directed"], [539, "module-graphscope.nx.generators.duplication"], [539, "module-graphscope.nx.generators.ego"], [539, "module-graphscope.nx.generators.expanders"], [539, "module-graphscope.nx.generators.geometric"], [539, "module-graphscope.nx.generators.harary_graph"], [539, "module-graphscope.nx.generators.intersection"], [539, "module-graphscope.nx.generators.joint_degree_seq"], [539, "module-graphscope.nx.generators.mycielski"], [539, "module-graphscope.nx.generators.nonisomorphic_trees"], [539, "module-graphscope.nx.generators.small"], [539, "module-graphscope.nx.generators.social"], [539, "module-graphscope.nx.generators.spectral_graph_forge"], [539, "module-graphscope.nx.generators.sudoku"], [539, "module-graphscope.nx.generators.trees"], [539, "module-graphscope.nx.generators.triads"], [539, "module-networkx.generators.internet_as_graphs"], [539, "module-networkx.generators.stochastic"], [544, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[407, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[408, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[409, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[410, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[411, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[412, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[413, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[414, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[415, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[416, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[417, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[418, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[419, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[420, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[421, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[422, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[423, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[424, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[425, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[426, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[427, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[428, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[429, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[430, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[431, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[432, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[433, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[434, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[435, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[436, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[437, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[438, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[439, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[440, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[441, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[442, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[443, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[444, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[445, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[446, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[447, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[448, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[449, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[450, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[451, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[452, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[453, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[454, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[455, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[456, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[457, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[458, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[459, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[460, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[461, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[462, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[463, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[464, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[465, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[466, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[467, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[468, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[469, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[470, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[471, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[472, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[473, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[474, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[475, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[476, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[477, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[478, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[479, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[480, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[481, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[482, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[483, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[484, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[485, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[486, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[487, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[488, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[489, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[490, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[491, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[492, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[493, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[494, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[495, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[496, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[497, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[498, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[499, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[500, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[501, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[502, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[503, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[504, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[505, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[506, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[507, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[508, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[509, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[510, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[511, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[512, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[513, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[514, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[515, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[516, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[517, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[518, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[519, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[520, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[521, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[522, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[523, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[524, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[525, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[526, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[527, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[528, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[529, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[530, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[531, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[532, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[533, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[534, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[535, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[536, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[537, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[538, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[539, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[539, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[539, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[539, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[539, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[539, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[539, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[539, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[539, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[539, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[539, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[539, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[539, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[539, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[539, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[539, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[539, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[539, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[539, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[539, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[539, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[539, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[540, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[540, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[540, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[540, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[540, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[540, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[540, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[540, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[540, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[540, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[540, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[540, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[540, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[540, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[540, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[540, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[540, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[540, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[540, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[540, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[542, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[542, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[543, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[543, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[544, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[544, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[547, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[547, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[547, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[547, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[547, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[547, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[547, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[547, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[547, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[547, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[547, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[547, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[547, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[547, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[547, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[547, "graphscope.Session.load_from"]], "restore_from_pvc() (graphscope.session method)": [[547, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[547, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[547, "graphscope.Session.store_to_pvc"]]}})